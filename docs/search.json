[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to sfdep","title":"Contributing to sfdep","text":"outlines propose change sfdep. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to sfdep","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to sfdep","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"/CONTRIBUTING.html","id":"notes-for-contributing-new-functionality","dir":"","previous_headings":"Bigger changes","what":"Notes for contributing new functionality","title":"Contributing to sfdep","text":"Implementation new functionality first developed work spdep. function relies neighbors weights, function utilize listw object. accepting multiple columns input, accept lists providing multiple columns output, utilize data.frames (tibbles)","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to sfdep","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"JosiahParry/sfdep\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to sfdep","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to sfdep","text":"Please note sfdep project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/Version-0-1-1.html","id":"colocation-analysis","dir":"Articles","previous_headings":"","what":"Colocation Analysis","title":"Version 0.1.1","text":"release includes functionality compute colocation quotients. extremely exciting first open source implementation Colocation Quotients aware . three types colocation quotient (CLQ) release: global CLQ, pairwise CLQ, local CLQ. See colocation vignette detailed write . three new functions calculating CLQs: global_colocation() pairwise_colocation() local_colocation()","code":""},{"path":"/articles/Version-0-1-1.html","id":"spacetime","dir":"Articles","previous_headings":"","what":"Spacetime","title":"Version 0.1.1","text":"probably notable, introduction new spacetime class. class created byproduct creating functionality emerging hot spot analysis. detailed write see spacetime vignette. new functions available : Creating spacetime objects changing spacetime context determining active context casting spacetime sf objects determine object spacetime object determine spacetime object spatio-temporal full grid aka spacetime cube spatio-temporal sparse grid, add rows make spatio-temporal full grid (spacetime cube) add columns geometry contexst data context conduct emerging hotspot analysis update times locations attributes spacetime object","code":""},{"path":"/articles/Version-0-1-1.html","id":"general","dir":"Articles","previous_headings":"","what":"General","title":"Version 0.1.1","text":"include_self() remove_self() Fixes bug local_g_perm() local_gstar_perm() return G value converted z-score","code":""},{"path":"/articles/Version-0-1-2.html","id":"colocation-analysis","dir":"Articles","previous_headings":"","what":"Colocation Analysis","title":"Version 0.1.2","text":"extremely exciting first open source implementation Colocation Quotients aware . global_colocation() pairwise_colocation() local_colocation()","code":""},{"path":"/articles/Version-0-1-2.html","id":"spacetime","dir":"Articles","previous_headings":"","what":"Spacetime","title":"Version 0.1.2","text":"big addition sfdep. Creating spacetime objects changing spacetime context determining active context casting spacetime sf objects determine object spacetime object determine spacetime object spatio-temporal full grid aka spacetime cube spatio-temporal sparse grid, add rows make spatio-temporal full grid (spacetime cube) add columns geometry contexst data context conduct emerging hotspot analysis update times locations attributes spacetime object","code":""},{"path":"/articles/Version-0-1-2.html","id":"general","dir":"Articles","previous_headings":"","what":"General","title":"Version 0.1.2","text":"include_self() remove_self() Fixes bug local_g_perm() local_gstar_perm() return G value converted z-score","code":""},{"path":"/articles/basics-of-sfdep.html","id":"intro-what-is-spatial-relationship","dir":"Articles","previous_headings":"","what":"Intro / what is spatial relationship","title":"The Basics of sfdep","text":"sfdep provides users way conduct “Exploratory Spatial Data Analysis”, ESDA short. ESDA differs typical exploratory data analysis strictly exploring spatial relationships. might guessed, ESDA evaluates whether phenomena captured data dependent upon space–spatially auto-correlated. Much ESDA focused “Local Indicators Spatial Association”, LISAs short. LISAs measures developed identify whether observed pattern truly random impacted relationship space. Much philosophy LISAs ESDA captured Tobler’s First Law Geography “Everything related everything else. near things related distant things.” - Waldo R. Tobler, 1969 ’s tough state simply. Things next tend similar things away. assess whether near things related things less , typically lattice data. lattice created landscape region divided sub-areas. naturally, types data represented vector polygons.","code":""},{"path":"/articles/basics-of-sfdep.html","id":"neighbors","dir":"Articles","previous_headings":"","what":"Neighbors","title":"The Basics of sfdep","text":"describe neighbors ’m going steal extensively post “Understanding Spatial Autocorrelation”. assume spatial relationship data, taking belief data completely independent . nearer things related, census tracts close similar values. order evaluate whether nearer things related, must know observations nearby. polygon data identify neighbors based contiguity. contiguous means connected touching—think contiguous lower 48 states.","code":""},{"path":"/articles/basics-of-sfdep.html","id":"contiguities","dir":"Articles","previous_headings":"Neighbors","what":"Contiguities","title":"The Basics of sfdep","text":"two common contiguities based game chess. Let’s take simple chess board.  chess piece can move different way. pieces, exception knight, move either diagonally horizontally vertically. common contiguities queen rook contiguities. chess, queen can move diagonally horizontal vertically whereas rook can move horizontal vertically.  extend idea polygons. Queen contiguities identify neighbors based polygon touching. rook contiguities, identify neighbors based polygons touch side. social science research, need concerned queen contiguities. chess board might make intuitive sense, geographies really wonky real life. map 47th observation guerry object ’s queen contiguity neighbors.  can see polygon touching, even corner, considered neighbor point question. done every polygon data set.","code":""},{"path":"/articles/basics-of-sfdep.html","id":"understanding-the-spatial-weights","dir":"Articles","previous_headings":"","what":"Understanding the spatial weights","title":"The Basics of sfdep","text":"neighbors identified, can used calculate spatial weights. typical method calculating spatial weights row standardization (st_weights(nb, style = \"W\")). neighbor touches census tract assigned equal weight. assigning neighbor value 1 dividing number neighbors. 5 neighboring census tracts, spatial weight 0.2 (1 / 5 = 0.2). Going back chess board example, can take position d4 look queen contiguities. 8 squares immediately touch square. one squares considered neighbor given value 1. square divided total number neighbors, 8. simply looks like following","code":"(d4_nbs <- rep(1, 8)) #> [1] 1 1 1 1 1 1 1 1  d4_nbs / length(d4_nbs) #> [1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125"},{"path":"/articles/basics-of-sfdep.html","id":"creating-neighbors-and-weights","dir":"Articles","previous_headings":"","what":"Creating Neighbors and Weights","title":"The Basics of sfdep","text":"sfdep utilizes list objects neighbors weights. neighbors weights lists. identify contiguity-based neighbors, use st_contiguity() sf geometry column. calculate weights neighbors list, use st_weights() resultant neighbors list. convention typically called nb wt. lists can created line line within pipe. common usecase likely via dplyr pipeline.","code":"guerry_nb <- guerry %>%    mutate(nb = st_contiguity(geometry),          wt = st_weights(nb),          .before = 1) # to put them in the front  guerry_nb #> Simple feature collection with 85 features and 28 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 29 #>    nb        wt    code_dept count ave_id_geo  dept region department crime_pers #>  * <nb>      <lis> <fct>     <dbl>      <dbl> <int> <fct>  <fct>           <int> #>  1 <int [4]> <dbl… 01            1         49     1 E      Ain             28870 #>  2 <int [6]> <dbl… 02            1        812     2 N      Aisne           26226 #>  3 <int [6]> <dbl… 03            1       1418     3 C      Allier          26747 #>  4 <int [4]> <dbl… 04            1       1603     4 E      Basses-Al…      12935 #>  5 <int [3]> <dbl… 05            1       1802     5 E      Hautes-Al…      17488 #>  6 <int [7]> <dbl… 07            1       2249     7 S      Ardeche          9474 #>  7 <int [3]> <dbl… 08            1      35395     8 N      Ardennes        35203 #>  8 <int [3]> <dbl… 09            1       2526     9 S      Ariege           6173 #>  9 <int [5]> <dbl… 10            1      34410    10 E      Aube            19602 #> 10 <int [5]> <dbl… 11            1       2807    11 S      Aude            15647 #> # … with 75 more rows, and 20 more variables: crime_prop <int>, literacy <int>, #> #   donations <int>, infants <int>, suicides <int>, main_city <ord>, #> #   wealth <int>, commerce <int>, clergy <int>, crime_parents <int>, #> #   infanticide <int>, donation_clergy <int>, lottery <int>, desertion <int>, #> #   instruction <int>, prostitutes <int>, distance <dbl>, area <int>, #> #   pop1831 <dbl>, geometry <MULTIPOLYGON>"},{"path":"/articles/basics-of-sfdep.html","id":"calculating-lisas","dir":"Articles","previous_headings":"","what":"Calculating LISAs","title":"The Basics of sfdep","text":"calculate LISAs typically provide numeric object(s), neighbor list, weights list–often argument nsim determine number simulations run. LISAs return data frame number rows input dataframe. resultant data frame can unnested, columns hoisted ease analysis. example calculate Local Moran use function local_moran() Now data frame, need unnest . can used visualization analysis. Additionally, LISAs can take number inputs, e.g. 3 numeric variables, provide list. Take example Local C statistic.","code":"lisa <- guerry_nb %>%    mutate(local_moran = local_moran(crime_pers, nb, wt, nsim = 199),          .before = 1)  lisa #> Simple feature collection with 85 features and 29 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 30 #>    local_moran$ii     $eii  $var_ii  $z_ii   $p_ii $p_ii_sim $p_folded_sim nb    #>  *          <dbl>    <dbl>    <dbl>  <dbl>   <dbl>     <dbl>         <dbl> <nb>  #>  1         0.522  -0.0495  0.310     1.03  0.305        0.35         0.175 <int… #>  2         0.828  -0.0297  0.118     2.49  0.0126       0.01         0.005 <int… #>  3         0.804   0.0145  0.157     1.99  0.0464       0.07         0.035 <int… #>  4         0.742  -0.0840  0.250     1.65  0.0982       0.12         0.06  <int… #>  5         0.231   0.00569 0.0420    1.10  0.271        0.26         0.13  <int… #>  6         0.839   0.0447  0.334     1.37  0.169        0.17         0.085 <int… #>  7         0.623   0.0579  1.38      0.481 0.630        0.6          0.3   <int… #>  8         1.65   -0.0376  1.17      1.55  0.120        0.1          0.05  <int… #>  9        -0.0198  0.00118 0.000532 -0.908 0.364        0.4          0.2   <int… #> 10         0.695  -0.0354  0.0684    2.79  0.00520      0.02         0.01  <int… #> # … with 75 more rows, and 28 more variables: wt <list>, code_dept <fct>, #> #   count <dbl>, ave_id_geo <dbl>, dept <int>, region <fct>, department <fct>, #> #   crime_pers <int>, crime_prop <int>, literacy <int>, donations <int>, #> #   infants <int>, suicides <int>, main_city <ord>, wealth <int>, #> #   commerce <int>, clergy <int>, crime_parents <int>, infanticide <int>, #> #   donation_clergy <int>, lottery <int>, desertion <int>, instruction <int>, #> #   prostitutes <int>, distance <dbl>, area <int>, pop1831 <dbl>, … lisa %>%    tidyr::unnest(local_moran) #> Simple feature collection with 85 features and 40 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 41 #>         ii      eii   var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness #>      <dbl>    <dbl>    <dbl>  <dbl>   <dbl>    <dbl>        <dbl>    <dbl> #>  1  0.522  -0.0495  0.310     1.03  0.305       0.35        0.175  0.119   #>  2  0.828  -0.0297  0.118     2.49  0.0126      0.01        0.005 -0.108   #>  3  0.804   0.0145  0.157     1.99  0.0464      0.07        0.035 -0.117   #>  4  0.742  -0.0840  0.250     1.65  0.0982      0.12        0.06   0.00145 #>  5  0.231   0.00569 0.0420    1.10  0.271       0.26        0.13  -0.197   #>  6  0.839   0.0447  0.334     1.37  0.169       0.17        0.085 -0.170   #>  7  0.623   0.0579  1.38      0.481 0.630       0.6         0.3    0.0724  #>  8  1.65   -0.0376  1.17      1.55  0.120       0.1         0.05  -0.337   #>  9 -0.0198  0.00118 0.000532 -0.908 0.364       0.4         0.2   -0.259   #> 10  0.695  -0.0354  0.0684    2.79  0.00520     0.02        0.01  -0.00289 #> # … with 75 more rows, and 33 more variables: kurtosis <dbl>, mean <fct>, #> #   median <fct>, pysal <fct>, nb <nb>, wt <list>, code_dept <fct>, #> #   count <dbl>, ave_id_geo <dbl>, dept <int>, region <fct>, department <fct>, #> #   crime_pers <int>, crime_prop <int>, literacy <int>, donations <int>, #> #   infants <int>, suicides <int>, main_city <ord>, wealth <int>, #> #   commerce <int>, clergy <int>, crime_parents <int>, infanticide <int>, #> #   donation_clergy <int>, lottery <int>, desertion <int>, instruction <int>, … guerry_nb %>%    mutate(local_c = local_c_perm(list(crime_pers, wealth), nb, wt),           .before = 1) %>%    tidyr::unnest(local_c) #> Simple feature collection with 85 features and 38 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 39 #>       ci cluster   e_ci var_ci   z_ci   p_ci p_ci_sim p_folded_sim skewness #>    <dbl> <fct>    <dbl>  <dbl>  <dbl>  <dbl>    <dbl>        <dbl>    <dbl> #>  1 1.53  Positive  2.44  0.699 -1.08  0.282     0.272        0.136    0.488 #>  2 0.500 Positive  1.73  0.352 -2.07  0.0385    0.008        0.004    0.483 #>  3 0.642 Positive  1.70  0.259 -2.07  0.0385    0.012        0.006    0.301 #>  4 0.324 Positive  2.29  0.802 -2.20  0.0278    0.004        0.002    0.228 #>  5 0.298 Positive  2.34  1.04  -2.00  0.0457    0.012        0.006    0.224 #>  6 1.60  Positive  3.33  0.773 -1.97  0.0491    0.056        0.028    0.165 #>  7 2.04  Positive  3.34  1.67  -0.999 0.318     0.336        0.168    0.316 #>  8 2.20  Positive  3.46  1.95  -0.898 0.369     0.368        0.184    0.316 #>  9 0.507 Positive  1.67  0.387 -1.86  0.0624    0.04         0.02     0.189 #> 10 1.46  Positive  1.73  0.395 -0.435 0.664     0.728        0.364    0.522 #> # … with 75 more rows, and 30 more variables: kurtosis <dbl>, nb <nb>, #> #   wt <list>, code_dept <fct>, count <dbl>, ave_id_geo <dbl>, dept <int>, #> #   region <fct>, department <fct>, crime_pers <int>, crime_prop <int>, #> #   literacy <int>, donations <int>, infants <int>, suicides <int>, #> #   main_city <ord>, wealth <int>, commerce <int>, clergy <int>, #> #   crime_parents <int>, infanticide <int>, donation_clergy <int>, #> #   lottery <int>, desertion <int>, instruction <int>, prostitutes <int>, …"},{"path":"/articles/colocation-analysis.html","id":"global-colocation","dir":"Articles","previous_headings":"","what":"Global Colocation","title":"Colocation Quotients CLQs","text":"global_colocation() quotient used identify colocation single categorical vector \\(\\). result global CLQ approximately 0 insignificant. can interpret mean significant colocation “Main Cities.”","code":"A <- guerry[[\"main_city\"]] nb <- st_contiguity(sf::st_geometry(guerry)) global_colocation(A, nb, 299) #> $CLQ #> [1] 1.02841 #>  #> $p_sim #> [1] 0.1533333"},{"path":"/articles/colocation-analysis.html","id":"pairwise-colocation","dir":"Articles","previous_headings":"","what":"Pairwise Colocation","title":"Colocation Quotients CLQs","text":"pairwise CLQ evaluates colocation values categorical variables \\(\\) \\(B\\) global level. results one-directional \\(\\B\\). provide 2 vectors pairwise_colocation() function results matrix unique values \\(\\) column headers unique values \\(B\\) row names. additional columns indicate simulated p-values colocation quotients. look first row, see colocation \\(C \\3{:}Lg\\) significant value ~ \\(0.20\\). can interpret mean systematically less colocation region C near large main cities.","code":"A <- guerry$main_city B <- guerry$region nb <- st_knn(sf::st_geometry(guerry), 5) #> ! Polygon provided. Using point on surface. pairwise_colocation(B, A, nb, 199) #>        1:Sm     2:Med      3:Lg p_sim_1:Sm p_sim_2:Med p_sim_3:Lg #> C 0.8894118 1.1250679 0.1976471      0.335       0.000      0.000 #> E 1.8776471 0.8514027 0.9882353      0.000       0.020      0.460 #> N 0.1976471 1.0794570 1.1858824      0.000       0.045      0.295 #> S 1.5811765 0.9122172 0.8894118      0.035       0.100      0.400 #> W 0.6917647 1.0338462 0.9882353      0.170       0.255      0.540"},{"path":"/articles/colocation-analysis.html","id":"local-colocation","dir":"Articles","previous_headings":"","what":"Local Colocation","title":"Colocation Quotients CLQs","text":"local CLQ rather similar pairwise CLQ. key difference weights list used calculating CLQ. introductory paper, Wang et al. (2017) emphasize adaptive gaussian kernel weights used. introduces distance decay closer values heft distant onces calculating local CLQ. result local CLQ returns CLQ simulated p-value unique value B falls neighborhood. Note first observation CLQ C E. neighborhood first observatino consists C E values. can verify like . ’s also worth noting can create local CLQ dplyr pipe like ","code":"# Identify A & B variables A <- guerry$main_city B <- guerry$region geo <- sf::st_geometry(guerry) nb <- st_knn(geo, 5) #> ! Polygon provided. Using point on surface. wt <- st_kernel_weights(nb, geo, \"gaussian\", adaptive = TRUE) #> ℹ It is recommended to include the ith observation. Consider `nb = include_self(nb)`. #> ! Polygon provided. Using point on surface.  res <- local_colocation(A, B, nb, wt, 49)  head(res) #>           C        E        N        S  W p_sim_C p_sim_E p_sim_N p_sim_S #> 1 0.8461533 4.095023       NA       NA NA    0.08    0.02      NA      NA #> 2        NA       NA 4.941176       NA NA      NA      NA    0.02      NA #> 3 4.9411765       NA       NA       NA NA    0.02      NA      NA      NA #> 4        NA 2.090837       NA 2.850339 NA      NA    0.10      NA    0.10 #> 5        NA 3.268800       NA 1.672377 NA      NA    0.02      NA    0.30 #> 6 1.1554807 1.878544       NA 1.907152 NA    0.42    0.30      NA    0.22 #>   p_sim_W #> 1      NA #> 2      NA #> 3      NA #> 4      NA #> 5      NA #> 6      NA # view first row res[1,] #>           C        E  N  S  W p_sim_C p_sim_E p_sim_N p_sim_S p_sim_W #> 1 0.8461533 4.095023 NA NA NA    0.08    0.02      NA      NA      NA  # find xj values for the B column based on neighbors # take first observations neighbors sfdep::find_xj(B, nb)[[1]]  #> [1] E E C E E #> Levels: C E N S W res_tidy <- guerry |>    select(main_city, region) |>    mutate(nb = st_knn(geometry, 5),          wt = st_kernel_weights(nb, geometry, \"gaussian\", adaptive = TRUE),          lclq = local_colocation(main_city, region, nb, wt, 99)) |>    tidyr::unnest(lclq) #> ! Polygon provided. Using point on surface. #> ℹ It is recommended to include the ith observation. Consider `nb = include_self(nb)`. #> ! Polygon provided. Using point on surface.  slice(res_tidy, 1:5) #> Simple feature collection with 5 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 595532 ymin: 1858801 xmax: 975716 ymax: 2564568 #> CRS:           NA #> # A tibble: 5 × 15 #>   main_city region                       geometry nb    wt         C     E     N #>   <ord>     <fct>                  <MULTIPOLYGON> <nb>  <lis>  <dbl> <dbl> <dbl> #> 1 2:Med     E      (((801150 2092615, 800669 209… <int… <dbl…  0.846  4.10 NA    #> 2 2:Med     N      (((729326 2521619, 729320 252… <int… <dbl… NA     NA     4.94 #> 3 2:Med     C      (((710830 2137350, 711746 213… <int… <dbl…  4.94  NA    NA    #> 4 1:Sm      E      (((882701 1920024, 882408 192… <int… <dbl… NA      2.09 NA    #> 5 1:Sm      E      (((886504 1922890, 885733 192… <int… <dbl… NA      3.27 NA    #> # … with 7 more variables: S <dbl>, W <dbl>, p_sim_C <dbl>, p_sim_E <dbl>, #> #   p_sim_N <dbl>, p_sim_S <dbl>, p_sim_W <dbl>"},{"path":"/articles/conditional-permutation.html","id":"inference-using-conditional-permutation","dir":"Articles","previous_headings":"","what":"Inference using conditional permutation","title":"Conditional Permutations with sfdep","text":"spatial data, always start assumption spatial randomness. Traditional hypothesis testing like t-test often use assumption normality. assumption, however, often broken spatial data. analytical p-values (p-values come reference distribution normal distribution) often unreliable, inaccurate measures significance. reason, ESDA, often use simulated, pseudo, p-values. Simulated p-values calculated creating reference distribution comparing observed statistic reference distribution. reference created making M conoditional permutations dataset calculating test statistic. ratio times simulated statistic greater observed statistic (either direction) number simulations becomes simulated p-value.","code":""},{"path":"/articles/conditional-permutation.html","id":"worked-example","dir":"Articles","previous_headings":"Inference using conditional permutation","what":"Worked Example","title":"Conditional Permutations with sfdep","text":"can use cond_permute_nb() create conditional permutation neighbors list. permutated neighbor list can create new weights list calculate global Geary C permutation. say, 199 times, can make fairly robust reference distribution. putting code replicate() call. replicate() execute code number times determined first argument. calculate simulated p-values many measures sfdep. can plot reference distribution observed value reference distribution.  can see observed Geary C value extreme falls close center distribution. can now calculate pseudo p-value using formula \\((M + 1) / (R + 1)\\) approach taken Pysal sfdep methods apply provided spdep.","code":"p_nb <- cond_permute_nb(nb)  p_wt <- st_weights(p_nb)  observed <- global_c(x, p_nb, p_wt)    observed #> $C #> [1] 1.093211 #>  #> $K #> [1] 2.400641 reps <- replicate(199, {   p_nb <- cond_permute_nb(nb)   p_wt <- st_weights(p_nb)   global_c(x, p_nb, p_wt)[[\"C\"]] }) library(ggplot2)  ggplot(data.frame(sim_val = reps),         aes(sim_val)) +   geom_histogram(bins = 20) +   geom_vline(xintercept = observed[[\"C\"]],               color = \"#6fb381\",               lty = 2,              ) +   theme_light() # simulated p-value (sum(observed[[\"C\"]] <= reps) + 1) / (199 + 1) #> [1] 0.1"},{"path":"/articles/spacetime-s3.html","id":"spatio-temporal-data","dir":"Articles","previous_headings":"","what":"Spatio-temporal data","title":"spacetime and spacetime cubes","text":"Traditionally “spatio-temporal data often come form single tables” can typically categorized “time-wide”, “space-wide”, “long formats.” long formats, often referred “tidy”, row identifies unique location time observation represented column dedicated time another locations. typical presentation panel data. Space-wide data present time period across row locational information column. Whereas time-wide representation location data rows time period represented new column. flat formats linked geographies represent meaningful way. flat files typically contain identifier location, spatial representation. spacetime class developed particular focus lattice data. , create representation spatio-temoral data set regions number different time-periods e.g. population densities census tracts year. represent spatial data temporal context Pebesma, 2012 identifies number spatio-temporal layouts, two particular interest. spatio-temporal full grid sparse grids. Given number spatial features \\(n\\), time periods \\(m\\), spatio-temporal full grid contains \\(n \\times m\\) rows. location recorded observation time periods \\(m\\). example, 10 locations 20 time periods, 20 observations per location meaning \\(10 \\times 20 = 200\\) observations. efficient complete time-series location. missing observations locations time periods entirely omitted data set, spatio-temporal sparse grid. case \\(N \\lt m \\times n\\)","code":""},{"path":"/articles/spacetime-s3.html","id":"spacetime-s3-class-in-sfdep","dir":"Articles","previous_headings":"","what":"spacetime s3 class in sfdep","title":"spacetime and spacetime cubes","text":"Inspired design tidygraph package, spacetime class links data frame sf object based shared location identifier column. referred data context geometry context. spacetime class allows switch different contexts work individually see fit. Typically, one wants represent location data multiple time periods containing information geography, sf object used duplicates geometry location time period can computationally expensive. linking sf objects data frame based location ID, able avoid problem four important aspects spacetime class: data: data.frame object geometry: sf object location identifiers time column","code":""},{"path":"/articles/spacetime-s3.html","id":"creating-a-spacetime-object","dir":"Articles","previous_headings":"spacetime s3 class in sfdep","what":"Creating a spacetime object","title":"spacetime and spacetime cubes","text":"two ways create spacetime objects: 1) as_spacetime() 2) spacetime() new_spacetime(). former takes sf object contains location IDs, times, geometry converts spacetime object. Whereas constructor functions require data frame separate sf object containing geometry. Let’s create sample data set using guerry representation, duplicate geometries location, cast spacetime object using as_spacetime(). Alternatively, scenario, geometry data two separate objects. case can use spacetime() constructor. ’s required arguments .data, .geometry, .loc_col, .time_col. .data must data frame .geometry must tibble. create data frame df contains columns location identifier, time period, variables interest case crime_pers. Note location identifier column two objects—requirement. aside, ’d note as_spacetime() uses sf distinct method can bit computationally intense depending geometries. ’d recommend using spacetime() constructor always. spacetime objects, can also cast back sf objects using as_sf(x).","code":"# replicate the guerry dataset 10 times x <- purrr::map_dfr(1:10, ~guerry) |>    select(code_dept, crime_pers) |>           # create an indicator for time period   mutate(time_period = sort(rep(1:10, 85)),           # add some noise           crime_pers = crime_pers * runif(850, max = 2))  x #> Simple feature collection with 850 features and 3 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 850 × 4 #>    code_dept crime_pers                                     geometry time_period #>  * <fct>          <dbl>                               <MULTIPOLYGON>       <int> #>  1 01            56677. (((801150 2092615, 800669 2093190, 800688 2…           1 #>  2 02            52367. (((729326 2521619, 729320 2521230, 729280 2…           1 #>  3 03            47114. (((710830 2137350, 711746 2136617, 712430 2…           1 #>  4 04            18333. (((882701 1920024, 882408 1920733, 881778 1…           1 #>  5 05             7137. (((886504 1922890, 885733 1922978, 885479 1…           1 #>  6 07              874. (((747008 1925789, 746630 1925762, 745723 1…           1 #>  7 08            41163. (((818893 2514767, 818614 2514515, 817900 2…           1 #>  8 09             4824. (((509103 1747787, 508820 1747513, 508154 1…           1 #>  9 10            26366. (((775400 2345600, 775068 2345397, 773587 2…           1 #> 10 11             6690. (((626230 1810121, 626269 1810496, 627494 1…           1 #> # … with 840 more rows spt <- as_spacetime(x, \"code_dept\", \"time_period\") df <- sf::st_drop_geometry(x) geo <- select(guerry, code_dept)  head(df) #> # A tibble: 6 × 3 #>   code_dept crime_pers time_period #>   <fct>          <dbl>       <int> #> 1 01            56677.           1 #> 2 02            52367.           1 #> 3 03            47114.           1 #> 4 04            18333.           1 #> 5 05             7137.           1 #> 6 07              874.           1 spt <- spacetime(.data = df,            .geometry = geo,            .loc_col = \"code_dept\",            .time_col = \"time_period\")   spt #> spacetime ──── #> Context:`data` #> 85 locations `code_dept` #> 10 time periods `time_period` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 850 × 3 #>    code_dept crime_pers time_period #>  * <fct>          <dbl>       <int> #>  1 01            56677.           1 #>  2 02            52367.           1 #>  3 03            47114.           1 #>  4 04            18333.           1 #>  5 05             7137.           1 #>  6 07              874.           1 #>  7 08            41163.           1 #>  8 09             4824.           1 #>  9 10            26366.           1 #> 10 11             6690.           1 #> # … with 840 more rows"},{"path":"/articles/spacetime-s3.html","id":"spacetime-contexts","dir":"Articles","previous_headings":"","what":"Spacetime Contexts","title":"spacetime and spacetime cubes","text":"Spacetime objects two contexts: data geometry contexts. data context consists data frame object. can manipulated just like data frame. switch contexts using activate(). switch data context activate “data.” geometry context sf object can used like sf object activated activate(x, \"geometry\").","code":"activate(spt, \"data\") #> spacetime ──── #> Context:`data` #> 85 locations `code_dept` #> 10 time periods `time_period` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 850 × 3 #>    code_dept crime_pers time_period #>  * <fct>          <dbl>       <int> #>  1 01            56677.           1 #>  2 02            52367.           1 #>  3 03            47114.           1 #>  4 04            18333.           1 #>  5 05             7137.           1 #>  6 07              874.           1 #>  7 08            41163.           1 #>  8 09             4824.           1 #>  9 10            26366.           1 #> 10 11             6690.           1 #> # … with 840 more rows spt |>    activate(\"geometry\")  #> spacetime ──── #> Context:`geometry` #> 85 locations `code_dept` #> 10 time periods `time_period` #> ── geometry context ──────────────────────────────────────────────────────────── #> Simple feature collection with 85 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 2 #>    code_dept                                                            geometry #>  * <fct>                                                          <MULTIPOLYGON> #>  1 01        (((801150 2092615, 800669 2093190, 800688 2095430, 800780 2095795,… #>  2 02        (((729326 2521619, 729320 2521230, 729280 2518544, 728751 2517520,… #>  3 03        (((710830 2137350, 711746 2136617, 712430 2135212, 712070 2134132,… #>  4 04        (((882701 1920024, 882408 1920733, 881778 1921200, 881526 1922332,… #>  5 05        (((886504 1922890, 885733 1922978, 885479 1923276, 883061 1925266,… #>  6 07        (((747008 1925789, 746630 1925762, 745723 1925138, 744216 1925236,… #>  7 08        (((818893 2514767, 818614 2514515, 817900 2514467, 817327 2514945,… #>  8 09        (((509103 1747787, 508820 1747513, 508154 1747093, 505861 1746627,… #>  9 10        (((775400 2345600, 775068 2345397, 773587 2345177, 772940 2344780,… #> 10 11        (((626230 1810121, 626269 1810496, 627494 1811321, 627681 1812424,… #> # … with 75 more rows"},{"path":"/articles/spacetime-s3.html","id":"spatio-temporal-grids-and-spacetime","dir":"Articles","previous_headings":"","what":"Spatio-temporal grids and spacetime","title":"spacetime and spacetime cubes","text":"Unlike spacetime, sfdep make explicit distinctions spatio-temporal full sparse grids. Rather, approach laissez faire. design spacetime interface flexible designed let user clean data whatever tools familiar specification. distinction sparse full grids important comes analyzing data. example emerging hot spot analysis requires spatio-temporal full-grid. sfdep utilizes phrase “spacetime cube” popularized ESRI refer spatio-temporal full grid.","code":""},{"path":"/articles/spacetime-s3.html","id":"spacetime-cubes","dir":"Articles","previous_headings":"Spatio-temporal grids and spacetime","what":"Spacetime Cubes","title":"spacetime and spacetime cubes","text":"spacetime object spacetime cube every location value every time index. Another way saying location contains regular time-series. ESRI terminology, basic unit spacetime cube bin. bin unique combination location time index. time index, collection every location called time slice. every location, collection every bin time index referred bin time-series.  can test object spacetime cube is_spacetime_cube() take sample 800 850 rows spt makes sparse grid. object spare spatio-temporal grid can make full one using complete_spacetime_cube(). works similarly [tidyr::complete()]. complete_spacetime_cube() ensures row combination location time. New rows contain missing values One conditions spactime cube time-series must regular (one observation time index). can create sample data replacement create irregular time-series multiple locations. error informative. unique bins spacetime data. can check . Spacetime cubes used emerging hot spot analysis .","code":"is_spacetime_cube(spt) #> [1] TRUE sparse_spt <- dplyr::slice_sample(spt, n = 800)  is_spacetime_cube(sparse_spt) #> ! Number of rows does not equal `n time-periods x n locations` #> [1] FALSE spt_complete <- complete_spacetime_cube(sparse_spt) #> ! Vars(s) `crime_pers` is missing 50 value(s).  is_spacetime_cube(spt_complete) #> [1] TRUE set.seed(0) sparse_spt <- dplyr::slice_sample(spt, n = 800, replace = TRUE)  complete_spacetime_cube(sparse_spt) #> Error in `complete_spacetime_cube()`: #> ! Location and time combinations are not unique. #> ℹ There should only be one observation per time and location combination. dplyr::count(sparse_spt, time_period, code_dept) #> spacetime ──── #> Context:`data` #> 85 locations `code_dept` #> 10 time periods `time_period` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 517 × 3 #>    time_period code_dept     n #>          <int> <fct>     <int> #>  1           1 01            1 #>  2           1 03            1 #>  3           1 05            1 #>  4           1 07            1 #>  5           1 09            1 #>  6           1 12            1 #>  7           1 16            1 #>  8           1 17            2 #>  9           1 18            1 #> 10           1 21            2 #> # … with 507 more rows emerging_hotspot_analysis(spt, \"crime_pers\", threshold = 0.05) #> # A tibble: 85 × 4 #>    location     tau p_value classification       #>    <fct>      <dbl>   <dbl> <chr>                #>  1 01       -0.111    0.721 sporadic hotspot     #>  2 02       -0.333    0.210 sporadic hotspot     #>  3 03       -0.111    0.721 consecutive hotspot  #>  4 04        0.0667   0.858 sporadic coldspot    #>  5 05       -0.0667   0.858 consecutive coldspot #>  6 07        0.333    0.210 sporadic coldspot    #>  7 08       -0.156    0.592 sporadic hotspot     #>  8 09        0.111    0.721 sporadic coldspot    #>  9 10        0.200    0.474 sporadic hotspot     #> 10 11       -0.156    0.592 sporadic coldspot    #> # … with 75 more rows"},{"path":"/articles/spdep-and-pysal.html","id":"global-statistics","dir":"Articles","previous_headings":"","what":"Global Statistics","title":"Comparison to spdep and pysal","text":"Measures global spatial autocorrelation.","code":""},{"path":"/articles/spdep-and-pysal.html","id":"local-indicators-of-spatial-association","dir":"Articles","previous_headings":"","what":"Local Indicators of Spatial Association","title":"Comparison to spdep and pysal","text":"Measures local spatial autocorrelation.","code":""},{"path":"/articles/spdep-and-pysal.html","id":"not-implemented","dir":"Articles","previous_headings":"Local Indicators of Spatial Association","what":"Not implemented","title":"Comparison to spdep and pysal","text":"Functions present Pysal implemented sfdep.","code":""},{"path":"/articles/understanding-emerging-hotspots.html","id":"gettis-ord-gi","dir":"Articles","previous_headings":"","what":"Gettis-Ord Gi*","title":"Emerging Hot Spot Analysis","text":"Gettis-Ord Gi Gi* (pronounced gee-eye-star) one earliest LISAs. Gi Gi* measures typically reported Z-score high values indicate high-high cluster negative Z-scores indicate low-low cluster. high-low low-high classifications like local Moran. “Gi statistic consist ratio weighted average values neighboring locations, sum values, including value location (\\(x_i\\))” (Local Spatial Autocorrelation (2), GeoDa Center). \\[ G_i = \\frac{\\sum_{j \\ne }W_{ij}X_j}           {\\sum_{j \\ne }X_j} \\] Gi* statistic includes focal (self, ith) observation neighborhood. \\[ G_i* = \\frac{\\sum_{j}W_{ij}X_j}           {\\sum_{j}X_j} \\]","code":""},{"path":"/articles/understanding-emerging-hotspots.html","id":"calculating-the-local-gi","dir":"Articles","previous_headings":"Gettis-Ord Gi*","what":"Calculating the local Gi*","title":"Emerging Hot Spot Analysis","text":"calculate local Gi* using sfdep, especially aware neighbors list create . default, create neighbors list, exclude self neighbors list seems little silly say “neighbor.” However, want calculate local Gi*, must sure explicitly add using include_self() , follow example laid GeoDa center documentation calculate plot local Gi* statistic donations using Guerry dataset. First create neighbor list ensuring self included create weights list new neighbors list. Following, calculate local Gi* using local_gstar_perm() donations column creates new data frame column called gi_star. unnest using tidyr::unnest(). Lastly, classify clusters using combination mutate() case_when() piped ggplot map. perfect recreation GeoDa map, close—differences likely due conditional permutation (see conditional permutation vignette significance calculation).  EHSA, calculate statistic time period.","code":"library(sfdep) library(dplyr)  guerry_nb <- guerry |>    mutate(     nb = include_self(st_contiguity(geometry)),          wt = st_weights(nb)     ) donat_gistar <- guerry_nb |>    transmute(gi_star = local_gstar_perm(donations, nb, wt, nsim = 199)) |>    tidyr::unnest(gi_star)  donat_gistar #> Simple feature collection with 85 features and 8 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 9 #>    gi_star   e_gi     var_gi p_value p_sim p_folded_sim skewness kurtosis #>      <dbl>  <dbl>      <dbl>   <dbl> <dbl>        <dbl>    <dbl>    <dbl> #>  1  -1.58  0.0116 0.0000115   0.115   0.05        0.025    0.613   0.0863 #>  2  -0.452 0.0119 0.0000135   0.652   0.79        0.395    0.917   0.712  #>  3   0.515 0.0121 0.0000102   0.607   0.54        0.27     0.584   0.221  #>  4  -1.60  0.0118 0.0000148   0.110   0.06        0.03     0.467  -0.387  #>  5  -1.11  0.0121 0.0000191   0.265   0.24        0.12     0.938   1.66   #>  6  -2.41  0.0118 0.00000801  0.0158  0.01        0.005    0.479  -0.0263 #>  7  -0.385 0.0119 0.0000186   0.700   0.77        0.385    0.716   0.336  #>  8  -0.777 0.0121 0.0000188   0.437   0.45        0.225    0.821   0.797  #>  9  -1.37  0.0122 0.0000147   0.170   0.09        0.045    0.928   0.963  #> 10  -1.40  0.0120 0.0000112   0.163   0.1         0.05     0.709   0.684  #> # … with 75 more rows, and 1 more variable: geometry <MULTIPOLYGON> library(ggplot2)  donat_gistar |>    mutate(cluster = case_when(     p_folded_sim > 0.05 ~ \"Not Significant\",     p_folded_sim <= 0.05 & gi_star < 0 ~ \"Low\",     p_folded_sim <= 0.05 & gi_star > 0 ~ \"High\"   )) |>    ggplot(aes(fill = cluster)) +   geom_sf(lwd = 0.2, color = \"black\") +   scale_fill_manual(values = c(\"High\" = \"red\",                                \"Low\" = \"Blue\",                                 \"Not Significant\" = \"white\")) +   theme_void()"},{"path":"/articles/understanding-emerging-hotspots.html","id":"mann-kendall-test","dir":"Articles","previous_headings":"","what":"Mann-Kendall Test","title":"Emerging Hot Spot Analysis","text":"calculations local Gi* unit time every geography, can evaluate hotspots change time. incorporate time-series analysis use Mann-Kendall (MK) Trend test. MK test nonparametric test checks monotonic trends. don’t recall term monotonic calculus class, ’s okay. monotonic series function one increases (decreases) never changes direction. long function either stays flat continues increase, monotonic. benefit test nonparametric trend can non-linear. , MK test check time-series strictly monotonic—e.g. every subsequent unit increasing decreasing—overall series increasing decreasing. example monotonic upward trend linear.  realistic example, let’s take look economics dataset ggplot2 contains data FRED. ’ll use psavert variable contains data personal savings rates United States.  visual inspection, can tell overall trend decreasing. MK test can confirm . use Kendall::MannKendall() test trend significantly decreasing. results show tau p-value. Tau ranges -1 1 -1 perfectly decreasing series 1 perfectly increasing series. p-value extremely small indicating null-hypothesis (trend) can rejected. tau -0.64 indicates moder4ate downward trend.","code":"series <- c(0, 1, 1.4, 1.5, 1.6, 5, 5, 5.5, 8, seq(8, 8.5, length.out = 5))  plot(series, type = \"l\") econ <- ggplot2::economics  ggplot(econ, aes(date, psavert)) +   geom_line() +   theme_light() Kendall::MannKendall(econ$psavert) #> tau = -0.644, 2-sided pvalue =< 2.22e-16"},{"path":"/articles/understanding-emerging-hotspots.html","id":"the-whole-game","dir":"Articles","previous_headings":"","what":"The whole game","title":"Emerging Hot Spot Analysis","text":"’ve gone briefly local Gi* Mann-Kendall Test. EHSA combines evaluate trends hot cold spots time. EHSA utilizes spacetime cube, spatio-temporal full grid. Please see spacetime vignette spacetime representations. short, spacetime cube contains regular time-series location dataset—.e. \\(n \\times m\\) observations n number locations m number times. time-slice (.e. complete set geometries given time) local Gi* calculated. Say 10 times, \\(G_{,t=1}^*, \\ldots, G_{,t=10}^*\\). , given location’s time-series Gi*, assessed using MK test.","code":""},{"path":"/articles/understanding-emerging-hotspots.html","id":"a-hands-on-example","dir":"Articles","previous_headings":"","what":"A hands on example","title":"Emerging Hot Spot Analysis","text":"can compute EHSA manually using sfsdep spacetime classes. example utilize Ecometric Data Boston Area Research Initiative (data documentation). data generated 911 calls Boston 2010 - 2020 aggregated Census Block Group (CBG) level. column value indicates calculated prevalence derived Exploratory Factor Analysis population projections.","code":""},{"path":"/articles/understanding-emerging-hotspots.html","id":"data","dir":"Articles","previous_headings":"A hands on example","what":"Data","title":"Emerging Hot Spot Analysis","text":"data stored internal data file bos-ecometric.csv bos-ecometric.geojson. read df geo create new spacetime object called bos . Note: 2022-05-31 data avaiable development version, please install remotes::install_github(\"josiahparry/sfdep\").","code":"# Create objects to store file paths  df_fp <- system.file(\"extdata\", \"bos-ecometric.csv\", package = \"sfdep\") geo_fp <- system.file(\"extdata\", \"bos-ecometric.geojson\", package = \"sfdep\")  # read in data  df <- readr::read_csv(df_fp, col_types = \"ccidD\") geo <- sf::read_sf(geo_fp)   # Create spacetime object called `bos` bos <- spacetime(df, geo,                   .loc_col = \".region_id\",                  .time_col = \"time_period\")  bos #> spacetime ──── #> Context:`data` #> 168 locations `.region_id` #> 10 time periods `time_period` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 1,680 × 5 #>    .region_id  ecometric  year value time_period #>  * <chr>       <chr>     <int> <dbl> <date>      #>  1 25025010405 Guns       2010  0.35 2010-01-01  #>  2 25025010405 Guns       2011  0.89 2011-01-01  #>  3 25025010405 Guns       2012  1.2  2012-01-01  #>  4 25025010405 Guns       2013  0.84 2013-01-01  #>  5 25025010405 Guns       2014  1.5  2014-01-01  #>  6 25025010405 Guns       2015  1.15 2015-01-01  #>  7 25025010405 Guns       2016  1.48 2016-01-01  #>  8 25025010405 Guns       2017  1.64 2017-01-01  #>  9 25025010405 Guns       2018  0.49 2018-01-01  #> 10 25025010405 Guns       2019  0.17 2019-01-01  #> # … with 1,670 more rows"},{"path":"/articles/understanding-emerging-hotspots.html","id":"local-gi","dir":"Articles","previous_headings":"A hands on example","what":"Local Gi*","title":"Emerging Hot Spot Analysis","text":"first step EHSA calculate local Gi* time period. , however, requires couple preceding steps. calculate Gi* need identify neighbors weights. , activate geometry context create two new columns nb wt. activate data context copy nb wt columns time-slice using set_nbs() set_wts()—row order important rearrange observations using set_nbs() set_wts(). dataset now neighbors weights time-slice. can use new columns manually calculate local Gi* location. can grouping time_period using local_gstar_perm(). , unnest new data frame column gi_star. Gi* measures can evaluate location trend using Mann-Kendall test.","code":"bos_nb <- bos |>    activate(\"geometry\") |>    mutate(     nb = include_self(st_contiguity(geometry)),     wt = st_weights(nb)   ) |>    set_nbs(\"nb\") |>    set_wts(\"wt\")  head(bos_nb) #> spacetime ──── #> Context:`data` #> 168 locations `.region_id` #> 10 time periods `time_period` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 6 × 7 #>   .region_id  ecometric  year value time_period nb        wt        #>   <chr>       <chr>     <int> <dbl> <date>      <list>    <list>    #> 1 25025010405 Guns       2010  0.35 2010-01-01  <int [9]> <dbl [9]> #> 2 25025010404 Guns       2010  0    2010-01-01  <int [4]> <dbl [4]> #> 3 25025010801 Guns       2010  0    2010-01-01  <int [5]> <dbl [5]> #> 4 25025010702 Guns       2010  0.46 2010-01-01  <int [6]> <dbl [6]> #> 5 25025010204 Guns       2010  0    2010-01-01  <int [4]> <dbl [4]> #> 6 25025010802 Guns       2010  0    2010-01-01  <int [5]> <dbl [5]> gi_stars <- bos_nb |>    group_by(time_period) |>    mutate(gi_star = local_gstar_perm(value, nb, wt)) |>    tidyr::unnest(gi_star)   gi_stars |>    select(.region_id, time_period, gi_star, p_folded_sim) #> # A tibble: 1,680 × 4 #> # Groups:   time_period [10] #>    .region_id  time_period gi_star p_folded_sim #>    <chr>       <date>        <dbl>        <dbl> #>  1 25025010405 2010-01-01   -0.902        0.186 #>  2 25025010404 2010-01-01   -1.39         0.042 #>  3 25025010801 2010-01-01   -1.47         0.032 #>  4 25025010702 2010-01-01   -0.852        0.216 #>  5 25025010204 2010-01-01   -1.37         0.056 #>  6 25025010802 2010-01-01   -1.47         0.026 #>  7 25025010104 2010-01-01   -1.74         0.008 #>  8 25025000703 2010-01-01   -1.41         0.03  #>  9 25025000504 2010-01-01   -1.41         0.046 #> 10 25025000704 2010-01-01   -1.62         0.014 #> # … with 1,670 more rows"},{"path":"/articles/understanding-emerging-hotspots.html","id":"mann-kendall-test-1","dir":"Articles","previous_headings":"A hands on example","what":"Mann-Kendall Test","title":"Emerging Hot Spot Analysis","text":"Let’s first take single location, 25025010403, evaluate Mann-Kendall statistic hand. can extend location. Note bit finagling MK test make work nicely dplyr::summarise() call. can also visualized trend.  result, sl p-value. result tells us slight upward insignificant trend. can replicate location using group_by(). can see locations becoming significantly colder others becoming significantly warmer.","code":"cbg <- gi_stars |>    ungroup() |>    filter(.region_id == \"25025010403\") |>    select(.region_id, time_period, year, gi_star) # visualize trend ggplot(cbg, aes(time_period, gi_star)) +   geom_line() +   theme_light() cbg |>    summarise(mk = list(unclass(Kendall::MannKendall(gi_star)))) |>    tidyr::unnest_wider(mk) #> # A tibble: 1 × 5 #>     tau    sl     S     D  varS #>   <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 0.333 0.210    15    45   125 ehsa_manual <- gi_stars |>    group_by(.region_id) |>    summarise(mk = list(unclass(Kendall::MannKendall(gi_star)))) |>    tidyr::unnest_wider(mk)  # arrange to show significant emerging hot/cold spots emerging <- ehsa_manual |>    arrange(sl, abs(tau)) |>    slice(1:5)  # show top 5 locations emerging #> # A tibble: 5 × 6 #>   .region_id     tau       sl     S     D  varS #>   <chr>        <dbl>    <dbl> <dbl> <dbl> <dbl> #> 1 25025120201 -0.956 0.000172   -43    45   125 #> 2 25025100601 -0.822 0.00128    -37    45   125 #> 3 25025090700  0.822 0.00128     37    45   125 #> 4 25025060600  0.733 0.00421     33    45   125 #> 5 25025081100  0.733 0.00421     33    45   125"},{"path":"/articles/understanding-emerging-hotspots.html","id":"using-emerging_hotspot_analysis","dir":"Articles","previous_headings":"","what":"Using emerging_hotspot_analysis()","title":"Emerging Hot Spot Analysis","text":"can calculations manually , limited two ways. Primarily example used spatial neighbors . Whereas EHSA can—likely —incorporate time-lag spatial neighbors. Secondly, classifications proposed ESRI help us understand location changing time. handled emerging_hotspot_analysis() function. emerging_hotspot_analysis() takes spacetime object x, quoted name variable interested .var minimum. can specify number time lags using argument k set 1 default.","code":"# conduct EHSA ehsa <- emerging_hotspot_analysis(   x = bos,    .var = \"value\",    k = 1,    nsim = 99 )  # preview some values  head(ehsa) #> # A tibble: 6 × 4 #>   location       tau p_value classification    #>   <chr>        <dbl>   <dbl> <chr>             #> 1 25025010405  0.111  0.721  sporadic coldspot #> 2 25025010404 -0.333  0.210  sporadic coldspot #> 3 25025010801 -0.200  0.474  sporadic coldspot #> 4 25025010702 -0.600  0.0200 sporadic coldspot #> 5 25025010204 -0.467  0.0736 sporadic coldspot #> 6 25025010802 -0.333  0.210  sporadic coldspot  # evaluate the classifications of our hotspots count(ehsa, classification) #> # A tibble: 6 × 2 #>   classification          n #>   <chr>               <int> #> 1 consecutive hotspot    17 #> 2 no pattern detected    17 #> 3 persistent coldspot    10 #> 4 persistent hotspot      7 #> 5 sporadic coldspot      90 #> 6 sporadic hotspot       27"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josiah Parry. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parry J (2022). sfdep: Spatial Dependence Simple Features. https://sfdep.josiahparry.com, https://github.com/josiahparry/sfdep.","code":"@Manual{,   title = {sfdep: Spatial Dependence for Simple Features},   author = {Josiah Parry},   year = {2022},   note = {https://sfdep.josiahparry.com, https://github.com/josiahparry/sfdep}, }"},{"path":"/index.html","id":"sfdep","dir":"","previous_headings":"","what":"Spatial Dependence for Simple Features","title":"Spatial Dependence for Simple Features","text":"sfdep builds great shoulders spdep package spatial dependence. sfdep creates sf tidyverse friendly interface package well introduces new functionality present spdep. sfdep utilizes list columns extensively make interface possible.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatial Dependence for Simple Features","text":"Install released version CRAN can install development version sfdep like :","code":"install.packages(\"sfdep\") remotes::install_github(\"josiahparry/sfdep\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Spatial Dependence for Simple Features","text":"three main categories functionality relating geometry neighbors, weights, local indicators spatial association (LISAs).","code":""},{"path":"/index.html","id":"neighbors","dir":"","previous_headings":"Usage","what":"Neighbors","title":"Spatial Dependence for Simple Features","text":"fundamental usage find contiguous neighbors polygon. done st_contiguity() , default creates queen weights. rook weights desired, set queen = FALSE. Additional arguments can passed underlying spdep::poly2nb() via .... st_contiguity() creates object class nb used spdep. can identify higher order neighbors st_nb_lag() cumulative higher order neighbors st_nb_lag_cumul(). point geometry neighbor functions st_knn(), st_dist_band(), st_nb_dists().","code":"library(sf) library(sfdep) library(dplyr)  # grab geometry geo <- st_geometry(guerry)  nb <- st_contiguity(geo)  nb #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 420  #> Percentage nonzero weights: 5.813149  #> Average number of links: 4.941176 st_nb_lag(nb, 2) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 756  #> Percentage nonzero weights: 10.46367  #> Average number of links: 8.894118 st_nb_lag_cumul(nb, 2) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 1176  #> Percentage nonzero weights: 16.27682  #> Average number of links: 13.83529"},{"path":"/index.html","id":"weights","dir":"","previous_headings":"Usage","what":"Weights","title":"Spatial Dependence for Simple Features","text":"Polygon weights created st_weights() (calls spdep::nb2listw). default row standardized weights. point based weights can created st_nb_dists(), st_kernel_weights() st_inverse_weights().","code":"wt <- st_weights(nb)  wt[1:2] #> [[1]] #> [1] 0.25 0.25 0.25 0.25 #>  #> [[2]] #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667"},{"path":"/index.html","id":"local-indicators-of-spatial-association-lisas","dir":"","previous_headings":"Usage","what":"Local Indicators of Spatial Association (LISAs)","title":"Spatial Dependence for Simple Features","text":"LISAs created combination neighbors weights intended used inside dplyr pipeline. worked example calculating spatial lag local moran. calculate spatial lag st_lag(). Given ’ve modified sf object, can visualize ggplot2.  users interested local indicators spatial association (LISA). Utilize local_moran() . local_moran() create data frame column contains number informative variables. example cluster polygon falls based mean, median, pysal calculations. need unnested certain variables hoisted. Create Local Moran data frame column. Visualize converting insignificant values NA. uses cutoff 0.1.","code":"g <- guerry %>%    mutate(nb = st_contiguity(geometry),          wt = st_weights(nb)) library(ggplot2)  # create spatial lag g %>%    mutate(crime_pers_lag = st_lag(crime_pers, nb, wt)) %>%    ggplot(aes(fill = crime_pers_lag)) +    geom_sf(lwd = 0.2, color = \"black\") +   theme_void() lisa <- g %>%    mutate(moran = local_moran(crime_pers, nb, wt))  pull(lisa, moran) %>%    glimpse() #> Rows: 85 #> Columns: 12 #> $ ii           <dbl> 0.52226452, 0.82801651, 0.80353997, 0.74188966, 0.2311871… #> $ eii          <dbl> -0.014330686, 0.001506889, -0.013014133, -0.007589640, -0… #> $ var_ii       <dbl> 0.3555472615, 0.1247372695, 0.1429897413, 0.2234638812, 0… #> $ z_ii         <dbl> 0.8999080, 2.3401829, 2.1593972, 1.5854625, 1.2098097, 1.… #> $ p_ii         <dbl> 0.368169205, 0.019274300, 0.030819368, 0.112861293, 0.226… #> $ p_ii_sim     <dbl> 0.348, 0.016, 0.044, 0.136, 0.252, 0.124, 0.676, 0.084, 0… #> $ p_folded_sim <dbl> 0.174, 0.008, 0.022, 0.068, 0.126, 0.062, 0.338, 0.042, 0… #> $ skewness     <dbl> -0.03600129, 0.20002748, 0.01765845, 0.03843925, -0.01818… #> $ kurtosis     <dbl> -0.15213659, -0.11918435, -0.48935879, -0.32456522, 0.095… #> $ mean         <fct> High-High, High-High, High-High, Low-Low, Low-Low, Low-Lo… #> $ median       <fct> High-High, High-High, High-High, Low-Low, Low-Low, Low-Lo… #> $ pysal        <fct> High-High, High-High, High-High, Low-Low, Low-Low, Low-Lo… lisa %>%    tidyr::unnest(moran) %>%    mutate(pysal = ifelse(p_folded_sim <= 0.1, as.character(pysal), NA)) |>    ggplot(aes(fill = pysal)) +   geom_sf() +   geom_sf(lwd = 0.2, color = \"black\") +   theme_void() +   scale_fill_manual(values = c(\"#1C4769\", \"#24975E\", \"#EACA97\", \"#B20016\"))"},{"path":"/reference/activate.html","id":null,"dir":"Reference","previous_headings":"","what":"Activate spacetime context — active","title":"Activate spacetime context — active","text":"spacetime object, activate either data frame sf object— data geometry contexts. active object become available manipulation.","code":""},{"path":"/reference/activate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Activate spacetime context — active","text":"","code":"active(x)  activate(x, what = NULL)"},{"path":"/reference/activate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activate spacetime context — active","text":"x spacetime object default NULL. Determines context activate. Valid argument values \"geometry\" \"data\". left null, returns x.","code":""},{"path":"/reference/activate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Activate spacetime context — active","text":" spacetime object contains data frame sf object. data frame represents geographies one time periods sf object contains geographic information locations.","code":""},{"path":"/reference/as_spacetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast between spacetime and sf classes — as_sf","title":"Cast between spacetime and sf classes — as_sf","text":"Cast spacetime sf classes Convert sf object spacetime","code":""},{"path":"/reference/as_spacetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast between spacetime and sf classes — as_sf","text":"","code":"as_sf(x, ...)  as_spacetime(x, .loc_col, .time_col, ...)  # S3 method for sf as_spacetime(x, .loc_col, .time_col, ...)"},{"path":"/reference/as_spacetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast between spacetime and sf classes — as_sf","text":"x st_as_sf() spacetime object. as_spacetime() sf object. ... unused .loc_col quoted name column containing unique location identifiers. .time_col quoted name column containing time periods.","code":""},{"path":"/reference/center_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Center Mean Point — center_mean","title":"Calculate Center Mean Point — center_mean","text":"Given sfc object, calculates mean center weighted mean center points.","code":""},{"path":"/reference/center_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Center Mean Point — center_mean","text":"","code":"center_mean(geometry, weights = NULL)"},{"path":"/reference/center_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Center Mean Point — center_mean","text":"geometry sfc object. polygon, uses sf::st_point_on_surface(). weights optional vector weights apply coordinates calculation.","code":""},{"path":[]},{"path":"/reference/center_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Median Center — center_median","title":"Calculate Median Center — center_median","text":"Calculate Median Center","code":""},{"path":"/reference/center_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Median Center — center_median","text":"","code":"center_median(geometry)"},{"path":"/reference/center_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Median Center — center_median","text":"geometry sfc object. polygon, uses sf::st_point_on_surface().","code":""},{"path":[]},{"path":"/reference/check_pkg_suggests.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector of packages are available — check_pkg_suggests","title":"Check if a vector of packages are available — check_pkg_suggests","text":"Check vector packages available","code":""},{"path":"/reference/check_pkg_suggests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector of packages are available — check_pkg_suggests","text":"","code":"check_pkg_suggests(x)"},{"path":"/reference/check_pkg_suggests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector of packages are available — check_pkg_suggests","text":"x character vector package names","code":""},{"path":"/reference/check_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks geometry for polygons. — check_polygon","title":"Checks geometry for polygons. — check_polygon","text":"provided geometry polygon, point generated using sf::st_point_on_surface(). centroid preferred, new column can created contains output sf::st_centroid().","code":""},{"path":"/reference/check_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks geometry for polygons. — check_polygon","text":"","code":"check_polygon(x)"},{"path":"/reference/check_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks geometry for polygons. — check_polygon","text":"x sfc object","code":""},{"path":"/reference/class_modify.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify object classes — class_modify","title":"Modify object classes — class_modify","text":"Appends classes exist object classes. utilized aid adding list class objects created spdep. enables use returned objects within data frames tibbles.","code":""},{"path":"/reference/class_modify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify object classes — class_modify","text":"","code":"class_modify(x, class = \"list\")"},{"path":"/reference/class_modify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify object classes — class_modify","text":"x object modify class character vector classes append object","code":""},{"path":"/reference/classify_hotspot.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Hot Spot results — classify_hotspot","title":"Classify Hot Spot results — classify_hotspot","text":"Given Gi* time-series Mann Kendall scores classify hotspot values","code":""},{"path":"/reference/classify_hotspot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Hot Spot results — classify_hotspot","text":"","code":"classify_hotspot(.x, threshold)"},{"path":"/reference/complete_spacetime_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert spacetime object to spacetime cube — complete_spacetime_cube","title":"Convert spacetime object to spacetime cube — complete_spacetime_cube","text":"Given spacetime object, convert spacetime cube. spacetime cube ensures regular time-series geometry present.","code":""},{"path":"/reference/complete_spacetime_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert spacetime object to spacetime cube — complete_spacetime_cube","text":"","code":"complete_spacetime_cube(x, ...)"},{"path":"/reference/complete_spacetime_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert spacetime object to spacetime cube — complete_spacetime_cube","text":"x spacetime object. ... unused","code":""},{"path":"/reference/complete_spacetime_cube.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert spacetime object to spacetime cube — complete_spacetime_cube","text":"observations missing time period location combination, columns populated NAs. See is_spacetime_cube() details spacetime cubes.","code":""},{"path":"/reference/cond_permute.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Permutation — cond_permute","title":"Conditional Permutation — cond_permute","text":"Conditional Permutation","code":""},{"path":"/reference/cond_permute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Permutation — cond_permute","text":"","code":"cond_permute(lens, n, cards)"},{"path":"/reference/cond_permute_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional permutation of neighbors — cond_permute_nb","title":"Conditional permutation of neighbors — cond_permute_nb","text":"Creates conditional permutation neighbors list holding fixed shuffling neighbors.","code":""},{"path":"/reference/cond_permute_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional permutation of neighbors — cond_permute_nb","text":"","code":"cond_permute_nb(nb, seed = NULL)"},{"path":"/reference/cond_permute_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional permutation of neighbors — cond_permute_nb","text":"nb neighbor list. seed default null. value pass set.seed() reproducibility.","code":""},{"path":"/reference/cond_permute_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional permutation of neighbors — cond_permute_nb","text":"list class nb element contains random sample neighbors excluding observed regioin.","code":""},{"path":"/reference/cond_permute_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional permutation of neighbors — cond_permute_nb","text":"","code":"nb <- st_contiguity(guerry) nb[1:5] #> [[1]] #> [1] 36 37 67 69 #>  #> [[2]] #> [1]  7 49 57 58 73 76 #>  #> [[3]] #> [1] 17 21 40 56 61 69 #>  #> [[4]] #> [1]  5 24 79 80 #>  #> [[5]] #> [1]  4 24 36 #>  # conditionally permute neighbors perm_nb <- cond_permute_nb(nb) perm_nb[1:5] #> [[1]] #> [1] 13 76 33 61 #>  #> [[2]] #> [1] 67 64 69 10 52 77 #>  #> [[3]] #> [1] 46 37 77 52 61 41 #>  #> [[4]] #> [1] 55 24 54 49 #>  #> [[5]] #> [1] 16 22 43 #>"},{"path":"/reference/critical_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify critical threshold — critical_threshold","title":"Identify critical threshold — critical_threshold","text":"Identifies minimum distance observation least one neighbor.","code":""},{"path":"/reference/critical_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify critical threshold — critical_threshold","text":"","code":"critical_threshold(geometry, k = 1)"},{"path":"/reference/critical_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify critical threshold — critical_threshold","text":"geometry sf geometry column k minimum number neighbors check ","code":""},{"path":"/reference/critical_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify critical threshold — critical_threshold","text":"numeric scalar value.","code":""},{"path":"/reference/critical_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify critical threshold — critical_threshold","text":"","code":"critical_threshold(sf::st_geometry(guerry)) #> [1] 94141.96"},{"path":"/reference/ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Ellipse — ellipse","title":"Create an Ellipse — ellipse","text":"Generate ellipse center coordinates, major minor axis radii, angle rotation.","code":""},{"path":"/reference/ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Ellipse — ellipse","text":"","code":"ellipse(x = 0, y = 0, sx = 2, sy = 1, rotation = 0, n = 100)  st_ellipse(geometry, sx, sy, rotation = 0, n = 100)"},{"path":"/reference/ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Ellipse — ellipse","text":"x longitude center point y latitude center point sx radius major axis sy radius minor axis rotation degree rotation ellipse n number coordinates generate ellipse geometry sf ST_POINT geometry. Can sfg, sfc, sf object","code":""},{"path":"/reference/ellipse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Ellipse — ellipse","text":"ellipse() returns matrix point locations defining ellipse. st_ellipse() returns sf object LINE geography ellipse. Increasing n increases number points generated define ellipse shape. ellipse() function adapted ggVennDiagram.","code":""},{"path":"/reference/ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Ellipse — ellipse","text":"","code":"ellipse(n = 10) #>               x             y #>  [1,]  2.000000  0.000000e+00 #>  [2,]  1.618034  5.877853e-01 #>  [3,]  0.618034  9.510565e-01 #>  [4,] -0.618034  9.510565e-01 #>  [5,] -1.618034  5.877853e-01 #>  [6,] -2.000000  1.224647e-16 #>  [7,] -1.618034 -5.877853e-01 #>  [8,] -0.618034 -9.510565e-01 #>  [9,]  0.618034 -9.510565e-01 #> [10,]  1.618034 -5.877853e-01 #> [11,]  2.000000  0.000000e+00 st_ellipse(sf::st_point(c(0, 0)), sx = 10, sy = 10) #> Geometry set for 1 feature  #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -10 ymin: -10 xmax: 10 ymax: 10 #> CRS:           NA #> LINESTRING (10 0, 9.980267 0.6279052, 9.921147 ..."},{"path":"/reference/emerging_hotspot_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"Emerging Hot Spot Analysis identifies trends spatial clustering period time. Emerging hot spot analysis combines Getis-Ord Gi* statistic Mann-Kendall trend test determine temporal trend associated local clustering hot cold spots.","code":""},{"path":"/reference/emerging_hotspot_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"","code":"emerging_hotspot_analysis(   x,   .var,   k = 1,   include_gi = FALSE,   nb_col = NULL,   wt_col = NULL,   nsim = 199,   threshold = 0.01,   ... )"},{"path":"/reference/emerging_hotspot_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"x spacetime object must spacetime cube see details . .var numeric vector spacetime cube missing values. k default 1. number time lags include neighborhood calculating local Gi*. See details . include_gi default FALSE. TRUE, includes local Gi* calculations attribute gi_star. nb_col Optional. Default NULL. name column geometry context x containing spatial neighbors. NULL, Queen's contiguity neighbors identified. wt_col Optional. Default NULL. name column geometry context x containing spatial weights. NULL, row standardized weights used. nsim default 199. number simulations run calculating simulated p-value local Gi*. threshold default 0.01. significance threshold use. ... unused.","code":""},{"path":"/reference/emerging_hotspot_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"Returns data.fram |> e.","code":""},{"path":[]},{"path":"/reference/emerging_hotspot_analysis.html","id":"how-emerging-hot-spot-analysis-works","dir":"Reference","previous_headings":"","what":"How Emerging Hot Spot Analysis Works","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"Emerging Hot Spot Analysis somewhat simple process. works first calculating Gi* statistic location time period (time-slice). Next, location across time-periods, Mann-Kendall trend test done identify temporal trend Gi* values time periods. Additionally, location classified one seventeen categories based ESRI's emerging hot spot classification criteria. Mann-Kendall trend test done using Kendall::MannKendall(). Kendall installed sfdep installed prior use.","code":""},{"path":"/reference/emerging_hotspot_analysis.html","id":"using-your-own-neighbors-and-weights","dir":"Reference","previous_headings":"","what":"Using your own neighbors and weights","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"like use neighbors weights, must created geometry context spacetime object. arguments nb_col wt_col must populated order use neighbor weights definitions.","code":""},{"path":"/reference/emerging_hotspot_analysis.html","id":"time-lagged-neighbors","dir":"Reference","previous_headings":"","what":"Time lagged neighbors","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"addition identifying neighbors space, emerging hotspot analysis also incorporates observations k periods ago-called time lag. time lag k 1 unit time month, neighbors calculation Gi* include spatial neighbors' values time t spatial neighbors' values time t-1. k = 2, include t, t-1, t-2.","code":""},{"path":"/reference/emerging_hotspot_analysis.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing values","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"Presently, method missing value handling. missing values, emerging hot spot analysis fail. sure fill omit time-slices missing values prior using emerging hot spot analysis.","code":""},{"path":[]},{"path":"/reference/euclidean_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Euclidean Median Center — euclidean_median","title":"Calculate Euclidean Median Center — euclidean_median","text":"Given sfc geometry, calculate Euclidean Median Center.","code":""},{"path":"/reference/euclidean_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Euclidean Median Center — euclidean_median","text":"","code":"euclidean_median(geometry, tolerance = 1e-09)"},{"path":"/reference/euclidean_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Euclidean Median Center — euclidean_median","text":"geometry sfc object. polygon, uses sf::st_point_on_surface(). tolerance tolerance level terminate process. passed pracma::geo_median().","code":""},{"path":"/reference/euclidean_median.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Euclidean Median Center — euclidean_median","text":"Calculation Euclidean median done using pracma package. Rfast available, function error.","code":""},{"path":"/reference/find_xj.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify xj values — find_xj","title":"Identify xj values — find_xj","text":"Find xj values given numeric vector, x, neighbors list, nb.","code":""},{"path":"/reference/find_xj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify xj values — find_xj","text":"","code":"find_xj(x, nb)"},{"path":"/reference/find_xj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify xj values — find_xj","text":"x vector class nb nb object e.g. created st_contiguity() st_knn()","code":""},{"path":"/reference/find_xj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify xj values — find_xj","text":"list length x element numeric vector length corresponding element nb.","code":""},{"path":"/reference/find_xj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify xj values — find_xj","text":"","code":"nb <- st_contiguity(sf::st_geometry(guerry)) xj <- find_xj(guerry$crime_prop, nb) xj[1:3] #> [[1]] #> [1]  8326  8059  4504 10708 #>  #> [[2]] #> [1] 8847 4950 6175 6659 5786 7144 #>  #> [[3]] #> [1] 10503 20235 12665  8236 12141 10708 #>"},{"path":"/reference/folded_p_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Folded Simulated P-value — folded_p_sim","title":"Folded Simulated P-value — folded_p_sim","text":"Given observed statistics replicates, calculated simulated folded p value.","code":""},{"path":"/reference/folded_p_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Folded Simulated P-value — folded_p_sim","text":"","code":"folded_p_sim(obs, reps)"},{"path":"/reference/folded_p_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Folded Simulated P-value — folded_p_sim","text":"obs observed values reps matrix","code":""},{"path":"/reference/global_c.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Geary's C — global_c","title":"Compute Geary's C — global_c","text":"Compute Geary's C","code":""},{"path":"/reference/global_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Geary's C — global_c","text":"","code":"global_c(x, nb, wt, allow_zero = NULL)"},{"path":"/reference/global_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Geary's C — global_c","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). allow_zero TRUE, assigns zero lagged value zone without neighbors.","code":""},{"path":"/reference/global_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Geary's C — global_c","text":"list two names elements C K returning value Geary's C sample kurtosis respectively.","code":""},{"path":[]},{"path":"/reference/global_c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Geary's C — global_c","text":"","code":"nb <- guerry_nb$nb wt <- guerry_nb$wt x <- guerry_nb$crime_pers global_c(x, nb, wt) #> $C #> [1] 0.5645907 #>  #> $K #> [1] 2.400641 #>"},{"path":"/reference/global_c_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Global C Permutation Test — global_c_perm","title":"Global C Permutation Test — global_c_perm","text":"Global C Permutation Test","code":""},{"path":"/reference/global_c_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global C Permutation Test — global_c_perm","text":"","code":"global_c_perm(   x,   nb,   wt,   nsim = 499,   alternative = \"greater\",   allow_zero = NULL,   ... )"},{"path":"/reference/global_c_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global C Permutation Test — global_c_perm","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). nsim number simulations run. alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. allow_zero TRUE, assigns zero lagged value zone without neighbors. ... additional arguments passed spdep::geary.mc().","code":""},{"path":"/reference/global_c_perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global C Permutation Test — global_c_perm","text":"object classes htest mc.sim","code":""},{"path":[]},{"path":"/reference/global_c_perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global C Permutation Test — global_c_perm","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) wt <- st_weights(nb) x <- guerry$crime_pers global_c_perm(x, nb, wt) #>  #> \tMonte-Carlo simulation of Geary C #>  #> data:  x  #> weights: listw  #> number of simulations + 1: 500  #>  #> statistic = 0.56459, observed rank = 1, p-value = 0.002 #> alternative hypothesis: greater #>"},{"path":"/reference/global_c_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Global C Test — global_c_test","title":"Global C Test — global_c_test","text":"Global C Test","code":""},{"path":"/reference/global_c_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global C Test — global_c_test","text":"","code":"global_c_test(x, nb, wt, randomization = TRUE, allow_zero = NULL, ...)"},{"path":"/reference/global_c_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global C Test — global_c_test","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). randomization default TRUE. Calculate variance based randomization. FALSE, assumption normality. allow_zero TRUE, assigns zero lagged value zone without neighbors. ... additional arguments passed spdep::moran.mc()","code":""},{"path":"/reference/global_c_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global C Test — global_c_test","text":"htest object","code":""},{"path":[]},{"path":"/reference/global_c_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global C Test — global_c_test","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) wt <- st_weights(nb) x <- guerry$crime_pers global_c_test(x, nb, wt) #>  #> \tGeary C test under randomisation #>  #> data:  x  #> weights: listw  #>  #> Geary C statistic standard deviate = 6.0556, p-value = 6.994e-10 #> alternative hypothesis: Expectation greater than statistic #> sample estimates: #> Geary C statistic       Expectation          Variance  #>       0.564590693       1.000000000       0.005169871  #>"},{"path":"/reference/global_colocation.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Colocation Quotient — global_colocation","title":"Global Colocation Quotient — global_colocation","text":"Calculate Global Colocation Quotient (CLQ) categorical variable using simulation based significance testing.","code":""},{"path":"/reference/global_colocation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Colocation Quotient — global_colocation","text":"","code":"global_colocation(A, nb, nsim = 99)"},{"path":"/reference/global_colocation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Colocation Quotient — global_colocation","text":"character factor vector. nb neighbors list e.g. created st_knn() st_contiguity() nsim default 99. integer representing many simulations run calculating simulated p-values.","code":""},{"path":"/reference/global_colocation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Colocation Quotient — global_colocation","text":"list two elements CLQ p_sim containing observed colocation quotient simulated p-value respectively.","code":""},{"path":[]},{"path":"/reference/global_colocation.html","id":"definition","dir":"Reference","previous_headings":"","what":"Definition","title":"Global Colocation Quotient — global_colocation","text":"CLQ defined \\(CLQ_{Global} = \\frac{\\sum_{\\X} C_{\\}}{\\sum_{\\X} N_A ({\\frac{N_A - 1}{N-1})}}\\). numerator identifies observed proportion -category neighbors denominator contains expected proportion -category neighbors assumption spatial association. Thus CLQ just ratio observed expected.","code":""},{"path":"/reference/global_colocation.html","id":"inference","dir":"Reference","previous_headings":"","what":"Inference","title":"Global Colocation Quotient — global_colocation","text":"Inference done using conditional permutation suggested Anselin 1995 number replicates created. observed values compared replicates simulated p-value proportion cases observed extreme compared replicate. simulated p-value returns lower p-value either tail.","code":""},{"path":"/reference/global_colocation.html","id":"interpretation","dir":"Reference","previous_headings":"","what":"Interpretation","title":"Global Colocation Quotient — global_colocation","text":"Given CLQ ratio observed expected, interpret values larger one mean colocation expected null hypothesis spatial association. value smaller 0, interpret mean less colocation expected null.","code":""},{"path":"/reference/global_colocation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Global Colocation Quotient — global_colocation","text":"Leslie, T.F. Kronenfeld, B.J. (2011), Colocation Quotient: New Measure Spatial Association Categorical Subsets Points. Geographical Analysis, 43: 306-326. doi: 10.1111/j.1538-4632.2011.00821.x","code":""},{"path":"/reference/global_colocation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Colocation Quotient — global_colocation","text":"","code":"A <- guerry$main_city nb <- st_contiguity(sf::st_geometry(guerry)) global_colocation(A, nb, 49) #> $CLQ #> [1] 1.02841 #>  #> $p_sim #> [1] 0.14 #>"},{"path":"/reference/global_colocation_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Global Colocation Quotient — global_colocation_calc","title":"Calculate the Global Colocation Quotient — global_colocation_calc","text":"Given categorical variable , calculate global colocation quotient (CLQ).","code":""},{"path":"/reference/global_colocation_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Global Colocation Quotient — global_colocation_calc","text":"","code":"global_colocation_calc(A, nb)"},{"path":"/reference/global_colocation_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Colocation Quotient Conditional Permutation Implementation — global_colocation_perm_impl","title":"Global Colocation Quotient Conditional Permutation Implementation — global_colocation_perm_impl","text":"function repeat calculation global colocation quotient (CLQ) specified number times return simulated p-value.","code":""},{"path":"/reference/global_colocation_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Colocation Quotient Conditional Permutation Implementation — global_colocation_perm_impl","text":"","code":"global_colocation_perm_impl(A, nb, nsim = 99)"},{"path":"/reference/global_g_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Getis-Ord Global G — global_g_test","title":"Getis-Ord Global G — global_g_test","text":"Getis-Ord Global G","code":""},{"path":"/reference/global_g_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getis-Ord Global G — global_g_test","text":"","code":"global_g_test(x, nb, wt, alternative = \"greater\", allow_zero = NULL, ...)"},{"path":"/reference/global_g_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getis-Ord Global G — global_g_test","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. allow_zero TRUE, assigns zero lagged value zone without neighbors. ... additional methods passed spdep::globalG.test().","code":""},{"path":"/reference/global_g_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getis-Ord Global G — global_g_test","text":"htest object","code":""},{"path":"/reference/global_g_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getis-Ord Global G — global_g_test","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) wt <- st_weights(nb, style = \"B\") x <- guerry$crime_pers global_g_test(x, nb, wt) #>  #> \tGetis-Ord global G statistic #>  #> data:  x  #> weights: listw  #>  #> standard deviate = 3.8277, p-value = 6.467e-05 #> alternative hypothesis: greater #> sample estimates: #> Global G statistic        Expectation           Variance  #>       6.464853e-02       5.882353e-02       2.315853e-06  #>"},{"path":"/reference/global_jc_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Join Counts — global_jc_perm","title":"Global Join Counts — global_jc_perm","text":"Calculate global join count measure categorical variable.","code":""},{"path":"/reference/global_jc_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Join Counts — global_jc_perm","text":"","code":"global_jc_perm(   fx,   nb,   wt,   alternative = \"greater\",   nsim = 499,   allow_zero = FALSE,   ... )  global_jc_test(fx, nb, wt, alternative = \"greater\", allow_zero = NULL, ...)  tally_jc(fx, nb, wt, allow_zero = TRUE, ...)"},{"path":"/reference/global_jc_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Join Counts — global_jc_perm","text":"fx factor character vector length nb. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. nsim number simulations run. allow_zero TRUE, assigns zero lagged value zone without neighbors. ... additional arguments passed methods","code":""},{"path":"/reference/global_jc_perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Join Counts — global_jc_perm","text":"object class jclist list element class htest mc.sim.","code":""},{"path":"/reference/global_jc_perm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Global Join Counts — global_jc_perm","text":"global_jc_perm() implements monte-carlo based join count using spdep::joincount.mc() global_jc_test() implements traditional BB join count statistic using spdep::joincount.test() tally_jc() calculated join counts variable fx returns data.frame using spdep::joincount.multi()","code":""},{"path":"/reference/global_jc_perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Join Counts — global_jc_perm","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) wt <- st_weights(nb, style = \"B\") fx <- guerry$region global_jc_perm(fx, nb, wt) #>  #> \tMonte-Carlo simulation of join-count statistic #>  #> data:  fx  #> weights: listw  #> number of simulations + 1: 500  #>  #> Join-count statistic for C = 35, rank of observed statistic = 500, #> p-value = 0.002 #> alternative hypothesis: greater #> sample estimates: #>     mean of simulation variance of simulation  #>               8.002004               6.632526  #>  #>  #> \tMonte-Carlo simulation of join-count statistic #>  #> data:  fx  #> weights: listw  #> number of simulations + 1: 500  #>  #> Join-count statistic for E = 29, rank of observed statistic = 500, #> p-value = 0.002 #> alternative hypothesis: greater #> sample estimates: #>     mean of simulation variance of simulation  #>               7.931864               6.188119  #>  #>  #> \tMonte-Carlo simulation of join-count statistic #>  #> data:  fx  #> weights: listw  #> number of simulations + 1: 500  #>  #> Join-count statistic for N = 29, rank of observed statistic = 500, #> p-value = 0.002 #> alternative hypothesis: greater #> sample estimates: #>     mean of simulation variance of simulation  #>               7.843687               6.722505  #>  #>  #> \tMonte-Carlo simulation of join-count statistic #>  #> data:  fx  #> weights: listw  #> number of simulations + 1: 500  #>  #> Join-count statistic for S = 32, rank of observed statistic = 500, #> p-value = 0.002 #> alternative hypothesis: greater #> sample estimates: #>     mean of simulation variance of simulation  #>               7.929860               6.089448  #>  #>  #> \tMonte-Carlo simulation of join-count statistic #>  #> data:  fx  #> weights: listw  #> number of simulations + 1: 500  #>  #> Join-count statistic for W = 31, rank of observed statistic = 500, #> p-value = 0.002 #> alternative hypothesis: greater #> sample estimates: #>     mean of simulation variance of simulation  #>               7.945892               6.260119  #>   global_jc_test(fx, nb, wt) #>  #> \tJoin count test under nonfree sampling #>  #> data:  fx  #> weights: listw  #>  #> Std. deviate for C = 10.886, p-value < 2.2e-16 #> alternative hypothesis: greater #> sample estimates: #> Same colour statistic           Expectation              Variance  #>             35.000000              8.000000              6.151883  #>  #>  #> \tJoin count test under nonfree sampling #>  #> data:  fx  #> weights: listw  #>  #> Std. deviate for E = 8.4667, p-value < 2.2e-16 #> alternative hypothesis: greater #> sample estimates: #> Same colour statistic           Expectation              Variance  #>             29.000000              8.000000              6.151883  #>  #>  #> \tJoin count test under nonfree sampling #>  #> data:  fx  #> weights: listw  #>  #> Std. deviate for N = 8.4667, p-value < 2.2e-16 #> alternative hypothesis: greater #> sample estimates: #> Same colour statistic           Expectation              Variance  #>             29.000000              8.000000              6.151883  #>  #>  #> \tJoin count test under nonfree sampling #>  #> data:  fx  #> weights: listw  #>  #> Std. deviate for S = 9.6763, p-value < 2.2e-16 #> alternative hypothesis: greater #> sample estimates: #> Same colour statistic           Expectation              Variance  #>             32.000000              8.000000              6.151883  #>  #>  #> \tJoin count test under nonfree sampling #>  #> data:  fx  #> weights: listw  #>  #> Std. deviate for W = 9.2731, p-value < 2.2e-16 #> alternative hypothesis: greater #> sample estimates: #> Same colour statistic           Expectation              Variance  #>             31.000000              8.000000              6.151883  #>   tally_jc(fx, nb, wt) #>      joincount expected  variance    z-value joins #> C:C         35        8  6.151883  10.885785   C:C #> E:E         29        8  6.151883   8.466721   E:E #> N:N         29        8  6.151883   8.466721   N:N #> S:S         32        8  6.151883   9.676253   S:S #> W:W         31        8  6.151883   9.273076   W:W #> E:C          8       17 12.887676  -2.507005   E:C #> N:C          7       17 12.887676  -2.785561   N:C #> N:E          8       17 12.887676  -2.507005   N:E #> S:C          7       17 12.887676  -2.785561   S:C #> S:E          5       17 12.887676  -3.342673   S:E #> S:N          0       17 12.887676  -4.735454   S:N #> W:C          9       17 12.887676  -2.228449   W:C #> W:E          0       17 12.887676  -4.735454   W:E #> W:N          3       17 12.887676  -3.899786   W:N #> W:S          7       17 12.887676  -2.785561   W:S #> Jtot        54      170 30.848971 -20.885152  Jtot"},{"path":"/reference/global_moran.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Global Moran's I — global_moran","title":"Calculate Global Moran's I — global_moran","text":"Calculate Global Moran's ","code":""},{"path":"/reference/global_moran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Global Moran's I — global_moran","text":"","code":"global_moran(x, nb, wt, na_ok = FALSE, ...)"},{"path":"/reference/global_moran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Global Moran's I — global_moran","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). na_ok default FALSE. FALSE presence NA Inf results error. ... additional arguments passed spdep::moran().","code":""},{"path":"/reference/global_moran.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Global Moran's I — global_moran","text":"htest object","code":""},{"path":[]},{"path":"/reference/global_moran.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Global Moran's I — global_moran","text":"","code":"nb <- guerry_nb$nb wt <- guerry_nb$wt x <- guerry_nb$crime_pers moran <- global_moran(x, nb, wt)"},{"path":"/reference/global_moran_bv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Global Bivariate Moran's I — global_moran_bv","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"Given two continuous numeric variables, calculate bivariate Moran's .","code":""},{"path":"/reference/global_moran_bv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"","code":"global_moran_bv(x, y, nb, wt, nsim = 99)"},{"path":"/reference/global_moran_bv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"x numeric vector length nb. y numeric vector length nb. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). nsim number simulations run.","code":""},{"path":"/reference/global_moran_bv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"named list two elements Ib p_sim containing bivariate Moran'sI simulated p-value respectively.","code":""},{"path":"/reference/global_moran_bv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"\\( I_B = \\frac{\\Sigma_i(\\Sigma_j{w_{ij}y_j\\times x_i})}{\\Sigma_i{x_i^2}} \\)","code":""},{"path":[]},{"path":"/reference/global_moran_bv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"","code":"x <- guerry_nb$crime_pers y <- guerry_nb$wealth nb <- guerry_nb$nb wt <- guerry_nb$wt global_moran_bv(x, y, nb, wt) #> $Ib #> [1] -0.1006674 #>  #> $p_sim #> [1] 0.05 #>"},{"path":"/reference/global_moran_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Moran Permutation Test — global_moran_perm","title":"Global Moran Permutation Test — global_moran_perm","text":"Global Moran Permutation Test","code":""},{"path":"/reference/global_moran_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Moran Permutation Test — global_moran_perm","text":"","code":"global_moran_perm(x, nb, wt, alternative = \"two.sided\", nsim = 499, ...)"},{"path":"/reference/global_moran_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Moran Permutation Test — global_moran_perm","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. nsim number simulations run. ... additional arguments passed spdep::moran.mc()","code":""},{"path":"/reference/global_moran_perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Moran Permutation Test — global_moran_perm","text":"object classes htest, mc.sim.","code":""},{"path":[]},{"path":"/reference/global_moran_perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Moran Permutation Test — global_moran_perm","text":"","code":"nb <- guerry_nb$nb wt <- guerry_nb$wt x <- guerry_nb$crime_pers moran <- global_moran_perm(x, nb, wt) broom::tidy(moran) #> # A tibble: 1 × 5 #>   statistic p.value parameter method                            alternative #>       <dbl>   <dbl>     <dbl> <chr>                             <chr>       #> 1     0.411       0       500 Monte-Carlo simulation of Moran I two.sided"},{"path":"/reference/global_moran_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Moran Test — global_moran_test","title":"Global Moran Test — global_moran_test","text":"Global Moran Test","code":""},{"path":"/reference/global_moran_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Moran Test — global_moran_test","text":"","code":"global_moran_test(   x,   nb,   wt,   alternative = \"greater\",   randomization = TRUE,   ... )"},{"path":"/reference/global_moran_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Moran Test — global_moran_test","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. randomization default TRUE. Calculate variance based randomization. FALSE, assumption normality. ... additional arguments passed spdep::moran.mc()","code":""},{"path":"/reference/global_moran_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Moran Test — global_moran_test","text":"object class htest","code":""},{"path":[]},{"path":"/reference/global_moran_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Moran Test — global_moran_test","text":"","code":"nb <- guerry_nb$nb wt <- guerry_nb$wt x <- guerry_nb$crime_pers global_moran_test(x, nb, wt) #>  #> \tMoran I test under randomisation #>  #> data:  x   #> weights: listw     #>  #> Moran I statistic standard deviate = 6.0484, p-value = 7.316e-10 #> alternative hypothesis: greater #> sample estimates: #> Moran I statistic       Expectation          Variance  #>       0.411459718      -0.011904762       0.004899501  #>"},{"path":"/reference/guerry.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"dataset widely used demonstrate geospatial methods techniques. useful inclusion R package purposes example. dataset package modified Guerry Michael Friendly.","code":""},{"path":"/reference/guerry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"guerry  guerry_nb"},{"path":"/reference/guerry.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"","text":"object class sf (inherits tbl_df, tbl, data.frame) 85 rows 27 columns. guerry sf object 85 observations 27 variables. guerry_nb 2 additional variables created sfdep.","code":""},{"path":"/reference/guerry.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"","text":"Guerry::gfrance85","code":""},{"path":"/reference/guerry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"","text":"guerry guerry_nb objects sf class objects. polygons boundaries France (excluding Corsica) 1830.","code":""},{"path":"/reference/include_self.html","id":null,"dir":"Reference","previous_headings":"","what":"Includes self in neighbor list — include_self","title":"Includes self in neighbor list — include_self","text":"Includes observed region list neighbors. neighbor lists, important include ith observation (self) neighbors list, particulalry kernel weights.","code":""},{"path":"/reference/include_self.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Includes self in neighbor list — include_self","text":"","code":"include_self(nb)  remove_self(nb)"},{"path":"/reference/include_self.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Includes self in neighbor list — include_self","text":"nb object class nb e.g. made st_contiguity()","code":""},{"path":"/reference/include_self.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Includes self in neighbor list — include_self","text":"object class nb.","code":""},{"path":"/reference/include_self.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Includes self in neighbor list — include_self","text":"","code":"nb <- st_contiguity(guerry) self_included <- include_self(nb) self_included #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 505  #> Percentage nonzero weights: 6.989619  #> Average number of links: 5.941176  remove_self(self_included) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 420  #> Percentage nonzero weights: 5.813149  #> Average number of links: 4.941176"},{"path":"/reference/inverse_dist_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate inverse distance weights — inverse_dist_calc","title":"Calculate inverse distance weights — inverse_dist_calc","text":"Calculate inverse distance weights","code":""},{"path":"/reference/inverse_dist_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate inverse distance weights — inverse_dist_calc","text":"","code":"inverse_dist_calc(.x, scale, alpha)"},{"path":"/reference/is_spacetime_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","title":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","text":"Given object class spacetime, determine spacetime cube. time-series irregular warning emitted (see validate_spacetime() restrictions time column.","code":""},{"path":"/reference/is_spacetime_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","text":"","code":"is_spacetime_cube(x, ...)"},{"path":"/reference/is_spacetime_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","text":"x spacetime object ... unused","code":""},{"path":"/reference/is_spacetime_cube.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","text":"spacetime object spacetime cube contains regular time-series representation geometry. , one observation time period per geography present. number rows spacetime cube number geographies multiplied number time periods. example 10 locations 20 time periods, number rows must 200.","code":""},{"path":"/reference/is_spacetime_cube.html","id":"validation","dir":"Reference","previous_headings":"","what":"Validation","title":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","text":"is_spacetime_cube() runs number checks ensure provided object fact spacetime cube. checks : number rows equal number locations multiplied number time periods time period equal number observations location equal number observations combination time period location one observation time-series regular","code":""},{"path":"/reference/jc_bjc_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate BJC Bivariate Case — jc_bjc_calc","title":"Calculate BJC Bivariate Case — jc_bjc_calc","text":"Assumes colocation","code":""},{"path":"/reference/jc_bjc_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate BJC Bivariate Case — jc_bjc_calc","text":"","code":"jc_bjc_calc(x, xj, z, zj, wt)"},{"path":"/reference/jc_bjc_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate BJC BV for conditional permutations — jc_bjc_perm_impl","title":"Calculate BJC BV for conditional permutations — jc_bjc_perm_impl","text":"Calculate BJC BV conditional permutations","code":""},{"path":"/reference/jc_bjc_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate BJC BV for conditional permutations — jc_bjc_perm_impl","text":"","code":"jc_bjc_perm_impl(x, z, listw, index)"},{"path":"/reference/jc_clc_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate CLC BV for conditional permutations — jc_clc_perm_impl","title":"Calculate CLC BV for conditional permutations — jc_clc_perm_impl","text":"Calculate CLC BV conditional permutations","code":""},{"path":"/reference/jc_clc_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate CLC BV for conditional permutations — jc_clc_perm_impl","text":"","code":"jc_clc_perm_impl(x, z, listw, index)"},{"path":"/reference/jc_clc_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate CLC BV for conditional permutations — jc_clc_perm_impl","text":"x binary variable consisting 1 0, TRUE FALSE. listw listw object index integer vector identifying positions subset. binary variable consisting 1 0, TRUE FALSE.","code":""},{"path":"/reference/jc_uni_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate univariate join count at row level — jc_uni_calc","title":"Calculate univariate join count at row level — jc_uni_calc","text":"Calculates local join count statistic given xi, xj, binary weights.","code":""},{"path":"/reference/jc_uni_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate univariate join count at row level — jc_uni_calc","text":"","code":"jc_uni_calc(x, xj, wt)"},{"path":"/reference/jc_uni_calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate univariate join count at row level — jc_uni_calc","text":"Formula \\(x_i \\times \\Sigma{w_i * x_j}\\)","code":""},{"path":"/reference/jc_uni_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Implementation of the univariate join count on listw objects — jc_uni_impl","title":"Implementation of the univariate join count on listw objects — jc_uni_impl","text":"univariate local join count statistic used identify clusters rarely occurring binary variables.","code":""},{"path":"/reference/jc_uni_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implementation of the univariate join count on listw objects — jc_uni_impl","text":"","code":"jc_uni_impl(x, listw, nsim, alternative)"},{"path":"/reference/jc_uni_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implementation of the univariate join count on listw objects — jc_uni_impl","text":"x binary variable either numeric logical listw listw object attr(, \"mode\") \"binary\" nsim number conditional permutation simulations alternative default \"greater\". One \"less\" \"greater\".","code":""},{"path":"/reference/jc_uni_impl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Implementation of the univariate join count on listw objects — jc_uni_impl","text":"https://geodacenter.github.io/workbook/6d_local_discrete/lab6d.html#univariate-local-join-count-statistic","code":""},{"path":"/reference/jc_uni_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional permutation of univariate local join count — jc_uni_perm_impl","title":"Conditional permutation of univariate local join count — jc_uni_perm_impl","text":"Creates conditional permutations index calculates local univariate join count index.","code":""},{"path":"/reference/jc_uni_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional permutation of univariate local join count — jc_uni_perm_impl","text":"","code":"jc_uni_perm_impl(x, listw, index)"},{"path":"/reference/jc_uni_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional permutation of univariate local join count — jc_uni_perm_impl","text":"x binary variable listw must binary index subset","code":""},{"path":"/reference/jc_uni_perm_impl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditional permutation of univariate local join count — jc_uni_perm_impl","text":"TODO conditional permutation indexing can useful elsewhere subsetting required functions","code":""},{"path":"/reference/kernels.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel functions — kernels","title":"Kernel functions — kernels","text":"Kernel functions creating kernel based weights st_kernel_weights()","code":""},{"path":"/reference/kernels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel functions — kernels","text":"","code":"kernels"},{"path":"/reference/kernels.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Kernel functions — kernels","text":"object class list length 5.","code":""},{"path":"/reference/kernels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel functions — kernels","text":"list length 5 element kernel function.","code":""},{"path":"/reference/kernels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kernel functions — kernels","text":"Supported kernels . Formulas come Anselin & Morrison's notes. uniform:  K(z) = 1/2 ∣z∣<1 triangular: K(z) = (1−∣z∣) ∣z∣ < 1 epanechnikov: K(z) = (3/4)(1−z^2) ∣z∣ < 1 quartic: K(z) = (15/16)*(1−(z/threshold)^2^)2 ∣z∣ < 1 guassian: K(z) = (2pi)^1/2 * exp(−z^2/2)","code":""},{"path":"/reference/local_c.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Local Geary statistic — local_c","title":"Compute Local Geary statistic — local_c","text":"Local Geary local adaptation Geary's C statistic spatial autocorrelation. Local Geary uses squared differences measure dissimilarity unlike Local Moran. Low values Local Geary indicate positive spatial autocorrelation large refers negative spatial autocorrelation. Inference Local Geary based permutation approach compares observed value reference distribution spatial randomness. Local Geary creates pseudo p-value. analytical p-value based number permutations used care.","code":""},{"path":"/reference/local_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Local Geary statistic — local_c","text":"","code":"local_c(x, nb, wt, ...)  local_c_perm(x, nb, wt, nsim = 499, alternative = \"two.sided\", ...)"},{"path":"/reference/local_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Local Geary statistic — local_c","text":"x numeric vector, list numeric vectors equal length. nb neighbor list wt weights list ... arguments passed spdep::localC_perm(), e.g. zero.policy = TRUE allow zones without neighbors. nsim number simulations used generate reference distribution. alternative character defining alternative hypothesis. Must one \"two.sided\", \"less\" \"greater\".","code":""},{"path":"/reference/local_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Local Geary statistic — local_c","text":"data.frame columns ci: Local Geary statistic e_ci: expected value Local Geary based permutations z_ci: standard deviation based permutations var_ci: variance based permutations p_ci: p-value based permutation sample standard deviation means p_ci_sim: p-value based rank observed statistic p_folded_sim: p-value based implementation Pysal always assumes two-sided test taking minimum possible p-value skewness: sample skewness kurtosis: sample kurtosis","code":""},{"path":[]},{"path":"/reference/local_c.html","id":"overview","dir":"Reference","previous_headings":"","what":"Overview","title":"Compute Local Geary statistic — local_c","text":"Local Geary can extended multivariate context. x numeric vector, univariate Local Geary calculated. calculate multivariate Local Moran provide either list matrix. x list, element must numeric vector length length neighbours listw. case x matrix number rows must length neighbours listw. required univariate context, standardized Local Geary calculated. multivariate Local Geary always standardized. univariate Local Geary calculated \\(c_i = \\sum_j w_{ij}(x_i - x_j)^2\\) multivariate Local Geary calculated \\(c_{k,} = \\sum_{v=1}^{k} c_{v,}\\) described Anselin (2019).","code":""},{"path":"/reference/local_c.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Compute Local Geary statistic — local_c","text":"functions based implementations local Geary statistic development version spdep. based spdep::localC spdep::localC_perm. spdep::localC_perm thus local_c_perm utilize conditional permutation approach approximate reference distribution observation held fixed, randomly samples neighbors, calculated local C statistic tuple (ci). repeated nsim times. simulations 3 different types p-values calculated—potential flaws. extra judicious using p-values make conclusions. p_ci: utilizes sample mean standard deviation. p-value calculated using pnorm()--assuming normal distribution always true. p_ci_sim: uses rank observed statistic. p_folded_sim: follows pysal implementation p-values range [0, 0.5]. excludes 1/2 p-values used caution.","code":""},{"path":"/reference/local_c.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Local Geary statistic — local_c","text":"Anselin, L. (1995), Local Indicators Spatial Association—LISA. Geographical Analysis, 27: 93-115. doi: 10.1111/j.1538-4632.1995.tb00338.x Anselin, L. (2019), Local Indicator Multivariate Spatial Association: Extending Geary's c. Geogr Anal, 51: 133-150. doi: 10.1111/gean.12164","code":""},{"path":"/reference/local_c.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Local Geary statistic — local_c","text":"Josiah Parry, josiah.parry@gmail.com","code":""},{"path":"/reference/local_c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Local Geary statistic — local_c","text":"","code":"g <- dplyr::transmute(guerry,                       nb = st_contiguity(geometry),                       wt = st_weights(nb),                       geary = local_c_perm(                         x = list(crime_pers, literacy), nb, wt) )  tidyr::unnest(g, geary) #> Simple feature collection with 85 features and 12 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 13 #>    nb      wt        ci cluster  e_ci var_ci   z_ci   p_ci p_ci_sim p_folded_sim #>    <nb>    <list> <dbl> <fct>   <dbl>  <dbl>  <dbl>  <dbl>    <dbl>        <dbl> #>  1 <int [… <dbl … 1.09  Positi…  1.73  0.428 -0.973 0.330     0.336        0.168 #>  2 <int [… <dbl … 0.557 Positi…  1.62  0.224 -2.25  0.0244    0.016        0.008 #>  3 <int [… <dbl … 0.571 Positi…  2.53  0.688 -2.36  0.0181    0.004        0.002 #>  4 <int [… <dbl … 0.525 Positi…  1.57  0.412 -1.63  0.104     0.076        0.038 #>  5 <int [… <dbl … 1.69  Positi…  2.61  1.10  -0.874 0.382     0.444        0.222 #>  6 <int [… <dbl … 0.803 Positi…  2.27  0.541 -2.00  0.0458    0.028        0.014 #>  7 <int [… <dbl … 1.99  Positi…  4.46  2.18  -1.68  0.0937    0.084        0.042 #>  8 <int [… <dbl … 1.09  Positi…  3.52  1.94  -1.74  0.0818    0.032        0.016 #>  9 <int [… <dbl … 0.547 Positi…  1.67  0.294 -2.06  0.0389    0.012        0.006 #> 10 <int [… <dbl … 0.557 Positi…  1.20  0.265 -1.25  0.210     0.152        0.076 #> # … with 75 more rows, and 3 more variables: skewness <dbl>, kurtosis <dbl>, #> #   geometry <MULTIPOLYGON>"},{"path":"/reference/local_colocation.html","id":null,"dir":"Reference","previous_headings":"","what":"Local indicator of Colocation Quotient — local_colocation","title":"Local indicator of Colocation Quotient — local_colocation","text":"local indicator colocation quotient (LCLQ) Local Indicator Spatial Association (LISA) evaluates given observation's subcategory colocated subcategories B. Like CLQ, LCLQ provides insight asymmetric relationships subcategories B (B can also equal ) local level. LCLQ defined using Gaussian kernel weights adaptive bandwidth (see st_kernel_weights()). However, type weights list can used. Kernel weights used introduce decay calculation CLQ. ensures points nearer focal point influence distant.","code":""},{"path":"/reference/local_colocation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local indicator of Colocation Quotient — local_colocation","text":"","code":"local_colocation(A, B, nb, wt, nsim)"},{"path":"/reference/local_colocation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local indicator of Colocation Quotient — local_colocation","text":"character factor vector. B character factor vector. nb neighbors list e.g. created st_knn() st_contiguity() wt weights list. Recommended Gaussian kernel weights list using adaptive bandwidth e.g. created st_kernel_weights(nb, geometry, \"gaussian\", addaptive = TRUE) include self. nsim default 99. integer representing many simulations run calculating simulated p-values.","code":""},{"path":"/reference/local_colocation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local indicator of Colocation Quotient — local_colocation","text":"data frame many rows observations two times many columns unique values B. Columns contain unique value B well simulated p-value value B.","code":""},{"path":"/reference/local_colocation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local indicator of Colocation Quotient — local_colocation","text":"LCLQ defined \\(LCLQ_{A_i \\B} = \\frac{N_{A_i \\B}}{N_B / (N - 1)}\\) \\(N_{A_i \\B} = \\sum_{j = 1(j \\ne )}^{N}(\\frac{w_{ij}f_{ij}}{\\sum_{j = 1(j \\ne )}^{N}w_{ij}})\\). weights matrix, wij, uses adaptive bandwidth Gaussian kernel weights. LCLQ calculated subcategories present neighbor list. subcategory present, resultant LCLQ simulated p-value NA.","code":""},{"path":"/reference/local_colocation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Local indicator of Colocation Quotient — local_colocation","text":"Fahui Wang, Yujie Hu, Shuai Wang & Xiaojuan Li (2017) Local Indicator Colocation Quotient Statistical Significance Test: Examining Spatial Association Crime Facilities, Professional Geographer, 69:1, 22-31, doi: 10.1080/00330124.2016.1157498","code":""},{"path":"/reference/local_colocation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local indicator of Colocation Quotient — local_colocation","text":"","code":"A <- guerry$main_city B <- guerry$region geo <- sf::st_geometry(guerry) nb <- st_knn(geo, 5) #> ! Polygon provided. Using point on surface. wt <- st_kernel_weights(nb, geo, \"gaussian\", adaptive = TRUE) #> ℹ It is recommended to include the ith observation. Consider `nb = include_self(nb)`. #> ! Polygon provided. Using point on surface. res <- local_colocation(A, B, nb, wt, 49) tail(res) #>           C        E         N        S        W p_sim_C p_sim_E p_sim_N #> 80       NA 1.938342        NA 3.002835       NA      NA    0.14      NA #> 81       NA       NA        NA       NA 4.941176      NA      NA      NA #> 82 2.986279       NA        NA       NA 1.954897    0.04      NA      NA #> 83 2.175460       NA        NA       NA 2.765717    0.08      NA      NA #> 84       NA 4.065541 0.8756359       NA       NA      NA    0.02    0.04 #> 85 1.925264 2.094012 0.9219004       NA       NA    0.14    0.20    0.32 #>    p_sim_S p_sim_W #> 80     0.1      NA #> 81      NA    0.02 #> 82      NA    0.16 #> 83      NA    0.10 #> 84      NA      NA #> 85      NA      NA"},{"path":"/reference/local_colocation_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the local colocation quotient — local_colocation_calc","title":"Calculate the local colocation quotient — local_colocation_calc","text":"Calculate local colocation quotient","code":""},{"path":"/reference/local_colocation_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the local colocation quotient — local_colocation_calc","text":"","code":"local_colocation_calc(A, B, listw)"},{"path":"/reference/local_colocation_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the local colocation quotient — local_colocation_calc","text":"matrix","code":""},{"path":"/reference/local_colocation_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"spdep implementation of local colocation quotient — local_colocation_impl","title":"spdep implementation of local colocation quotient — local_colocation_impl","text":"Internal implementation local CLQ comaptible spdep.","code":""},{"path":"/reference/local_colocation_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"spdep implementation of local colocation quotient — local_colocation_impl","text":"","code":"local_colocation_impl(A, B, listw, nsim = 99)"},{"path":"/reference/local_colocation_impl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"spdep implementation of local colocation quotient — local_colocation_impl","text":"data frame number rows length number columns unique values B.","code":""},{"path":"/reference/local_g.html","id":null,"dir":"Reference","previous_headings":"","what":"Local G — local_g","title":"Local G — local_g","text":"Calculate local Geary statistic given variable.","code":""},{"path":"/reference/local_g.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local G — local_g","text":"","code":"local_g(x, nb, wt, alternative = \"two.sided\", ...)  local_g_perm(x, nb, wt, nsim = 499, alternative = \"two.sided\", ...)"},{"path":"/reference/local_g.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local G — local_g","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. ... methods passed spdep::localG() spdep::localG_perm() nsim number simulations run.","code":""},{"path":"/reference/local_g.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local G — local_g","text":"data.frame columns: gi: observed statistic e_gi: permutation sample mean var_gi: permutation sample variance p_value: p-value using sample mean standard deviation p_folded_sim: p-value based implementation Pysal always assumes two-sided test taking minimum possible p-value skewness: sample skewness kurtosis: sample kurtosis","code":""},{"path":"/reference/local_g.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local G — local_g","text":"","code":"x <- guerry$crime_pers nb <- st_contiguity(guerry) wt <- st_weights(nb)  res <- local_g_perm(x, nb, wt)  head(res) #>           gi       e_gi       var_gi    p_value p_sim p_folded_sim     skewness #> 1  0.8117988 0.01205975 4.696438e-06 0.41690710 0.428        0.214  0.242099977 #> 2  2.2893387 0.01182611 3.509998e-06 0.02205968 0.040        0.020  0.008812811 #> 3  2.0387415 0.01196167 3.338124e-06 0.04147583 0.048        0.024  0.228989120 #> 4 -1.5424496 0.01194728 4.842238e-06 0.12296439 0.120        0.060 -0.022059247 #> 5 -1.1439902 0.01192660 6.743330e-06 0.25262769 0.272        0.136  0.117905202 #> 6 -1.5915155 0.01198512 2.774074e-06 0.11149361 0.092        0.046 -0.027547182 #>     kurtosis #> 1 -0.1153351 #> 2  0.2815497 #> 3 -0.1103035 #> 4 -0.4095371 #> 5 -0.3324780 #> 6 -0.4407368"},{"path":"/reference/local_g_spt.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Local Gi* for a spacetime cube — local_g_spt","title":"Calculate the Local Gi* for a spacetime cube — local_g_spt","text":"alternative implementation spdep::localG intended use spacetime cube.","code":""},{"path":"/reference/local_g_spt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Local Gi* for a spacetime cube — local_g_spt","text":"","code":"local_g_spt(x, times, nb, wt, n_locs, nsim)"},{"path":"/reference/local_g_spt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Local Gi* for a spacetime cube — local_g_spt","text":"x numeric vector times vector determining time order nb spacetime neighbors list wt weights list associated nb n_locs number unique locations n_sim number simulations run calculating p_sim","code":""},{"path":"/reference/local_gstar.html","id":null,"dir":"Reference","previous_headings":"","what":"Local G* — local_gstar","title":"Local G* — local_gstar","text":"Calculate local Gi* statistic.","code":""},{"path":"/reference/local_gstar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local G* — local_gstar","text":"","code":"local_gstar(x, nb, wt, alternative = \"two.sided\", ...)  local_gstar_perm(x, nb, wt, nsim = 499, alternative = \"two.sided\", ...)"},{"path":"/reference/local_gstar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local G* — local_gstar","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. ... methods passed spdep::localG() spdep::localG_perm() nsim number simulations run.","code":""},{"path":"/reference/local_gstar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local G* — local_gstar","text":"data.frame columns: gi: observed statistic e_gi: permutation sample mean var_gi: permutation sample variance p_value: p-value using sample mean standard deviation p_folded_sim: p-value based implementation Pysal always assumes two-sided test taking minimum possible p-value skewness: sample skewness kurtosis: sample kurtosis","code":""},{"path":"/reference/local_gstar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local G* — local_gstar","text":"","code":"nb <- st_contiguity(guerry) wt <- st_weights(nb) x <- guerry$crime_pers  res <- local_gstar_perm(x, nb, wt) head(res) #>     gi_star       e_gi       var_gi    p_value p_sim p_folded_sim    skewness #> 1  1.263725 0.01178326 3.872868e-06 0.20632879 0.248        0.124  0.06273944 #> 2  2.256015 0.01188095 3.029550e-06 0.02406967 0.032        0.016  0.13467774 #> 3  2.116350 0.01189197 2.883487e-06 0.03431502 0.036        0.018  0.15302071 #> 4 -1.916334 0.01190257 3.504632e-06 0.05532256 0.080        0.040 -0.01659537 #> 5 -1.224661 0.01190279 4.782879e-06 0.22070303 0.248        0.124  0.05177243 #> 6 -2.179565 0.01199630 2.123821e-06 0.02928971 0.048        0.024 -0.11622932 #>      kurtosis #> 1 -0.16352893 #> 2 -0.08795725 #> 3 -0.07728878 #> 4  0.24557323 #> 5 -0.04091090 #> 6  0.37554768  res <- local_gstar(x, nb, wt) head(res) #> [1]  1.342359  2.595578  2.388872 -1.848187 -1.209736 -2.034142"},{"path":"/reference/local_jc_bv.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate local join count — local_jc_bv","title":"Bivariate local join count — local_jc_bv","text":"Bivariate local join count","code":""},{"path":"/reference/local_jc_bv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate local join count — local_jc_bv","text":"","code":"local_jc_bv(x, z, nb, wt, nsim = 499)"},{"path":"/reference/local_jc_bv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate local join count — local_jc_bv","text":"x binary variable either numeric logical z binary variable either numeric logical nb neighbors list object. wt default st_weights(nb, style = \"B\"). binary weights list created st_weights(nb, style = \"B\"). nsim number conditional permutation simulations","code":""},{"path":"/reference/local_jc_bv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate local join count — local_jc_bv","text":"data.frame two columns join_count p_sim number rows equal length arguments x, z, nb, wt.","code":""},{"path":"/reference/local_jc_bv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bivariate local join count — local_jc_bv","text":"","code":"x <- as.integer(guerry$infants > 23574) z <- as.integer(guerry$donations > 10973) nb <- st_contiguity(guerry) wt <- st_weights(nb, style = \"B\") local_jc_bv(x, z, nb, wt) #>    join_count p_sim #> 1           0    NA #> 2           0    NA #> 3           0    NA #> 4           0    NA #> 5           0    NA #> 6           0    NA #> 7           0    NA #> 8           0    NA #> 9           0    NA #> 10          0    NA #> 11          0    NA #> 12          0    NA #> 13          0    NA #> 14          0    NA #> 15          0    NA #> 16          2 0.012 #> 17          0    NA #> 18          0    NA #> 19          0    NA #> 20          0    NA #> 21          0    NA #> 22          0    NA #> 23          0    NA #> 24          0    NA #> 25          0    NA #> 26          0    NA #> 27          1 0.078 #> 28          0    NA #> 29          0    NA #> 30          0    NA #> 31          0    NA #> 32          0    NA #> 33          0    NA #> 34          0    NA #> 35          0    NA #> 36          0    NA #> 37          0    NA #> 38          0    NA #> 39          0    NA #> 40          0    NA #> 41          0    NA #> 42          0    NA #> 43          0    NA #> 44          0    NA #> 45          0    NA #> 46          0    NA #> 47          0    NA #> 48          0    NA #> 49          0    NA #> 50          0    NA #> 51          0    NA #> 52          0    NA #> 53          0    NA #> 54          1 0.198 #> 55          0    NA #> 56          0    NA #> 57          0    NA #> 58          0    NA #> 59          0    NA #> 60          0    NA #> 61          0    NA #> 62          0    NA #> 63          0    NA #> 64          0    NA #> 65          0    NA #> 66          0    NA #> 67          0    NA #> 68          0    NA #> 69          0    NA #> 70          0    NA #> 71          0    NA #> 72          0    NA #> 73          0    NA #> 74          0    NA #> 75          2 0.026 #> 76          0    NA #> 77          0    NA #> 78          0    NA #> 79          0    NA #> 80          0    NA #> 81          2 0.008 #> 82          0    NA #> 83          0    NA #> 84          0    NA #> 85          0    NA"},{"path":"/reference/local_jc_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute local univariate join count — local_jc_uni","title":"Compute local univariate join count — local_jc_uni","text":"univariate local join count statistic used identify clusters rarely occurring binary variables. binary variable interest occur less half time.","code":""},{"path":"/reference/local_jc_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute local univariate join count — local_jc_uni","text":"","code":"local_jc_uni(   x,   nb,   wt = st_weights(nb, style = \"B\"),   nsim = 499,   alternative = \"two.sided\" )"},{"path":"/reference/local_jc_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute local univariate join count — local_jc_uni","text":"x binary variable either numeric logical nb neighbors list object. wt default st_weights(nb, style = \"B\"). binary weights list created st_weights(nb, style = \"B\"). nsim number conditional permutation simulations alternative default \"greater\". One \"less\" \"greater\".","code":""},{"path":"/reference/local_jc_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute local univariate join count — local_jc_uni","text":"data.frame two columns join_count p_sim number rows equal length arguments x, nb, wt.","code":""},{"path":"/reference/local_jc_uni.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute local univariate join count — local_jc_uni","text":"local join count statistic requires binary weights list can generated st_weights(nb, style = \"B\"). Additionally, ensure binary variable interest rarely occurring half observations. P-values estimated using conditional permutation approach. creates reference distribution observed statistic compared. see Geoda Glossary.","code":""},{"path":"/reference/local_jc_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute local univariate join count — local_jc_uni","text":"","code":"res <- dplyr::transmute(   guerry,   top_crime = crime_prop > 9000,   nb = st_contiguity(geometry),   wt = st_weights(nb, style = \"B\"),   jc = local_jc_uni(top_crime, nb, wt)) tidyr::unnest(res, jc) #> Simple feature collection with 85 features and 5 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 6 #>    top_crime nb        wt        join_count  p_sim                      geometry #>    <lgl>     <nb>      <list>         <dbl>  <dbl>                <MULTIPOLYGON> #>  1 TRUE      <int [4]> <dbl [4]>          1  0.272 (((801150 2092615, 800669 20… #>  2 FALSE     <int [6]> <dbl [6]>          0 NA     (((729326 2521619, 729320 25… #>  3 FALSE     <int [6]> <dbl [6]>          0 NA     (((710830 2137350, 711746 21… #>  4 FALSE     <int [4]> <dbl [4]>          0 NA     (((882701 1920024, 882408 19… #>  5 FALSE     <int [3]> <dbl [3]>          0 NA     (((886504 1922890, 885733 19… #>  6 TRUE      <int [7]> <dbl [7]>          2  0.342 (((747008 1925789, 746630 19… #>  7 FALSE     <int [3]> <dbl [3]>          0 NA     (((818893 2514767, 818614 25… #>  8 TRUE      <int [3]> <dbl [3]>          1  0.378 (((509103 1747787, 508820 17… #>  9 FALSE     <int [5]> <dbl [5]>          0 NA     (((775400 2345600, 775068 23… #> 10 TRUE      <int [5]> <dbl [5]>          2  0.468 (((626230 1810121, 626269 18… #> # … with 75 more rows"},{"path":"/reference/local_moran.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Local Moran's I Statistic — local_moran","title":"Calculate the Local Moran's I Statistic — local_moran","text":"Moran's calculated polygon based neighbor weight lists.","code":""},{"path":"/reference/local_moran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Local Moran's I Statistic — local_moran","text":"","code":"local_moran(x, nb, wt, alternative = \"two.sided\", nsim = 499, ...)"},{"path":"/reference/local_moran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Local Moran's I Statistic — local_moran","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. nsim number simulations run. ... See ?spdep::localmoran_perm() options.","code":""},{"path":"/reference/local_moran.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Local Moran's I Statistic — local_moran","text":"data.frame containing columns ii, eii, var_ii, z_ii, p_ii, p_ii_sim, p_folded_sim. details please see spdep::localmoran_perm().","code":""},{"path":"/reference/local_moran.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Local Moran's I Statistic — local_moran","text":"local_moran() calls spdep::localmoran_perm() calculates Moran polygon. well provide simulated p-values.","code":""},{"path":[]},{"path":"/reference/local_moran.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Local Moran's I Statistic — local_moran","text":"","code":"library(magrittr) lisa <- guerry %>%   dplyr::mutate(nb = st_contiguity(geometry),          wt = st_weights(nb),          moran = local_moran(crime_pers, nb, wt))  # unnest the dataframe column tidyr::unnest(lisa, moran) #> Simple feature collection with 85 features and 40 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 41 #>    code_dept count ave_id_geo  dept region department   crime_pers crime_prop #>    <fct>     <dbl>      <dbl> <int> <fct>  <fct>             <int>      <int> #>  1 01            1         49     1 E      Ain               28870      15890 #>  2 02            1        812     2 N      Aisne             26226       5521 #>  3 03            1       1418     3 C      Allier            26747       7925 #>  4 04            1       1603     4 E      Basses-Alpes      12935       7289 #>  5 05            1       1802     5 E      Hautes-Alpes      17488       8174 #>  6 07            1       2249     7 S      Ardeche            9474      10263 #>  7 08            1      35395     8 N      Ardennes          35203       8847 #>  8 09            1       2526     9 S      Ariege             6173       9597 #>  9 10            1      34410    10 E      Aube              19602       4086 #> 10 11            1       2807    11 S      Aude              15647      10431 #> # … with 75 more rows, and 33 more variables: literacy <int>, donations <int>, #> #   infants <int>, suicides <int>, main_city <ord>, wealth <int>, #> #   commerce <int>, clergy <int>, crime_parents <int>, infanticide <int>, #> #   donation_clergy <int>, lottery <int>, desertion <int>, instruction <int>, #> #   prostitutes <int>, distance <dbl>, area <int>, pop1831 <dbl>, #> #   geometry <MULTIPOLYGON>, nb <nb>, wt <list>, ii <dbl>, eii <dbl>, #> #   var_ii <dbl>, z_ii <dbl>, p_ii <dbl>, p_ii_sim <dbl>, p_folded_sim <dbl>, …"},{"path":"/reference/local_moran_bv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"Given two continuous numeric variables, calculate bivariate Local Moran's .","code":""},{"path":"/reference/local_moran_bv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"","code":"local_moran_bv(x, y, nb, wt, nsim = 499)"},{"path":"/reference/local_moran_bv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"x numeric vector length nb. y numeric vector length nb. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). nsim number simulations run.","code":""},{"path":"/reference/local_moran_bv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"data.frame containing two columns Ib p_sim containing local bivariate Moran's simulated p-values respectively.","code":""},{"path":"/reference/local_moran_bv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"\\( I_i^B= cx_i\\Sigma_j{w_{ij}y_j} \\)","code":""},{"path":[]},{"path":"/reference/local_moran_bv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"","code":"x <- guerry_nb$crime_pers y <- guerry_nb$wealth nb <- guerry_nb$nb wt <- guerry_nb$wt local_moran_bv(x, y, nb, wt) #>              Ib p_sim #> 1   0.093506129 0.434 #> 2  -0.840144689 0.002 #> 3   0.293390275 0.216 #> 4  -0.782969282 0.040 #> 5  -0.343051282 0.036 #> 6  -0.751763780 0.044 #> 7  -1.212286959 0.152 #> 8   0.494768137 0.340 #> 9   0.050875987 0.008 #> 10 -0.033508122 0.434 #> 11  0.119135965 0.468 #> 12 -0.027058053 0.498 #> 13  0.189608296 0.152 #> 14 -0.184931534 0.028 #> 15  0.186274796 0.244 #> 16 -0.042411941 0.302 #> 17  0.006353979 0.470 #> 18 -0.408271216 0.054 #> 19 -0.115344980 0.454 #> 20  0.130059701 0.408 #> 21  1.683274652 0.034 #> 22 -0.003842500 0.484 #> 23 -1.004957821 0.104 #> 24 -1.104136137 0.000 #> 25  0.857180921 0.002 #> 26 -0.169492824 0.014 #> 27  0.834090623 0.208 #> 28 -0.171464343 0.344 #> 29 -0.034233828 0.318 #> 30 -0.051026184 0.256 #> 31 -0.046850788 0.426 #> 32  0.334455413 0.236 #> 33  0.080264717 0.218 #> 34  0.685071940 0.164 #> 35  0.001704856 0.478 #> 36 -0.079714992 0.092 #> 37  0.137434262 0.354 #> 38  0.125025064 0.238 #> 39 -0.068341930 0.176 #> 40  0.504579881 0.098 #> 41 -0.319036396 0.086 #> 42 -0.016497540 0.352 #> 43  0.225196989 0.024 #> 44 -0.224572220 0.382 #> 45 -0.003990683 0.458 #> 46 -1.017640129 0.052 #> 47  0.367618246 0.202 #> 48 -0.550574797 0.236 #> 49  0.441828404 0.028 #> 50 -0.088146734 0.396 #> 51 -0.190742450 0.350 #> 52  0.537482661 0.116 #> 53 -0.039104825 0.414 #> 54  0.305236945 0.106 #> 55 -0.337570608 0.324 #> 56 -0.155974076 0.262 #> 57 -0.526846963 0.146 #> 58 -1.393680416 0.000 #> 59 -0.832978265 0.030 #> 60 -0.326847547 0.124 #> 61 -0.269459435 0.046 #> 62 -0.443421284 0.042 #> 63 -0.158620813 0.404 #> 64 -0.066683215 0.444 #> 65 -0.790102037 0.060 #> 66 -1.406140486 0.160 #> 67 -0.058461082 0.260 #> 68 -0.004884983 0.450 #> 69 -0.125083947 0.390 #> 70 -1.236566942 0.042 #> 71  1.282709560 0.006 #> 72  0.218277696 0.050 #> 73 -0.366089264 0.000 #> 74  1.371117985 0.002 #> 75 -0.075151611 0.218 #> 76 -1.560168225 0.030 #> 77  0.658190968 0.040 #> 78  0.246687028 0.214 #> 79 -0.139720645 0.390 #> 80 -0.206370145 0.270 #> 81 -0.003905568 0.468 #> 82 -0.205045471 0.226 #> 83 -0.534172545 0.000 #> 84 -0.046631364 0.220 #> 85  0.279224938 0.006"},{"path":"/reference/local_moran_bv_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Local Bivariate Moran Statistic — local_moran_bv_calc","title":"Calculate the Local Bivariate Moran Statistic — local_moran_bv_calc","text":"Calculate Local Bivariate Moran Statistic","code":""},{"path":"/reference/local_moran_bv_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Local Bivariate Moran Statistic — local_moran_bv_calc","text":"","code":"local_moran_bv_calc(x, yj, wt)"},{"path":"/reference/local_moran_bv_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Local Bivariate Moran Statistic — local_moran_bv_calc","text":"x numeric vector length nb. yj neighbor values y, length lengths nb. wt weights list created st_weights().","code":""},{"path":"/reference/local_moran_bv_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Bivariate Moran's I spdep implementation — local_moran_bv_impl","title":"Local Bivariate Moran's I spdep implementation — local_moran_bv_impl","text":"Local Bivariate Moran's spdep implementation","code":""},{"path":"/reference/local_moran_bv_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Bivariate Moran's I spdep implementation — local_moran_bv_impl","text":"","code":"local_moran_bv_impl(x, y, listw, nsim)"},{"path":"/reference/local_moran_bv_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Bivariate Moran's I spdep implementation — local_moran_bv_impl","text":"x numeric vector length nb. y numeric vector length nb. listw listw object e.g. created recreate_listw(). nsim number simulations run.","code":""},{"path":"/reference/local_moran_bv_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Bivariate Moran's I conditional permutation implementation — local_moran_bv_perm_impl","title":"Local Bivariate Moran's I conditional permutation implementation — local_moran_bv_perm_impl","text":"Local Bivariate Moran's conditional permutation implementation","code":""},{"path":"/reference/local_moran_bv_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Bivariate Moran's I conditional permutation implementation — local_moran_bv_perm_impl","text":"","code":"local_moran_bv_perm_impl(x, y, listw)"},{"path":"/reference/local_moran_bv_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Bivariate Moran's I conditional permutation implementation — local_moran_bv_perm_impl","text":"x numeric vector length nb. y numeric vector length nb. listw listw object e.g. created recreate_listw().","code":""},{"path":"/reference/losh.html","id":null,"dir":"Reference","previous_headings":"","what":"Local spatial heteroscedacity — losh","title":"Local spatial heteroscedacity — losh","text":"Local spatial heteroscedacity","code":""},{"path":"/reference/losh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local spatial heteroscedacity — losh","text":"","code":"losh(x, nb, wt, a = 2, ...)  losh_perm(x, nb, wt, a = 2, nsim = 499, ...)"},{"path":"/reference/losh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local spatial heteroscedacity — losh","text":"x numeric vector. nb neighbor list example created st_contiguity() wt weights list example created st_weights() exponent applied local residuals ... methods passed spdep::LOSH nsim number simulations run","code":""},{"path":"/reference/losh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local spatial heteroscedacity — losh","text":"data.frame columns hi: observed statistic e_hi: sample average var_hi: sample variance z_hi approximately Chi-square distributed test statistic x_bar_i: local spatially weight mean observation ei: residuals","code":""},{"path":"/reference/losh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local spatial heteroscedacity — losh","text":"","code":"nb <- st_contiguity(guerry) wt <- st_weights(nb) x <- guerry$crime_pers losh(x, nb, wt) #>            hi e_hi    var_hi       z_hi  x_bar_i           ei #> 1  0.42563150    1 0.3894939  2.1855618 23047.50 3.390151e+07 #> 2  2.07958219    1 0.2532512 16.4230798 26919.67 4.811734e+05 #> 3  1.84873198    1 0.2532512 14.5999870 26195.50 3.041522e+05 #> 4  0.06131293    1 0.3894939  0.3148338 14401.25 2.149889e+06 #> 5  0.03499988    1 0.5257366  0.1331461 15038.67 5.999234e+06 #> 6  0.43681771    1 0.2143247  4.0762239 15749.00 3.937563e+07 #> 7  1.02195445    1 0.5257366  3.8877049 22111.67 1.713830e+08 #> 8  0.62524134    1 0.5257366  2.3785344 13672.33 5.624000e+07 #> 9  1.38724561    1 0.3077483  9.0154567 22859.20 1.060935e+07 #> 10 0.61603841    1 0.3077483  4.0035215 11475.20 1.740392e+07 #> 11 0.83487574    1 0.2143247  7.7907566 12200.14 1.571443e+07 #> 12 0.06091759    1 0.5257366  0.2317418 13278.67 1.698678e+04 #> 13 1.02979145    1 0.5257366  3.9175184 24734.00 5.122265e+07 #> 14 1.09853046    1 0.2532512  8.6754221 11752.83 3.990659e+07 #> 15 1.02984407    1 0.3077483  6.6927691 17992.60 4.860042e+07 #> 16 0.52205384    1 0.3077483  3.3927328 21974.40 1.064325e+07 #> 17 1.84431404    1 0.2532512 14.5650971 26711.00 2.281973e+07 #> 18 2.56737439    1 0.2532512 20.2753201 19344.00 1.666272e+07 #> 19 0.27138661    1 0.2143247  2.5324810 23696.71 7.326137e+07 #> 20 0.39291206    1 0.5257366  1.4947106 25108.67 1.223834e+07 #> 21 1.29241253    1 0.2532512 10.2065666 21643.17 2.362625e+08 #> 22 1.33769567    1 0.2143247 12.4828892 18306.00 1.075184e+07 #> 23 0.04265707    1 0.7982221  0.1068802 24280.00 1.617984e+08 #> 24 0.29390902    1 0.3077483  1.9100612 14451.60 1.114291e+06 #> 25 1.09084664    1 0.2532512  8.6147407 21047.67 3.909584e+07 #> 26 1.04281881    1 0.2532512  8.2354506 21421.33 2.844444e+03 #> 27 0.22639201    1 0.7982221  0.5672407 25961.50 1.529201e+07 #> 28 0.42373924    1 0.2532512  3.3463949 10869.83 5.040773e+06 #> 29 0.55413216    1 0.2532512  4.3761467 13415.67 2.731456e+07 #> 30 0.52195360    1 0.2532512  4.1220230 17172.17 2.160410e+06 #> 31 0.48399476    1 0.3894939  2.4852494 20238.25 1.488224e+07 #> 32 0.29529066    1 0.3894939  1.5162787 12504.25 9.594506e+04 #> 33 0.72023929    1 0.2532512  5.6879442 26723.00 2.102222e+07 #> 34 2.31220222    1 0.2532512 18.2601494 21772.83 1.130217e+08 #> 35 2.02985746    1 0.3077483 13.1916741 26462.20 5.374649e+07 #> 36 0.98783506    1 0.2532512  7.8012276 19252.00 2.180890e+05 #> 37 1.64645940    1 0.3077483 10.7000399 24683.20 2.364829e+06 #> 38 0.38908276    1 0.3894939  1.9978888 20607.25 8.527860e+06 #> 39 1.41460149    1 0.2532512 11.1715292 24412.00 9.734400e+06 #> 40 0.56981855    1 0.2143247  5.3173393 19373.71 6.589033e+07 #> 41 1.27709481    1 0.3077483  8.2996067 16000.20 2.883204e+04 #> 42 0.61384968    1 0.3894939  3.1520374 23993.25 2.189538e+07 #> 43 0.53773204    1 0.2143247  5.0179197 20337.86 6.842709e+06 #> 44 0.58983165    1 0.2532512  4.6580762 16818.67 1.195888e+08 #> 45 0.78377645    1 0.2532512  6.1897160 17113.83 3.428298e+07 #> 46 0.60345256    1 0.3077483  3.9217283 13013.00 2.812181e+07 #> 47 1.00328782    1 0.1851298 10.8387489 22133.00 5.713848e+07 #> 48 0.65819988    1 0.3894939  3.3797698 24093.75 4.877975e+07 #> 49 1.05152963    1 0.2532512  8.3042426 25661.67 1.011969e+08 #> 50 0.93808660    1 0.2532512  7.4083492 22190.17 1.632833e+07 #> 51 1.36638049    1 0.3077483  8.8798580 29030.00 4.886010e+05 #> 52 0.53166821    1 0.3894939  2.7300463 16951.00 9.453673e+07 #> 53 2.31922282    1 0.3077483 15.0722069 24509.00 4.000000e+00 #> 54 0.53104812    1 0.3894939  2.7268623 24982.75 2.778056e+06 #> 55 1.65957271    1 0.7982221  4.1581729 19491.50 5.385358e+07 #> 56 0.68162031    1 0.2532512  5.3829585 24176.00 8.299210e+05 #> 57 1.33364496    1 0.5257366  5.0734336 27639.67 8.094001e+05 #> 58 1.18539711    1 0.2532512  9.3614340 21274.33 4.768823e+07 #> 59 1.12893629    1 0.2532512  8.9155461 24510.33 1.458222e+07 #> 60 1.25289279    1 0.7982221  3.1392085 30166.00 4.991422e+07 #> 61 1.80441074    1 0.2532512 14.2499689 23459.00 3.847721e+07 #> 62 0.44309432    1 0.5257366  1.6856133 16184.00 2.894440e+05 #> 63 0.29915866    1 0.5257366  1.1380552 18002.00 3.339684e+07 #> 64 1.11027963    1 0.7982221  2.7818815 10910.00 1.748912e+07 #> 65 1.63760586    1 0.3894939  8.4088907 16251.25 1.554134e+07 #> 66 0.25142223    1 0.7982221  0.6299556 15572.00 6.771644e+07 #> 67 0.78098937    1 0.3894939  4.0102777 25884.25 5.028583e+07 #> 68 1.53711112    1 0.3077483  9.9894054 23020.60 4.645786e+05 #> 69 0.97710928    1 0.2143247  9.1180282 26495.00 3.594816e+06 #> 70 0.68191745    1 0.2532512  5.3853051 24690.50 8.505451e+07 #> 71 0.94434450    1 0.7982221  2.3661197 17339.00 1.151924e+07 #> 72 1.69938328    1 0.5257366  6.4647703 25522.33 5.137067e+07 #> 73 0.97749972    1 0.1851298 10.5601541 18970.00 1.043936e+07 #> 74 0.58088188    1 0.2532512  4.5873972 19701.83 5.219822e+07 #> 75 1.13689616    1 0.3077483  7.3884812 21841.00 1.184048e+07 #> 76 0.90616976    1 0.3077483  5.8890323 24520.40 8.229393e+07 #> 77 0.36532589    1 0.3077483  2.3741865 14025.80 1.013646e+06 #> 78 1.00546440    1 0.2532512  7.9404517 14565.17 5.055003e+04 #> 79 0.03176969    1 0.5257366  0.1208578 13306.67 2.613611e+04 #> 80 0.23983268    1 0.2532512  1.8940301 12579.00 9.940090e+05 #> 81 0.76525616    1 0.3894939  3.9294897 21529.50 4.935062e+05 #> 82 1.76009049    1 0.2532512 13.8999587 23474.50 7.164776e+07 #> 83 2.49737804    1 0.2532512 19.7225381 24373.17 6.588839e+07 #> 84 0.97788776    1 0.2532512  7.7226708 19900.50 1.135290e+06 #> 85 0.61500983    1 0.3077483  3.9968369 23373.60 2.881113e+07 losh(x, nb, wt, var_hi = FALSE) #>            hi  x_bar_i           ei #> 1  0.42563150 23047.50 3.390151e+07 #> 2  2.07958219 26919.67 4.811734e+05 #> 3  1.84873198 26195.50 3.041522e+05 #> 4  0.06131293 14401.25 2.149889e+06 #> 5  0.03499988 15038.67 5.999234e+06 #> 6  0.43681771 15749.00 3.937563e+07 #> 7  1.02195445 22111.67 1.713830e+08 #> 8  0.62524134 13672.33 5.624000e+07 #> 9  1.38724561 22859.20 1.060935e+07 #> 10 0.61603841 11475.20 1.740392e+07 #> 11 0.83487574 12200.14 1.571443e+07 #> 12 0.06091759 13278.67 1.698678e+04 #> 13 1.02979145 24734.00 5.122265e+07 #> 14 1.09853046 11752.83 3.990659e+07 #> 15 1.02984407 17992.60 4.860042e+07 #> 16 0.52205384 21974.40 1.064325e+07 #> 17 1.84431404 26711.00 2.281973e+07 #> 18 2.56737439 19344.00 1.666272e+07 #> 19 0.27138661 23696.71 7.326137e+07 #> 20 0.39291206 25108.67 1.223834e+07 #> 21 1.29241253 21643.17 2.362625e+08 #> 22 1.33769567 18306.00 1.075184e+07 #> 23 0.04265707 24280.00 1.617984e+08 #> 24 0.29390902 14451.60 1.114291e+06 #> 25 1.09084664 21047.67 3.909584e+07 #> 26 1.04281881 21421.33 2.844444e+03 #> 27 0.22639201 25961.50 1.529201e+07 #> 28 0.42373924 10869.83 5.040773e+06 #> 29 0.55413216 13415.67 2.731456e+07 #> 30 0.52195360 17172.17 2.160410e+06 #> 31 0.48399476 20238.25 1.488224e+07 #> 32 0.29529066 12504.25 9.594506e+04 #> 33 0.72023929 26723.00 2.102222e+07 #> 34 2.31220222 21772.83 1.130217e+08 #> 35 2.02985746 26462.20 5.374649e+07 #> 36 0.98783506 19252.00 2.180890e+05 #> 37 1.64645940 24683.20 2.364829e+06 #> 38 0.38908276 20607.25 8.527860e+06 #> 39 1.41460149 24412.00 9.734400e+06 #> 40 0.56981855 19373.71 6.589033e+07 #> 41 1.27709481 16000.20 2.883204e+04 #> 42 0.61384968 23993.25 2.189538e+07 #> 43 0.53773204 20337.86 6.842709e+06 #> 44 0.58983165 16818.67 1.195888e+08 #> 45 0.78377645 17113.83 3.428298e+07 #> 46 0.60345256 13013.00 2.812181e+07 #> 47 1.00328782 22133.00 5.713848e+07 #> 48 0.65819988 24093.75 4.877975e+07 #> 49 1.05152963 25661.67 1.011969e+08 #> 50 0.93808660 22190.17 1.632833e+07 #> 51 1.36638049 29030.00 4.886010e+05 #> 52 0.53166821 16951.00 9.453673e+07 #> 53 2.31922282 24509.00 4.000000e+00 #> 54 0.53104812 24982.75 2.778056e+06 #> 55 1.65957271 19491.50 5.385358e+07 #> 56 0.68162031 24176.00 8.299210e+05 #> 57 1.33364496 27639.67 8.094001e+05 #> 58 1.18539711 21274.33 4.768823e+07 #> 59 1.12893629 24510.33 1.458222e+07 #> 60 1.25289279 30166.00 4.991422e+07 #> 61 1.80441074 23459.00 3.847721e+07 #> 62 0.44309432 16184.00 2.894440e+05 #> 63 0.29915866 18002.00 3.339684e+07 #> 64 1.11027963 10910.00 1.748912e+07 #> 65 1.63760586 16251.25 1.554134e+07 #> 66 0.25142223 15572.00 6.771644e+07 #> 67 0.78098937 25884.25 5.028583e+07 #> 68 1.53711112 23020.60 4.645786e+05 #> 69 0.97710928 26495.00 3.594816e+06 #> 70 0.68191745 24690.50 8.505451e+07 #> 71 0.94434450 17339.00 1.151924e+07 #> 72 1.69938328 25522.33 5.137067e+07 #> 73 0.97749972 18970.00 1.043936e+07 #> 74 0.58088188 19701.83 5.219822e+07 #> 75 1.13689616 21841.00 1.184048e+07 #> 76 0.90616976 24520.40 8.229393e+07 #> 77 0.36532589 14025.80 1.013646e+06 #> 78 1.00546440 14565.17 5.055003e+04 #> 79 0.03176969 13306.67 2.613611e+04 #> 80 0.23983268 12579.00 9.940090e+05 #> 81 0.76525616 21529.50 4.935062e+05 #> 82 1.76009049 23474.50 7.164776e+07 #> 83 2.49737804 24373.17 6.588839e+07 #> 84 0.97788776 19900.50 1.135290e+06 #> 85 0.61500983 23373.60 2.881113e+07 losh_perm(x, nb, wt, nsim = 49) #>            hi  x_bar_i           ei p_sim #> 1  0.42563150 23047.50 3.390151e+07  0.82 #> 2  2.07958219 26919.67 4.811734e+05  0.02 #> 3  1.84873198 26195.50 3.041522e+05  0.06 #> 4  0.06131293 14401.25 2.149889e+06  0.98 #> 5  0.03499988 15038.67 5.999234e+06  0.98 #> 6  0.43681771 15749.00 3.937563e+07  0.82 #> 7  1.02195445 22111.67 1.713830e+08  0.48 #> 8  0.62524134 13672.33 5.624000e+07  0.64 #> 9  1.38724561 22859.20 1.060935e+07  0.26 #> 10 0.61603841 11475.20 1.740392e+07  0.60 #> 11 0.83487574 12200.14 1.571443e+07  0.52 #> 12 0.06091759 13278.67 1.698678e+04  0.96 #> 13 1.02979145 24734.00 5.122265e+07  0.42 #> 14 1.09853046 11752.83 3.990659e+07  0.38 #> 15 1.02984407 17992.60 4.860042e+07  0.22 #> 16 0.52205384 21974.40 1.064325e+07  0.76 #> 17 1.84431404 26711.00 2.281973e+07  0.04 #> 18 2.56737439 19344.00 1.666272e+07  0.02 #> 19 0.27138661 23696.71 7.326137e+07  0.96 #> 20 0.39291206 25108.67 1.223834e+07  0.90 #> 21 1.29241253 21643.17 2.362625e+08  0.28 #> 22 1.33769567 18306.00 1.075184e+07  0.10 #> 23 0.04265707 24280.00 1.617984e+08  0.92 #> 24 0.29390902 14451.60 1.114291e+06  0.90 #> 25 1.09084664 21047.67 3.909584e+07  0.38 #> 26 1.04281881 21421.33 2.844444e+03  0.44 #> 27 0.22639201 25961.50 1.529201e+07  0.84 #> 28 0.42373924 10869.83 5.040773e+06  0.76 #> 29 0.55413216 13415.67 2.731456e+07  0.72 #> 30 0.52195360 17172.17 2.160410e+06  0.76 #> 31 0.48399476 20238.25 1.488224e+07  0.70 #> 32 0.29529066 12504.25 9.594506e+04  0.92 #> 33 0.72023929 26723.00 2.102222e+07  0.66 #> 34 2.31220222 21772.83 1.130217e+08  0.02 #> 35 2.02985746 26462.20 5.374649e+07  0.04 #> 36 0.98783506 19252.00 2.180890e+05  0.44 #> 37 1.64645940 24683.20 2.364829e+06  0.14 #> 38 0.38908276 20607.25 8.527860e+06  0.74 #> 39 1.41460149 24412.00 9.734400e+06  0.04 #> 40 0.56981855 19373.71 6.589033e+07  0.76 #> 41 1.27709481 16000.20 2.883204e+04  0.16 #> 42 0.61384968 23993.25 2.189538e+07  0.78 #> 43 0.53773204 20337.86 6.842709e+06  0.62 #> 44 0.58983165 16818.67 1.195888e+08  0.86 #> 45 0.78377645 17113.83 3.428298e+07  0.52 #> 46 0.60345256 13013.00 2.812181e+07  0.58 #> 47 1.00328782 22133.00 5.713848e+07  0.40 #> 48 0.65819988 24093.75 4.877975e+07  0.58 #> 49 1.05152963 25661.67 1.011969e+08  0.26 #> 50 0.93808660 22190.17 1.632833e+07  0.50 #> 51 1.36638049 29030.00 4.886010e+05  0.28 #> 52 0.53166821 16951.00 9.453673e+07  0.58 #> 53 2.31922282 24509.00 4.000000e+00  0.04 #> 54 0.53104812 24982.75 2.778056e+06  0.60 #> 55 1.65957271 19491.50 5.385358e+07  0.18 #> 56 0.68162031 24176.00 8.299210e+05  0.58 #> 57 1.33364496 27639.67 8.094001e+05  0.28 #> 58 1.18539711 21274.33 4.768823e+07  0.30 #> 59 1.12893629 24510.33 1.458222e+07  0.34 #> 60 1.25289279 30166.00 4.991422e+07  0.24 #> 61 1.80441074 23459.00 3.847721e+07  0.12 #> 62 0.44309432 16184.00 2.894440e+05  0.74 #> 63 0.29915866 18002.00 3.339684e+07  0.86 #> 64 1.11027963 10910.00 1.748912e+07  0.38 #> 65 1.63760586 16251.25 1.554134e+07  0.16 #> 66 0.25142223 15572.00 6.771644e+07  0.60 #> 67 0.78098937 25884.25 5.028583e+07  0.80 #> 68 1.53711112 23020.60 4.645786e+05  0.10 #> 69 0.97710928 26495.00 3.594816e+06  0.36 #> 70 0.68191745 24690.50 8.505451e+07  0.78 #> 71 0.94434450 17339.00 1.151924e+07  0.44 #> 72 1.69938328 25522.33 5.137067e+07  0.02 #> 73 0.97749972 18970.00 1.043936e+07  0.30 #> 74 0.58088188 19701.83 5.219822e+07  0.70 #> 75 1.13689616 21841.00 1.184048e+07  0.36 #> 76 0.90616976 24520.40 8.229393e+07  0.66 #> 77 0.36532589 14025.80 1.013646e+06  0.82 #> 78 1.00546440 14565.17 5.055003e+04  0.40 #> 79 0.03176969 13306.67 2.613611e+04  0.98 #> 80 0.23983268 12579.00 9.940090e+05  0.94 #> 81 0.76525616 21529.50 4.935062e+05  0.42 #> 82 1.76009049 23474.50 7.164776e+07  0.04 #> 83 2.49737804 24373.17 6.588839e+07  0.02 #> 84 0.97788776 19900.50 1.135290e+06  0.30 #> 85 0.61500983 23373.60 2.881113e+07  0.72"},{"path":"/reference/moran_bv_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Bivariate Moran's I calculation — moran_bv_calc","title":"Global Bivariate Moran's I calculation — moran_bv_calc","text":"Global Bivariate Moran's calculation","code":""},{"path":"/reference/moran_bv_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Bivariate Moran's I calculation — moran_bv_calc","text":"","code":"moran_bv_calc(x, yj, wt)"},{"path":"/reference/moran_bv_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Bivariate Moran's I calculation — moran_bv_calc","text":"x numeric vector length nb. yj neighbor values y, length lengths nb. wt weights list created st_weights().","code":""},{"path":"/reference/moran_bv_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Bivariate Moran's I spdep implementation — moran_bv_impl","title":"Global Bivariate Moran's I spdep implementation — moran_bv_impl","text":"Global Bivariate Moran's spdep implementation","code":""},{"path":"/reference/moran_bv_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Bivariate Moran's I spdep implementation — moran_bv_impl","text":"","code":"moran_bv_impl(x, y, listw, nsim)"},{"path":"/reference/moran_bv_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Bivariate Moran's I spdep implementation — moran_bv_impl","text":"x numeric vector length nb. y numeric vector length nb. listw listw object e.g. created recreate_listw(). nsim number simulations run.","code":""},{"path":"/reference/moran_bv_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Bivariate Moran's I conditional permutation implementation — moran_bv_perm_impl","title":"Global Bivariate Moran's I conditional permutation implementation — moran_bv_perm_impl","text":"Global Bivariate Moran's conditional permutation implementation","code":""},{"path":"/reference/moran_bv_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Bivariate Moran's I conditional permutation implementation — moran_bv_perm_impl","text":"","code":"moran_bv_perm_impl(x, y, listw)"},{"path":"/reference/moran_bv_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Bivariate Moran's I conditional permutation implementation — moran_bv_perm_impl","text":"x numeric vector length nb. y numeric vector length nb. listw listw object e.g. created recreate_listw().","code":""},{"path":"/reference/nb_match_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Neighbor Match Test — nb_match_test","title":"Local Neighbor Match Test — nb_match_test","text":"Implements Local Neighbor Match Test described Tobler's Law Multivariate World (Anselin Li, 2020).","code":""},{"path":"/reference/nb_match_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Neighbor Match Test — nb_match_test","text":"","code":"nb_match_test(   x,   nb,   wt = st_weights(nb),   k = 10,   nsim = 499,   scale = TRUE,   .method = \"euclidian\",   .p = 2 )"},{"path":"/reference/nb_match_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Neighbor Match Test — nb_match_test","text":"x numeric vector list numeric vectors equal length. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). k number neighbors identify attribute space. number neighbors provided st_knn. nsim number simulations run calculating simulated p-value. scale default TRUE. Whether x scaled . Note measures standardized. .method default \"euclidian\". distance measure passed stats::dist(). .p default 2. power Minkowski distance passed p argument stats::dist().","code":""},{"path":"/reference/nb_match_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Neighbor Match Test — nb_match_test","text":"data.frame columns n_shared (integer): number shared neighbors geographic attribute space nb_matches (list): matched neighbor indexes. element iteger vector length ith observation n_shared knn_nb (list): neighbors attribute space probability (numeric): geometric probability observing number matches p_sim (numeric): folded simulated p-value","code":""},{"path":"/reference/nb_match_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Neighbor Match Test — nb_match_test","text":"","code":"library(magrittr) guerry %>%   dplyr::transmute(nb = st_knn(geometry, k = 10),          nmt = nb_match_test(list(crime_pers, literacy, suicides),                              nb, nsim = 999)) %>%   tidyr::unnest(nmt) #> ! Polygon provided. Using point on surface. #> Simple feature collection with 85 features and 6 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 7 #>    nb     n_shared nb_matches knn_nb probability p_sim                  geometry #>    <nb>      <int> <list>     <list>       <dbl> <dbl>            <MULTIPOLYGON> #>  1 <int …        1 <int [1]>  <int …     0.400   0.673 (((801150 2092615, 80066… #>  2 <int …        3 <int [3]>  <int …     0.0782  0.089 (((729326 2521619, 72932… #>  3 <int …        5 <int [5]>  <int …     0.00147 0.002 (((710830 2137350, 71174… #>  4 <int …        4 <int [4]>  <int …     0.0141  0.019 (((882701 1920024, 88240… #>  5 <int …        0 <int [0]>  <int …     0.260   0.272 (((886504 1922890, 88573… #>  6 <int …        0 <int [0]>  <int …     0.260   0.267 (((747008 1925789, 74663… #>  7 <int …        5 <int [5]>  <int …     0.00147 0.003 (((818893 2514767, 81861… #>  8 <int …        5 <int [5]>  <int …     0.00147 0.002 (((509103 1747787, 50882… #>  9 <int …        3 <int [3]>  <int …     0.0782  0.107 (((775400 2345600, 77506… #> 10 <int …        4 <int [4]>  <int …     0.0141  0.015 (((626230 1810121, 62626… #> # … with 75 more rows"},{"path":"/reference/nb_union.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Operations — nb_union","title":"Set Operations — nb_union","text":"Perform set operations element-wise two lists equal length.","code":""},{"path":"/reference/nb_union.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Operations — nb_union","text":"","code":"nb_union(x, y)  nb_intersect(x, y)  nb_setdiff(x, y)"},{"path":"/reference/nb_union.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Operations — nb_union","text":"x list class nb y list class nb","code":""},{"path":"/reference/nb_union.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Operations — nb_union","text":"list class nb","code":""},{"path":"/reference/nb_union.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Operations — nb_union","text":"nb_union() returns union elements element x y nb_intersect() returns intersection elements element x y nb_setdiff() returns intersection elements element x y","code":""},{"path":"/reference/nb_union.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Operations — nb_union","text":"","code":"nb <- st_contiguity(guerry$geometry) nb_knn <- st_knn(guerry$geometry, k = 3) #> ! Polygon provided. Using point on surface. nb_setdiff(nb, nb_knn) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 176  #> Percentage nonzero weights: 2.435986  #> Average number of links: 2.070588  #> 16 regions with no links: #> 5 7 8 13 20 23 27 55 57 60 62 63 64 66 71 79 #> Non-symmetric neighbours list nb_union(nb, nb_knn) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 431  #> Percentage nonzero weights: 5.965398  #> Average number of links: 5.070588  #> Non-symmetric neighbours list nb_intersect(nb, nb_knn) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 244  #> Percentage nonzero weights: 3.377163  #> Average number of links: 2.870588  #> Non-symmetric neighbours list"},{"path":"/reference/nmt_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify matches between two neighbor lists — nmt_calc","title":"Identify matches between two neighbor lists — nmt_calc","text":"Identify matches two neighbor lists","code":""},{"path":"/reference/nmt_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify matches between two neighbor lists — nmt_calc","text":"","code":"nmt_calc(knn_nb, nb)"},{"path":"/reference/nmt_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify matches between two neighbor lists — nmt_calc","text":"knn_nb list length number observations used dataset nb list length knn_nb.","code":""},{"path":"/reference/nmt_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Implementation of Neighbor Match Test — nmt_impl","title":"Implementation of Neighbor Match Test — nmt_impl","text":"Implementation Neighbor Match Test","code":""},{"path":"/reference/nmt_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implementation of Neighbor Match Test — nmt_impl","text":"","code":"nmt_impl(x, k, listw, nsim = 199, scale = TRUE, .method = \"euclidian\", .p = 2)"},{"path":"/reference/nmt_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implementation of Neighbor Match Test — nmt_impl","text":"x numeric vector list numeric vectors equal length. k number neighbors identify attribute space. number neighbors provided st_knn. nsim number simulations run calculating simulated p-value. scale default TRUE. Whether x scaled . Note measures standardized. .method default \"euclidian\". distance measure passed stats::dist(). .p default 2. power Minkowski distance passed p argument stats::dist().","code":""},{"path":"/reference/nmt_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Find conditionally permuted neighbor matches\nGiven a kNN attribute neighbor list and a listw object, find the number of matches given a conditional permutation. — nmt_perm_impl","title":"Find conditionally permuted neighbor matches\nGiven a kNN attribute neighbor list and a listw object, find the number of matches given a conditional permutation. — nmt_perm_impl","text":"Find conditionally permuted neighbor matches Given kNN attribute neighbor list listw object, find number matches given conditional permutation.","code":""},{"path":"/reference/nmt_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find conditionally permuted neighbor matches\nGiven a kNN attribute neighbor list and a listw object, find the number of matches given a conditional permutation. — nmt_perm_impl","text":"","code":"nmt_perm_impl(knn_nb, listw)"},{"path":"/reference/nmt_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find conditionally permuted neighbor matches\nGiven a kNN attribute neighbor list and a listw object, find the number of matches given a conditional permutation. — nmt_perm_impl","text":"knn_nb list numeric elements. example made dbscan::adjacencylist() listw listw object likely created recreate_listw.","code":""},{"path":"/reference/pairwise_colocation.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise Colocation Quotient — pairwise_colocation","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"Calculate pairwise colocation quotient (CLQ) two categorical variables using conditional permutation.","code":""},{"path":"/reference/pairwise_colocation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"","code":"pairwise_colocation(A, B, nb, nsim = 99)"},{"path":"/reference/pairwise_colocation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"character factor vector. B character factor vector. nb neighbors list e.g. created st_knn() st_contiguity() nsim default 99. integer representing many simulations run calculating simulated p-values.","code":""},{"path":"/reference/pairwise_colocation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"matrix rownames unique values column names unique values B simulated p-values form p_sim_{B}.","code":""},{"path":[]},{"path":"/reference/pairwise_colocation.html","id":"intuition","dir":"Reference","previous_headings":"","what":"Intuition","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"pairwise CLQ used test spatial directional association subcategories two vectors B. Compared cross-K metric join count statistic, pairwise CLQ can elucidate presence asymmetric relationship subcategories B. B can either separate categorical vectors categorical vector. \"null hypothesis CLQ-based analysis 'given clustering joint population, spatial association pairs categorical subsets.'\"","code":""},{"path":"/reference/pairwise_colocation.html","id":"definition","dir":"Reference","previous_headings":"","what":"Definition","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"pairwise colocation quotient defined \"ratio observed expected proportions B among 's nearest neighbors. Formally given \\(CLQ_{\\B} = \\frac{{C_{\\B} / N_A}}{N^{'}_{B} / (N - 1)}\\)\" \\(C_{\\B} = \\sum_{= 1}^{N_A}\\sum_{j = 1}^{v}\\frac{B_{ij}(1,0)}{v}\\).","code":""},{"path":"/reference/pairwise_colocation.html","id":"inference","dir":"Reference","previous_headings":"","what":"Inference","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"Inference done using conditional permutation suggested Anselin 1995 number replicates created. observed values compared replicates simulated p-value proportion cases observed extreme compared replicate. simulated p-value returns lower p-value either tail.","code":""},{"path":"/reference/pairwise_colocation.html","id":"interpretation","dir":"Reference","previous_headings":"","what":"Interpretation","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"Given CLQ ratio observed expected, interpret values larger one mean colocation expected null hypothesis spatial association. value smaller 0, interpret mean less colocation expected null.","code":""},{"path":"/reference/pairwise_colocation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"","code":"A <- guerry$main_city B <- guerry$region nb <- st_knn(sf::st_geometry(guerry), 5) #> ! Polygon provided. Using point on surface. pairwise_colocation(B, A, nb) #>        1:Sm     2:Med      3:Lg p_sim_1:Sm p_sim_2:Med p_sim_3:Lg #> C 0.8894118 1.1250679 0.1976471       0.45        0.00       0.00 #> E 1.8776471 0.8514027 0.9882353       0.00        0.01       0.43 #> N 0.1976471 1.0794570 1.1858824       0.00        0.06       0.32 #> S 1.5811765 0.9122172 0.8894118       0.08        0.17       0.38 #> W 0.6917647 1.0338462 0.9882353       0.28        0.25       0.50 pairwise_colocation(B, B, nb, 199) #>           C         E         N         S         W p_sim_C p_sim_E p_sim_N #> C 3.5205882 0.3705882 0.4941176 0.3088235 0.5558824   0.000   0.000   0.005 #> E 0.4323529 3.8294118 0.4941176 0.4941176 0.0000000   0.000   0.000   0.000 #> N 0.4323529 0.5558824 3.9529412 0.0000000 0.3088235   0.000   0.010   0.000 #> S 0.3705882 0.5558824 0.0000000 3.9529412 0.3705882   0.005   0.005   0.000 #> W 0.5558824 0.0000000 0.3088235 0.4941176 3.8911765   0.005   0.000   0.000 #>   p_sim_S p_sim_W #> C   0.000   0.015 #> E   0.005   0.000 #> N   0.000   0.000 #> S   0.000   0.000 #> W   0.000   0.000"},{"path":"/reference/pairwise_colocation_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise CLQ calculation — pairwise_colocation_calc","title":"Pairwise CLQ calculation — pairwise_colocation_calc","text":"Internal function calculate pairwise CQL.","code":""},{"path":"/reference/pairwise_colocation_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise CLQ calculation — pairwise_colocation_calc","text":"","code":"pairwise_colocation_calc(A, B, nb)"},{"path":"/reference/pairwise_colocation_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise CLQ calculation — pairwise_colocation_calc","text":"character factor vector. B character factor vector. nb neighbors list e.g. created st_knn() st_contiguity()","code":""},{"path":"/reference/pairwise_colocation_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise CLQ conditional permutation implementation — pairwise_colocation_perm_impl","title":"Pairwise CLQ conditional permutation implementation — pairwise_colocation_perm_impl","text":"Internal implementation pairwise CQL using conditional permutation. Functionally pairwise_colocation().","code":""},{"path":"/reference/pairwise_colocation_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise CLQ conditional permutation implementation — pairwise_colocation_perm_impl","text":"","code":"pairwise_colocation_perm_impl(A, B, nb, nsim = 199)"},{"path":"/reference/pairwise_colocation_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise CLQ conditional permutation implementation — pairwise_colocation_perm_impl","text":"character factor vector. B character factor vector. nb neighbors list e.g. created st_knn() st_contiguity() nsim default 99. integer representing many simulations run calculating simulated p-values.","code":""},{"path":"/reference/pct_nonzero.html","id":null,"dir":"Reference","previous_headings":"","what":"Percent Non-zero Neighbors — pct_nonzero","title":"Percent Non-zero Neighbors — pct_nonzero","text":"Calculate percentage non-zero neighbors neighbor list.","code":""},{"path":"/reference/pct_nonzero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percent Non-zero Neighbors — pct_nonzero","text":"","code":"pct_nonzero(nb)"},{"path":"/reference/pct_nonzero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percent Non-zero Neighbors — pct_nonzero","text":"nb neighbor list object","code":""},{"path":"/reference/pct_nonzero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percent Non-zero Neighbors — pct_nonzero","text":"scalar double","code":""},{"path":"/reference/permute_listw.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditionally permutes a listw object — permute_listw","title":"Conditionally permutes a listw object — permute_listw","text":"Conditionally permutes listw object","code":""},{"path":"/reference/permute_listw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditionally permutes a listw object — permute_listw","text":"","code":"permute_listw(listw)"},{"path":"/reference/permute_listw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditionally permutes a listw object — permute_listw","text":"listw object.","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/recreate_listw.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a listw object from a neighbors and weight list — recreate_listw","title":"Create a listw object from a neighbors and weight list — recreate_listw","text":"Create listw object neighbors weight list","code":""},{"path":"/reference/recreate_listw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a listw object from a neighbors and weight list — recreate_listw","text":"","code":"recreate_listw(nb, wt)"},{"path":"/reference/recreate_listw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a listw object from a neighbors and weight list — recreate_listw","text":"nb neighbor list object example created st_contiguity(). wt weights list created st_weights().","code":""},{"path":"/reference/set_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Set columns from geometry to data — set_col","title":"Set columns from geometry to data — set_col","text":"Set column geometry context spacetime object data context.","code":""},{"path":"/reference/set_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set columns from geometry to data — set_col","text":"","code":"set_col(x, .from_geo, .to_data = .from_geo)  set_wts(x, .wt_col = \"wt\")  set_nbs(x, .nb_col = \"nb\")"},{"path":"/reference/set_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set columns from geometry to data — set_col","text":"x spacetime object .from_geo name column geometry context .to_data name new variable create data context .wt_col name weights column geometry context .nb_col name neighbor column geometry context","code":""},{"path":"/reference/set_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set columns from geometry to data — set_col","text":"spacetime object active data context new column geometry context.","code":""},{"path":"/reference/set_col.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set columns from geometry to data — set_col","text":"functions reorder spacetime object ensure ordered correctly based location time columns geometry context defined loc_col time_col attributes respectively. set_wts() set_nbs() create new column data context name column geometry context. different name desired use set_col()","code":""},{"path":"/reference/shuffle_nbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to shuffle neighbors — shuffle_nbs","title":"Internal function to shuffle neighbors — shuffle_nbs","text":"Used conditional permutation function permute_listw().","code":""},{"path":"/reference/shuffle_nbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to shuffle neighbors — shuffle_nbs","text":"","code":"shuffle_nbs(i, n, card)"},{"path":"/reference/shuffle_nbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to shuffle neighbors — shuffle_nbs","text":"index position observation ","code":""},{"path":"/reference/spacetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a spacetime object — spacetime","title":"Construct a spacetime object — spacetime","text":"spacetime object collection linked data frame sf objects. can thought geography linked table represents geographies one time periods.","code":""},{"path":"/reference/spacetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a spacetime object — spacetime","text":"","code":"spacetime(.data, .geometry, .loc_col, .time_col, active = \"data\")  new_spacetime(.data, .geometry, .loc_col, .time_col, active = \"data\")  validate_spacetime(.data, .geometry, .loc_col, .time_col)  is_spacetime(x, ...)  is.spacetime(x, ...)"},{"path":"/reference/spacetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a spacetime object — spacetime","text":".data object base class data.frame containing location time identifiers .loc_col .time_col respectively. .geometry sf object columns .loc_col .time_col .loc_col quoted name column containing unique location identifiers. Must present .data .geometry. .time_col quoted name column containing time periods must present .data. See details active default \"data\". object make active. See activate() . x object test ... unused","code":""},{"path":"/reference/spacetime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a spacetime object — spacetime","text":"Create spacetime representation vector data data.frame sf object spacetime() .time_col must able sorted. , .time_col character vector. must base type (typeof()) either double integer—case dates factors respectively. edge case exists POSIXlt class objects can sorted appropriately base type list. spacetime() wrapper around new_spacetime(). Spacetimes validated creation validate_spacetime(). Check object spacetime object is_spacetime() .spacetime().","code":""},{"path":"/reference/spacetime.html","id":"validation","dir":"Reference","previous_headings":"","what":"Validation","title":"Construct a spacetime object — spacetime","text":"validate_spacetime() checks .data .geometry ensure constructed spacetime object meets minimum requirements.: .data inherits data.frame class .geometry sf object ensures .time_col proper class ensures missing geometries .geometry checks duplicate geometries ensures .loc_col type .data .geometry lastly informs missing values additional columns .data","code":""},{"path":"/reference/spatial_gini.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial Gini Index — spatial_gini","title":"Spatial Gini Index — spatial_gini","text":"Calculates spatial Gini index given numeric vector neighbor list. Based formula provided Rey Smith (2013).","code":""},{"path":"/reference/spatial_gini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial Gini Index — spatial_gini","text":"","code":"spatial_gini(x, nb)"},{"path":"/reference/spatial_gini.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial Gini Index — spatial_gini","text":"x numeric vector without missing values nb neighbor list, example created st_contiguity()","code":""},{"path":"/reference/spatial_gini.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial Gini Index — spatial_gini","text":"scalar numeric.","code":""},{"path":"/reference/spatial_gini.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatial Gini Index — spatial_gini","text":"Gini index global measure inequality based Lorenz curve. ranges 0 1 0 perfect equality 1 perfect inequality. spatial Gini index decomposes Gini coefficient based spatial neighbors.","code":""},{"path":"/reference/spatial_gini.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spatial Gini Index — spatial_gini","text":"doi: 10.1007/s12076-012-0086-z","code":""},{"path":"/reference/spatial_gini.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial Gini Index — spatial_gini","text":"","code":"nb <- st_contiguity(guerry) x <- guerry$wealth spatial_gini(x, nb) #> [1] 0.3306568"},{"path":"/reference/spt_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Create time lagged spatial neighbors — spt_nb","title":"Create time lagged spatial neighbors — spt_nb","text":"Given spdep neighbor list (list indicating row position) neighbors spacetime object's geometry context, create neighbor list across space time data context.","code":""},{"path":"/reference/spt_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create time lagged spatial neighbors — spt_nb","text":"","code":"spt_nb(nb, n_times, n_locs, k = 1)"},{"path":"/reference/spt_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create time lagged spatial neighbors — spt_nb","text":"nb neighbors list created spacetime object's geometry context. n_times number time slices n_locs number locations","code":""},{"path":"/reference/spt_nb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create time lagged spatial neighbors — spt_nb","text":"Note used spacetime cubes. function available internal development used extreme caution. number bins equal n_times * n_locs location bin time-series n_times observations. makes spacetime cube function.","code":""},{"path":"/reference/spt_nb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create time lagged spatial neighbors — spt_nb","text":"https://pro.arcgis.com/en/pro-app/2.8/tool-reference/space-time-pattern-mining/create-space-time-cube.htm","code":""},{"path":[]},{"path":"/reference/spt_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Order a spacetime cube — spt_order","title":"Order a spacetime cube — spt_order","text":"performing analysis spacetime cube, order utmost importance. function ensures spacetime cube ordered appropriately.","code":""},{"path":"/reference/spt_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order a spacetime cube — spt_order","text":"","code":"spt_order(x)"},{"path":"/reference/spt_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order a spacetime cube — spt_order","text":"x spacetime cube object.","code":""},{"path":"/reference/spt_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update spacetime attributes — spt_update","title":"Update spacetime attributes — spt_update","text":"Update's spacetime object's number locations time periods. spacetime object's attributes sticky change subsetted example using dplyr::filter() dplyr::slice(). Update locations times spacetime object.","code":""},{"path":"/reference/spt_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update spacetime attributes — spt_update","text":"","code":"spt_update(x, ...)"},{"path":"/reference/spt_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update spacetime attributes — spt_update","text":"x spacetime object ... unused","code":""},{"path":"/reference/spt_wt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create time lagged spatial weights — spt_wt","title":"Create time lagged spatial weights — spt_wt","text":"Given space-time-lagged neighbor list weights lists, e.g. made st_dist_band() st_contiguity(), create corresponding weights list.","code":""},{"path":"/reference/spt_wt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create time lagged spatial weights — spt_wt","text":"","code":"spt_wt(wt, nbt, n_times, n_locs, k)"},{"path":"/reference/spt_wt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create time lagged spatial weights — spt_wt","text":"wt weights lists created spacetime object's geometry context. nbt time-lagged spatial neighbors list created spt_nb() n_times number time slices n_locs number locations","code":""},{"path":"/reference/spt_wt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create time lagged spatial weights — spt_wt","text":"intended spt_wt() used following use spt_nb() using input arguments. ensures time-lagged spatial weights correctly associated time-lagged spatial neighbors.","code":""},{"path":[]},{"path":"/reference/st_as_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to an edge lines object — st_as_edges","title":"Convert to an edge lines object — st_as_edges","text":"Given geometry neighbor weights lists, create edge list sf object.","code":""},{"path":"/reference/st_as_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to an edge lines object — st_as_edges","text":"","code":"st_as_edges(x, nb, wt)  # S3 method for sf st_as_edges(x, nb, wt)  # S3 method for sfc st_as_edges(x, nb, wt)"},{"path":"/reference/st_as_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to an edge lines object — st_as_edges","text":"x object class sf sfc. nb neighbor list. x class sf, unquote named column. x class sfc, object class nb created st_contiguity(). wt optional. weights list generated st_weights().  . x class sf, unquote named column. x class sfc, weights list .","code":""},{"path":"/reference/st_as_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to an edge lines object — st_as_edges","text":"Returns sf object edges represented LINESTRING. : node index. row position x. : node index. neighbor value stored nb. : node index. row position x. j: node index. neighbor value stored nb. wt: weight value j stored wt.","code":""},{"path":"/reference/st_as_edges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to an edge lines object — st_as_edges","text":"Creating edge list creates column position j observation neighbors. can recreate values expanding nb wt list columns.","code":"library(magrittr) guerry_nb %>%   tibble::as_tibble() %>%   dplyr::select(nb, wt) %>%   dplyr::mutate(i = dplyr::row_number(), .before = 1) %>%   tidyr::unnest(c(nb, wt)) ## # A tibble: 420 × 3 ##        i    nb    wt ##    <int> <int> <dbl> ##  1     1    36 0.25  ##  2     1    37 0.25  ##  3     1    67 0.25  ##  4     1    69 0.25  ##  5     2     7 0.167 ##  6     2    49 0.167 ##  7     2    57 0.167 ##  8     2    58 0.167 ##  9     2    73 0.167 ## 10     2    76 0.167 ## # … with 410 more rows"},{"path":"/reference/st_as_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to an edge lines object — st_as_edges","text":"","code":"library(magrittr) guerry %>%   dplyr::mutate(nb = st_contiguity(geometry),          wt = st_weights(nb)) %>%   st_as_edges(nb, wt) #> Simple feature collection with 420 features and 5 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 143129.7 ymin: 1735692 xmax: 983300.8 ymax: 2615768 #> CRS:           NA #> First 10 features: #>    from to i  j        wt                       geometry #> 1     1 36 1 36 0.2500000 LINESTRING (827911.9 212290... #> 2     1 37 1 37 0.2500000 LINESTRING (827911.9 212290... #> 3     1 67 1 67 0.2500000 LINESTRING (827911.9 212290... #> 4     1 69 1 69 0.2500000 LINESTRING (827911.9 212290... #> 5     2  7 2  7 0.1666667 LINESTRING (691725.7 249605... #> 6     2 49 2 49 0.1666667 LINESTRING (691725.7 249605... #> 7     2 57 2 57 0.1666667 LINESTRING (691725.7 249605... #> 8     2 58 2 58 0.1666667 LINESTRING (691725.7 249605... #> 9     2 73 2 73 0.1666667 LINESTRING (691725.7 249605... #> 10    2 76 2 76 0.1666667 LINESTRING (691725.7 249605..."},{"path":"/reference/st_as_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an sfnetwork — st_as_graph","title":"Create an sfnetwork — st_as_graph","text":"Given sf sfc object neighbor weights lists, create sfnetwork object.","code":""},{"path":"/reference/st_as_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an sfnetwork — st_as_graph","text":"","code":"st_as_graph(x, nb, wt)  # S3 method for sf st_as_graph(x, nb, wt)  # S3 method for sfc st_as_graph(x, nb, wt)"},{"path":"/reference/st_as_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an sfnetwork — st_as_graph","text":"x object class sf sfc. nb neighbor list. x class sf, unquote named column. x class sfc, object class nb created st_contiguity(). wt optional. weights list generated st_weights().  . x class sf, unquote named column. x class sfc, weights list .","code":""},{"path":[]},{"path":"/reference/st_as_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an sfnetwork — st_as_graph","text":"","code":"library(magrittr) guerry_nb %>%   st_as_graph(nb, wt) #> Checking if spatial network structure is valid... #> Spatial network structure is valid #> # A sfnetwork with 85 nodes and 420 edges #> # #> # CRS:  NA  #> # #> # A directed simple graph with 1 component with spatially explicit edges #> # #> # Node Data:     85 × 30 (active) #> # Geometry type: POINT #> # Dimension:     XY #> # Bounding box:  xmin: 143129.7 ymin: 1735692 xmax: 983300.8 ymax: 2615768 #>   i     code_dept count ave_id_geo  dept region department crime_pers crime_prop #>   <chr> <fct>     <dbl>      <dbl> <int> <fct>  <fct>           <int>      <int> #> 1 1     01            1         49     1 E      Ain             28870      15890 #> 2 2     02            1        812     2 N      Aisne           26226       5521 #> 3 3     03            1       1418     3 C      Allier          26747       7925 #> 4 4     04            1       1603     4 E      Basses-Al…      12935       7289 #> 5 5     05            1       1802     5 E      Hautes-Al…      17488       8174 #> 6 6     07            1       2249     7 S      Ardeche          9474      10263 #> # … with 79 more rows, and 21 more variables: literacy <int>, donations <int>, #> #   infants <int>, suicides <int>, main_city <ord>, wealth <int>, #> #   commerce <int>, clergy <int>, crime_parents <int>, infanticide <int>, #> #   donation_clergy <int>, lottery <int>, desertion <int>, instruction <int>, #> #   prostitutes <int>, distance <dbl>, area <int>, pop1831 <dbl>, #> #   geometry <POINT>, nb <nb>, wt <list> #> # #> # Edge Data:     420 × 6 #> # Geometry type: LINESTRING #> # Dimension:     XY #> # Bounding box:  xmin: 143129.7 ymin: 1735692 xmax: 983300.8 ymax: 2615768 #>    from    to i     j        wt                             geometry #>   <int> <int> <chr> <chr> <dbl>                         <LINESTRING> #> 1     1    36 1     36     0.25   (827911.9 2122906, 855919 2037343) #> 2     1    37 1     37     0.25 (827911.9 2122906, 862938.6 2202980) #> 3     1    67 1     67     0.25 (827911.9 2122906, 776985.9 2100624) #> # … with 417 more rows"},{"path":"/reference/st_as_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a node point object — st_as_nodes","title":"Convert to a node point object — st_as_nodes","text":"Given geometry neighbor list, creates sf object used nodes sfnetworks::sfnetwork(). provided geometry polygon, sf::st_point_on_surface() used create node point.","code":""},{"path":"/reference/st_as_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a node point object — st_as_nodes","text":"","code":"st_as_nodes(x, nb)  # S3 method for sf st_as_nodes(x, nb)  # S3 method for sfc st_as_nodes(x, nb)"},{"path":"/reference/st_as_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a node point object — st_as_nodes","text":"x object class sf sfc. nb neighbor list. x class sf, unquote named column. x class sfc, object class nb created st_contiguity().","code":""},{"path":"/reference/st_as_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a node point object — st_as_nodes","text":"object class sf POINT geometry.","code":""},{"path":"/reference/st_as_nodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to a node point object — st_as_nodes","text":"st_as_node() adds row based attribute \"region.id\" nb object. nb object created sfdep, values always row indexes.","code":""},{"path":"/reference/st_as_nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a node point object — st_as_nodes","text":"","code":"library(magrittr) guerry %>%   dplyr::transmute(nb = st_contiguity(geometry)) %>%   st_as_nodes(nb) #> Simple feature collection with 85 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 143129.7 ymin: 1735692 xmax: 983300.8 ymax: 2615768 #> CRS:           NA #> # A tibble: 85 × 3 #>    i     nb                  geometry #>  * <chr> <nb>                 <POINT> #>  1 1     <int [4]> (827911.9 2122906) #>  2 2     <int [6]> (691725.7 2496059) #>  3 3     <int [6]> (663520.4 2152678) #>  4 4     <int [4]> (908864.9 1915755) #>  5 5     <int [3]> (916568.3 1968490) #>  6 6     <int [7]> (763314.4 1981848) #>  7 7     <int [3]> (771848.4 2525094) #>  8 8     <int [3]> (524182.3 1771794) #>  9 9     <int [5]> (737124.7 2370552) #> 10 10    <int [5]> (614404.6 1783524) #> # … with 75 more rows"},{"path":"/reference/st_block_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Block Contiguity for Spatial Regimes — st_block_nb","title":"Create Block Contiguity for Spatial Regimes — st_block_nb","text":"libpysal write \"block contiguity structures relevant defining neighbor relations based membership regime. example, counties belonging state defined neighbors, analysis counties US.\" Source: libpysal","code":""},{"path":"/reference/st_block_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Block Contiguity for Spatial Regimes — st_block_nb","text":"","code":"st_block_nb(regime, id = 1:length(regime), diag = FALSE)"},{"path":"/reference/st_block_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Block Contiguity for Spatial Regimes — st_block_nb","text":"regime column identifying spatial regime element id belongs id column identifying unique observations diag default FALSE. TRUE, includes diagonal element / self.","code":""},{"path":"/reference/st_block_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Block Contiguity for Spatial Regimes — st_block_nb","text":"object class nb. diag = TRUE attribute self.included = TRUE.","code":""},{"path":"/reference/st_block_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Block Contiguity for Spatial Regimes — st_block_nb","text":"","code":"id <- guerry$code_dept regime <- guerry$region st_block_nb(regime, id) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 1360  #> Percentage nonzero weights: 18.82353  #> Average number of links: 16"},{"path":"/reference/st_cardinalties.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate neighbor cardinalities — st_cardinalties","title":"Calculate neighbor cardinalities — st_cardinalties","text":"Identify cardinality neighbor object. Utilizes spdep::card() objects class nb, otherwise returns lengths(nb).","code":""},{"path":"/reference/st_cardinalties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate neighbor cardinalities — st_cardinalties","text":"","code":"st_cardinalties(nb)"},{"path":"/reference/st_cardinalties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate neighbor cardinalities — st_cardinalties","text":"nb neighbor list object created st_neighbors().","code":""},{"path":"/reference/st_cardinalties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate neighbor cardinalities — st_cardinalties","text":"integer vector length nb.","code":""},{"path":[]},{"path":"/reference/st_cardinalties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate neighbor cardinalities — st_cardinalties","text":"","code":"nb <- st_contiguity(sf::st_geometry(guerry)) st_cardinalties(nb) #>  [1] 4 6 6 4 3 7 3 3 5 5 7 3 3 6 5 5 6 6 7 3 6 7 2 5 6 6 2 6 6 6 4 4 6 6 5 6 5 4 #> [39] 6 7 5 4 7 6 6 5 8 4 6 6 5 4 5 4 2 6 3 6 6 2 6 3 3 2 4 2 4 5 7 6 2 3 8 6 5 5 #> [77] 5 6 3 6 4 6 6 6 5"},{"path":"/reference/st_complete_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Neighbors as Complete Graph — st_complete_nb","title":"Create Neighbors as Complete Graph — st_complete_nb","text":"Create neighbors list every element related every element. creates complete graph.","code":""},{"path":"/reference/st_complete_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Neighbors as Complete Graph — st_complete_nb","text":"","code":"st_complete_nb(n_elements, diag = FALSE)"},{"path":"/reference/st_complete_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Neighbors as Complete Graph — st_complete_nb","text":"n_elements number observations create neighbors list diag default FALSE. TRUE, includes diagonal element / self.","code":""},{"path":"/reference/st_complete_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Neighbors as Complete Graph — st_complete_nb","text":"neighbors list representing complete graph.","code":""},{"path":"/reference/st_complete_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Neighbors as Complete Graph — st_complete_nb","text":"","code":"st_complete_nb(5) #> Neighbour list object: #> Number of regions: 5  #> Number of nonzero links: 20  #> Percentage nonzero weights: 80  #> Average number of links: 4"},{"path":"/reference/st_contiguity.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify polygon neighbors — st_contiguity","title":"Identify polygon neighbors — st_contiguity","text":"Given sf geometry type POLYGON MULTIPOLYGON identify contiguity based neighbors.","code":""},{"path":"/reference/st_contiguity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify polygon neighbors — st_contiguity","text":"","code":"st_contiguity(x, queen = TRUE, ...)"},{"path":"/reference/st_contiguity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify polygon neighbors — st_contiguity","text":"x sf sfc object. queen default TRUE. see ?spdep::poly2nb ... additional arguments passed spdep::poly2nb()","code":""},{"path":"/reference/st_contiguity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify polygon neighbors — st_contiguity","text":"list class nb","code":""},{"path":"/reference/st_contiguity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify polygon neighbors — st_contiguity","text":"Utilizes spdep::poly2nb()","code":""},{"path":[]},{"path":"/reference/st_contiguity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify polygon neighbors — st_contiguity","text":"","code":"# on basic polygons geo <- sf::st_geometry(guerry) st_contiguity(geo) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 420  #> Percentage nonzero weights: 5.813149  #> Average number of links: 4.941176   # in a pipe library(magrittr) guerry %>%   dplyr::mutate(nb = st_contiguity(geometry), .before = 1) #> Simple feature collection with 85 features and 27 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 28 #>    nb        code_dept count ave_id_geo  dept region department   crime_pers #>  * <nb>      <fct>     <dbl>      <dbl> <int> <fct>  <fct>             <int> #>  1 <int [4]> 01            1         49     1 E      Ain               28870 #>  2 <int [6]> 02            1        812     2 N      Aisne             26226 #>  3 <int [6]> 03            1       1418     3 C      Allier            26747 #>  4 <int [4]> 04            1       1603     4 E      Basses-Alpes      12935 #>  5 <int [3]> 05            1       1802     5 E      Hautes-Alpes      17488 #>  6 <int [7]> 07            1       2249     7 S      Ardeche            9474 #>  7 <int [3]> 08            1      35395     8 N      Ardennes          35203 #>  8 <int [3]> 09            1       2526     9 S      Ariege             6173 #>  9 <int [5]> 10            1      34410    10 E      Aube              19602 #> 10 <int [5]> 11            1       2807    11 S      Aude              15647 #> # … with 75 more rows, and 20 more variables: crime_prop <int>, literacy <int>, #> #   donations <int>, infants <int>, suicides <int>, main_city <ord>, #> #   wealth <int>, commerce <int>, clergy <int>, crime_parents <int>, #> #   infanticide <int>, donation_clergy <int>, lottery <int>, desertion <int>, #> #   instruction <int>, prostitutes <int>, distance <dbl>, area <int>, #> #   pop1831 <dbl>, geometry <MULTIPOLYGON>"},{"path":"/reference/st_dist_band.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbors from a distance band — st_dist_band","title":"Neighbors from a distance band — st_dist_band","text":"Creates neighbors based distance band. default, creates distance band maximum distance k-nearest neighbors k = 1 (critical threshold) ensure regions missing neighbors.","code":""},{"path":"/reference/st_dist_band.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbors from a distance band — st_dist_band","text":"","code":"st_dist_band(geometry, lower = 0, upper = critical_threshold(geometry), ...)"},{"path":"/reference/st_dist_band.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighbors from a distance band — st_dist_band","text":"geometry sf sfc object. lower lower threshold distance band. recommended keep 0. upper upper threshold distance band. default set critical threshold using critical_threshold() ensuring region minimum one neighbor. ... Passed spdep::dnearneigh().","code":""},{"path":"/reference/st_dist_band.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighbors from a distance band — st_dist_band","text":"list class nb","code":""},{"path":[]},{"path":"/reference/st_dist_band.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neighbors from a distance band — st_dist_band","text":"","code":"geo <- sf::st_geometry(guerry) st_dist_band(geo, upper = critical_threshold(geo)) #> ! Polygon provided. Using point on surface. #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 274  #> Percentage nonzero weights: 3.792388  #> Average number of links: 3.223529"},{"path":"/reference/st_inverse_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate inverse distance weights — st_inverse_distance","title":"Calculate inverse distance weights — st_inverse_distance","text":"neighbor list sf geometry column, calculate inverse distance weight.","code":""},{"path":"/reference/st_inverse_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate inverse distance weights — st_inverse_distance","text":"","code":"st_inverse_distance(nb, geometry, scale = 100, alpha = 1)"},{"path":"/reference/st_inverse_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate inverse distance weights — st_inverse_distance","text":"nb neighbors list object e.g. created st_knn() st_contiguity() geometry sf geometry scale default 100.value scale distances exponentiating alpha alpha default 1. Set 2 gravity weights.","code":""},{"path":"/reference/st_inverse_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate inverse distance weights — st_inverse_distance","text":"list element numeric vector","code":""},{"path":"/reference/st_inverse_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate inverse distance weights — st_inverse_distance","text":"inverse distance formula \\(w_{ij} = 1 / d_{ij}^\\alpha\\)","code":""},{"path":[]},{"path":"/reference/st_inverse_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate inverse distance weights — st_inverse_distance","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) wts <- st_inverse_distance(nb, geo) #> ! Polygon provided. Using point on surface. head(wts, 3) #> [[1]] #> [1] 0.001110733 0.001144174 0.001798959 0.001166951 #>  #> [[2]] #> [1] 0.0011734145 0.0013168726 0.0007953086 0.0011521100 0.0009777799 #> [6] 0.0009476921 #>  #> [[3]] #> [1] 0.0011701250 0.0010803469 0.0010350414 0.0011362283 0.0015060218 #> [6] 0.0008947445 #>  wts <- st_inverse_distance(nb, geo, scale = 10000) #> ! Polygon provided. Using point on surface. head(wts, 3) #> [[1]] #> [1] 0.1110733 0.1144174 0.1798959 0.1166951 #>  #> [[2]] #> [1] 0.11734145 0.13168726 0.07953086 0.11521100 0.09777799 0.09476921 #>  #> [[3]] #> [1] 0.11701250 0.10803469 0.10350414 0.11362283 0.15060218 0.08947445 #>"},{"path":"/reference/st_inverse_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Inverse Distance Bands — st_inverse_weights","title":"Calculate Inverse Distance Bands — st_inverse_weights","text":"Calculate Inverse Distance Bands","code":""},{"path":"/reference/st_inverse_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Inverse Distance Bands — st_inverse_weights","text":"","code":"st_inverse_weights(x, nb, scale = 100, threshold = NULL)"},{"path":"/reference/st_inverse_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Inverse Distance Bands — st_inverse_weights","text":"x Spatial points. Typically geometry column sf object. nb nb neighbor list created st_knn(x, k = 1). scale scaling factor use calculating inverse distance band. threshold critical threshold use distance band.","code":""},{"path":"/reference/st_inverse_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Inverse Distance Bands — st_inverse_weights","text":"See implementation details . distance band based weights see .","code":""},{"path":[]},{"path":"/reference/st_kernel_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Kernel Weights — st_kernel_weight","title":"Calculate Kernel Weights — st_kernel_weight","text":"Calculate Kernel Weights","code":""},{"path":"/reference/st_kernel_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Kernel Weights — st_kernel_weight","text":"","code":"st_kernel_weight(x, nb, kernel = \"uniform\", threshold = NULL)"},{"path":"/reference/st_kernel_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Kernel Weights — st_kernel_weight","text":"x Spatial points. Typically geometry column sf object. nb nb neighbor list created st_knn(x, k = 1). kernel One \"uniform\", \"gaussian\",  \"triangular\", \"epanechnikov\", \"quartic\". threshold critical threshold use distance band.","code":""},{"path":"/reference/st_kernel_weight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Kernel Weights — st_kernel_weight","text":"default st_kernel_weight() utilizes critical threshold maximum neighbor distance. desired, critical threshold can specified manually. threshold passed underlying kernel. See kernels .","code":""},{"path":[]},{"path":"/reference/st_kernel_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Kernel Weights — st_kernel_weights","title":"Calculate Kernel Weights — st_kernel_weights","text":"Create weights list using kernel function.","code":""},{"path":"/reference/st_kernel_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Kernel Weights — st_kernel_weights","text":"","code":"st_kernel_weights(   nb,   geometry,   kernel = \"uniform\",   threshold = critical_threshold(geometry),   adaptive = FALSE,   self_kernel = FALSE )"},{"path":"/reference/st_kernel_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Kernel Weights — st_kernel_weights","text":"nb object class nb e.g. created st_contiguity() st_knn(). geometry geometry sf object. kernel One \"uniform\", \"gaussian\",  \"triangular\", \"epanechnikov\", \"quartic\". See kernels . threshold scaling threshold used calculating adaptive default FALSE. TRUE uses maximum neighbor distance region threshold. Suppresses threshold argument. self_kernel default FALSE. TRUE applies kernel function observed region.","code":""},{"path":"/reference/st_kernel_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Kernel Weights — st_kernel_weights","text":"list element numeric vector.","code":""},{"path":"/reference/st_kernel_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Kernel Weights — st_kernel_weights","text":"default st_kernel_weight() utilizes critical threshold maximum neighbor distance using critical_threshold(). desired, critical threshold can specified manually. threshold passed underlying kernel.","code":""},{"path":[]},{"path":"/reference/st_kernel_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Kernel Weights — st_kernel_weights","text":"","code":"geometry <- sf::st_geometry(guerry) nb <- st_contiguity(geometry) nb <- include_self(nb) res <- st_kernel_weights(nb, geometry) #> ! Polygon provided. Using point on surface. head(res, 3) #> [[1]] #> [1] 1.0 0.5 0.5 0.5 0.5 #>  #> [[2]] #> [1] 1.0 0.5 0.5 0.5 0.5 0.5 0.5 #>  #> [[3]] #> [1] 1.0 0.5 0.5 0.5 0.5 0.5 0.5 #>"},{"path":"/reference/st_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate K-Nearest Neighbors — st_knn","title":"Calculate K-Nearest Neighbors — st_knn","text":"Identifies k nearest neighbors given point geometry. polygon geometry provided, centroids polygon used warning emitted.","code":""},{"path":"/reference/st_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate K-Nearest Neighbors — st_knn","text":"","code":"st_knn(x, k = 1, symmetric = FALSE, ...)"},{"path":"/reference/st_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate K-Nearest Neighbors — st_knn","text":"x sf sfc object. k number nearest neighbours returned symmetric default FALSE. Whether force output neighbours symmetric. ... additional arguments passed knearneigh().","code":""},{"path":"/reference/st_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate K-Nearest Neighbors — st_knn","text":"list class nb","code":""},{"path":"/reference/st_knn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate K-Nearest Neighbors — st_knn","text":"function utilizes spdep::knearneigh() spdep::knn2nb().","code":""},{"path":[]},{"path":"/reference/st_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate K-Nearest Neighbors — st_knn","text":"","code":"st_knn(sf::st_geometry(guerry), k = 8) #> ! Polygon provided. Using point on surface. #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 680  #> Percentage nonzero weights: 9.411765  #> Average number of links: 8  #> Non-symmetric neighbours list"},{"path":"/reference/st_lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate spatial lag — st_lag","title":"Calculate spatial lag — st_lag","text":"Calculates spatial lag numeric variable given neighbor weights list.","code":""},{"path":"/reference/st_lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate spatial lag — st_lag","text":"","code":"st_lag(x, nb, wt, na_ok = FALSE, allow_zero = NULL, ...)"},{"path":"/reference/st_lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate spatial lag — st_lag","text":"x numeric vector nb neighbor list object created st_neighbors(). wt weights list created st_weights(). na_ok Default FALSE. , TRUE missing values return lagged NA. allow_zero TRUE, assigns zero lagged value zone without neighbors. ... See ?spdep::lag.listw .","code":""},{"path":"/reference/st_lag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate spatial lag — st_lag","text":"numeric vector length x","code":""},{"path":[]},{"path":"/reference/st_lag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate spatial lag — st_lag","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) wt <- st_weights(nb)  st_lag(guerry$crime_pers, nb, wt) #>  [1] 23047.50 26919.67 26195.50 14401.25 15038.67 15749.00 22111.67 13672.33 #>  [9] 22859.20 11475.20 12200.14 13278.67 24734.00 11752.83 17992.60 21974.40 #> [17] 26711.00 19344.00 23696.71 25108.67 21643.17 18306.00 24280.00 14451.60 #> [25] 21047.67 21421.33 25961.50 10869.83 13415.67 17172.17 20238.25 12504.25 #> [33] 26723.00 21772.83 26462.20 19252.00 24683.20 20607.25 24412.00 19373.71 #> [41] 16000.20 23993.25 20337.86 16818.67 17113.83 13013.00 22133.00 24093.75 #> [49] 25661.67 22190.17 29030.00 16951.00 24509.00 24982.75 19491.50 24176.00 #> [57] 27639.67 21274.33 24510.33 30166.00 23459.00 16184.00 18002.00 10910.00 #> [65] 16251.25 15572.00 25884.25 23020.60 26495.00 24690.50 17339.00 25522.33 #> [73] 18970.00 19701.83 21841.00 24520.40 14025.80 14565.17 13306.67 12579.00 #> [81] 21529.50 23474.50 24373.17 19900.50 23373.60"},{"path":"/reference/st_nb_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to neighbors — st_nb_apply","title":"Apply a function to neighbors — st_nb_apply","text":"Sometimes one may want create custom lag variables create neighborhood level metric may defined yet. st_nb_apply() enables apply function observation's (xi) neighbors (xij).","code":""},{"path":"/reference/st_nb_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to neighbors — st_nb_apply","text":"","code":"st_nb_apply(x, nb, wt, .f, suffix = \"dbl\", ...)"},{"path":"/reference/st_nb_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to neighbors — st_nb_apply","text":"x vector used neighbor xij values. nb neighbor list object created st_neighbors(). wt weights list created st_weights(). .f function definition. three default objects can used inside function definition: .xij: neighbor values x ith observation. simply subset x based corresponding nb list values element. .nb: neighbor positions. .wt: neighbor weights value. three function arguments omitted .f, dots (...) must supplied. suffix map variant use. Options \"dbl\", \"int\", \"lgl\", \"chr\", \"list\". ... arguments pass .f","code":""},{"path":"/reference/st_nb_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to neighbors — st_nb_apply","text":"vector list length x.","code":""},{"path":"/reference/st_nb_apply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function to neighbors — st_nb_apply","text":"example calculates spatial lag using st_nb_apply() st_lag() illustrate can apply functions neighbors. Currently questioning use case. find_xj() now exported may negate need function.","code":""},{"path":"/reference/st_nb_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to neighbors — st_nb_apply","text":"","code":"library(magrittr) guerry %>%   dplyr::transmute(     nb = st_contiguity(geometry),     wt = st_weights(nb),     lag_apply = st_nb_apply(       crime_pers, nb, wt,       .f = function(.xij, .wt, ...) sum(.xij *.wt)     ),     lag = st_lag(crime_pers, nb, wt)   ) #> Simple feature collection with 85 features and 4 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 5 #>    nb        wt        lag_apply    lag                                 geometry #>  * <nb>      <list>        <dbl>  <dbl>                           <MULTIPOLYGON> #>  1 <int [4]> <dbl [4]>    23048. 23048. (((801150 2092615, 800669 2093190, 8006… #>  2 <int [6]> <dbl [6]>    26920. 26920. (((729326 2521619, 729320 2521230, 7292… #>  3 <int [6]> <dbl [6]>    26195. 26195. (((710830 2137350, 711746 2136617, 7124… #>  4 <int [4]> <dbl [4]>    14401. 14401. (((882701 1920024, 882408 1920733, 8817… #>  5 <int [3]> <dbl [3]>    15039. 15039. (((886504 1922890, 885733 1922978, 8854… #>  6 <int [7]> <dbl [7]>    15749  15749  (((747008 1925789, 746630 1925762, 7457… #>  7 <int [3]> <dbl [3]>    22112. 22112. (((818893 2514767, 818614 2514515, 8179… #>  8 <int [3]> <dbl [3]>    13672. 13672. (((509103 1747787, 508820 1747513, 5081… #>  9 <int [5]> <dbl [5]>    22859. 22859. (((775400 2345600, 775068 2345397, 7735… #> 10 <int [5]> <dbl [5]>    11475. 11475. (((626230 1810121, 626269 1810496, 6274… #> # … with 75 more rows"},{"path":"/reference/st_nb_band.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbors from a distance band — st_nb_band","title":"Neighbors from a distance band — st_nb_band","text":"Creates neighbors based distance band.","code":""},{"path":"/reference/st_nb_band.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbors from a distance band — st_nb_band","text":"","code":"st_nb_band(x, lower = 0, upper = 0.01, ...)"},{"path":"/reference/st_nb_band.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighbors from a distance band — st_nb_band","text":"x sf sfc object. lower lower threshold distance band. recommended keep 0. upper upper threshold distance band. ... Passed spdep::dnearneigh().","code":""},{"path":[]},{"path":"/reference/st_nb_band.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neighbors from a distance band — st_nb_band","text":"","code":"st_nb_band(sf::st_geometry(guerry), upper = 97000) #> ! Polygon provided. Using centroid. #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 314  #> Percentage nonzero weights: 4.346021  #> Average number of links: 3.694118"},{"path":"/reference/st_nb_dists.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate neighbor distances — st_nb_dists","title":"Calculate neighbor distances — st_nb_dists","text":"nb list point geometry, return list distances observation's neighbors list.","code":""},{"path":"/reference/st_nb_dists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate neighbor distances — st_nb_dists","text":"","code":"st_nb_dists(x, nb, longlat = NULL)"},{"path":"/reference/st_nb_dists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate neighbor distances — st_nb_dists","text":"x object class sfc. nb neighbor list example created st_contiguity() longlat TRUE point coordinates longitude-latitude decimal degrees, case distances measured kilometers. See ?spdep::nbdists() .","code":""},{"path":"/reference/st_nb_dists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate neighbor distances — st_nb_dists","text":"list element numeric vector.","code":""},{"path":"/reference/st_nb_dists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate neighbor distances — st_nb_dists","text":"Utilizes spdep::nbdists() distance calculation.","code":""},{"path":[]},{"path":"/reference/st_nb_dists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate neighbor distances — st_nb_dists","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) dists <- st_nb_dists(geo, nb) #> ! Polygon provided. Using point on surface.  head(dists) #> [[1]] #> [1] 90030.63 87399.28 55587.69 85693.43 #>  #> [[2]] #> [1]  85221.38  75937.49 125737.35  86797.26 102272.51 105519.50 #>  #> [[3]] #> [1]  85460.95  92562.86  96614.50  88010.48  66400.10 111763.74 #>  #> [[4]] #> [1] 53294.18 98250.20 83762.06 83973.87 #>  #> [[5]] #> [1] 53294.18 86812.56 91755.83 #>  #> [[6]] #> [1]  67062.90  96221.69 107959.75 108017.90  54530.02  75976.27 110723.87 #>"},{"path":"/reference/st_nb_lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Pure Higher Order Neighbors — st_nb_lag","title":"Pure Higher Order Neighbors — st_nb_lag","text":"Identify higher order neighbors neighbor list. order must greater 1. order equals 2 neighbors neighbors list returned forth. See Anselin's slides example.","code":""},{"path":"/reference/st_nb_lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pure Higher Order Neighbors — st_nb_lag","text":"","code":"st_nb_lag(nb, order)"},{"path":"/reference/st_nb_lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pure Higher Order Neighbors — st_nb_lag","text":"nb neighbor list object created st_contiguity(). order order neighbors.","code":""},{"path":"/reference/st_nb_lag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pure Higher Order Neighbors — st_nb_lag","text":"list class nb","code":""},{"path":"/reference/st_nb_lag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pure Higher Order Neighbors — st_nb_lag","text":"Utilizes spdep::nblag()","code":""},{"path":[]},{"path":"/reference/st_nb_lag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pure Higher Order Neighbors — st_nb_lag","text":"","code":"nb <- st_contiguity(sf::st_geometry(guerry)) st_nb_lag(nb, 3) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 988  #> Percentage nonzero weights: 13.67474  #> Average number of links: 11.62353"},{"path":"/reference/st_nb_lag_cumul.html","id":null,"dir":"Reference","previous_headings":"","what":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"Creates encompassing neighbor list order specified. example, order 2 result contains 1st 2nd order neighbors.","code":""},{"path":"/reference/st_nb_lag_cumul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"","code":"st_nb_lag_cumul(nb, order)"},{"path":"/reference/st_nb_lag_cumul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"nb neighbor list object created st_contiguity(). order order neighbors.","code":""},{"path":"/reference/st_nb_lag_cumul.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"list class nb","code":""},{"path":"/reference/st_nb_lag_cumul.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"Utilizes spdep::nblag_cumul()","code":""},{"path":[]},{"path":"/reference/st_nb_lag_cumul.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"","code":"nb <- st_contiguity(sf::st_geometry(guerry)) st_nb_lag_cumul(nb, 3) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 2164  #> Percentage nonzero weights: 29.95156  #> Average number of links: 25.45882"},{"path":"/reference/st_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate spatial weights — st_weights","title":"Calculate spatial weights — st_weights","text":"Calculate polygon spatial weights nb list. See spdep::nb2listw() details.","code":""},{"path":"/reference/st_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate spatial weights — st_weights","text":"","code":"st_weights(nb, style = \"W\", allow_zero = NULL, ...)"},{"path":"/reference/st_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate spatial weights — st_weights","text":"nb neighbor list object created st_neighbors(). style Default \"W\" row standardized weights. value can also \"B\", \"C\", \"U\", \"minmax\", \"S\". See spdep::nb2listw() details. allow_zero TRUE, assigns zero lagged value zone without neighbors. ... additional arguments passed spdep::nb2listw().","code":""},{"path":"/reference/st_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate spatial weights — st_weights","text":"list element numeric vector","code":""},{"path":"/reference/st_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate spatial weights — st_weights","text":"hood, st_weights() creates listw object extracts weights elements neighbours element already--presumably--already existent neighbors list already created. listw objects recreated using recreate_listw() calculating statistics.","code":""},{"path":[]},{"path":"/reference/st_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate spatial weights — st_weights","text":"","code":"library(magrittr) guerry %>%  dplyr::mutate(nb = st_contiguity(geometry),                wt = st_weights(nb),                .before = 1) #> Simple feature collection with 85 features and 28 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 29 #>    nb        wt    code_dept count ave_id_geo  dept region department crime_pers #>  * <nb>      <lis> <fct>     <dbl>      <dbl> <int> <fct>  <fct>           <int> #>  1 <int [4]> <dbl… 01            1         49     1 E      Ain             28870 #>  2 <int [6]> <dbl… 02            1        812     2 N      Aisne           26226 #>  3 <int [6]> <dbl… 03            1       1418     3 C      Allier          26747 #>  4 <int [4]> <dbl… 04            1       1603     4 E      Basses-Al…      12935 #>  5 <int [3]> <dbl… 05            1       1802     5 E      Hautes-Al…      17488 #>  6 <int [7]> <dbl… 07            1       2249     7 S      Ardeche          9474 #>  7 <int [3]> <dbl… 08            1      35395     8 N      Ardennes        35203 #>  8 <int [3]> <dbl… 09            1       2526     9 S      Ariege           6173 #>  9 <int [5]> <dbl… 10            1      34410    10 E      Aube            19602 #> 10 <int [5]> <dbl… 11            1       2807    11 S      Aude            15647 #> # … with 75 more rows, and 20 more variables: crime_prop <int>, literacy <int>, #> #   donations <int>, infants <int>, suicides <int>, main_city <ord>, #> #   wealth <int>, commerce <int>, clergy <int>, crime_parents <int>, #> #   infanticide <int>, donation_clergy <int>, lottery <int>, desertion <int>, #> #   instruction <int>, prostitutes <int>, distance <dbl>, area <int>, #> #   pop1831 <dbl>, geometry <MULTIPOLYGON>  # using geometry column directly nb <- st_contiguity(guerry$geometry) wt <- st_weights(nb) wt[1:3] #> [[1]] #> [1] 0.25 0.25 0.25 0.25 #>  #> [[2]] #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 #>  #> [[3]] #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 #>"},{"path":"/reference/std_dev_ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation Standard Deviational Ellipse — std_dev_ellipse","title":"Calculation Standard Deviational Ellipse — std_dev_ellipse","text":"sf object containing points, calculate standard deviational ellipse.","code":""},{"path":"/reference/std_dev_ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation Standard Deviational Ellipse — std_dev_ellipse","text":"","code":"std_dev_ellipse(geometry)"},{"path":"/reference/std_dev_ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation Standard Deviational Ellipse — std_dev_ellipse","text":"geometry sfc object. polygon, uses sf::st_point_on_surface().","code":""},{"path":"/reference/std_dev_ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation Standard Deviational Ellipse — std_dev_ellipse","text":"sf object three columns sx: major axis radius CRS units, sy: minor axis radius CRS units, theta: degree rotation ellipse. sf object's geometry center mean point.","code":""},{"path":"/reference/std_dev_ellipse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation Standard Deviational Ellipse — std_dev_ellipse","text":"bulk function derived archived CRAN package aspace version 3.2.0.","code":""},{"path":"/reference/std_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate standard distance — std_distance","title":"Calculate standard distance — std_distance","text":"Calculate standard distance","code":""},{"path":"/reference/std_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate standard distance — std_distance","text":"","code":"std_distance(geometry)"},{"path":"/reference/std_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate standard distance — std_distance","text":"geometry sfc object. polygon, uses sf::st_point_on_surface().","code":""},{"path":"/reference/sub-.spacetime.html","id":null,"dir":"Reference","previous_headings":"","what":"TODO update times attribute when subset and data is active — [.spacetime","title":"TODO update times attribute when subset and data is active — [.spacetime","text":"TODO update times attribute subset data active","code":""},{"path":"/reference/sub-.spacetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TODO update times attribute when subset and data is active — [.spacetime","text":"","code":"# S3 method for spacetime [(x, ...)"},{"path":"/reference/szero.html","id":null,"dir":"Reference","previous_headings":"","what":"Global sum of weights — szero","title":"Global sum of weights — szero","text":"Calculate global sum weights","code":""},{"path":"/reference/szero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global sum of weights — szero","text":"","code":"szero(wt)"},{"path":"/reference/szero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global sum of weights — szero","text":"wt weights list—.e. created st_weights()","code":""},{"path":"/reference/szero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global sum of weights — szero","text":"scalar double","code":""},{"path":"/reference/wt_as_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert neighbor or weights list to matrix — wt_as_matrix","title":"Convert neighbor or weights list to matrix — wt_as_matrix","text":"Given nb list weights list, convert matrix.","code":""},{"path":"/reference/wt_as_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert neighbor or weights list to matrix — wt_as_matrix","text":"","code":"wt_as_matrix(nb, wt)  nb_as_matrix(nb)"},{"path":"/reference/wt_as_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert neighbor or weights list to matrix — wt_as_matrix","text":"nb neighbor list—.e. created st_contiguity(). wt weights list—.e. created st_weights()","code":""},{"path":"/reference/wt_as_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert neighbor or weights list to matrix — wt_as_matrix","text":"Returns n x n matrix","code":""},{"path":"/reference/wt_as_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert neighbor or weights list to matrix — wt_as_matrix","text":"","code":"# make a grid g <- sf::st_make_grid(   cellsize = c(10, 10),   offset = c(0, 0),   n = c(2, 2) )  # create neighbors nb <- st_contiguity(g)  # cast to matrix nb_as_matrix(nb) #>   [,1] [,2] [,3] [,4] #> 1    0    1    1    1 #> 2    1    0    1    1 #> 3    1    1    0    1 #> 4    1    1    1    0 #> attr(,\"call\") #> spdep::nb2mat(neighbours = nb, style = \"B\")  # create weights wt <- st_weights(nb)  # cast as matrix wt_as_matrix(nb, wt) #>           [,1]      [,2]      [,3]      [,4] #> [1,] 0.0000000 0.3333333 0.3333333 0.3333333 #> [2,] 0.3333333 0.0000000 0.3333333 0.3333333 #> [3,] 0.3333333 0.3333333 0.0000000 0.3333333 #> [4,] 0.3333333 0.3333333 0.3333333 0.0000000"},{"path":"/news/index.html","id":"sfdep-development-version","dir":"Changelog","previous_headings":"","what":"sfdep (development version)","title":"sfdep (development version)","text":"spatial_gini() new global measure pracma now added suggested package center_mean() `center_median() added point pattern analysis tally_jc() returns join count matrix via spdep::joincount.multi() data.frame object st_complete_nb() creates complete graph neighbors set operations neighbor lists nb_union(), nb_intersect(), nb_setdiff() inspired https://pysal.org/libpysal/generated/libpysal.weights.block_weights.html critical_threshold() gains argument k identify minimum number neighbors calculating threshold pct_nonzero() calculates percent non-zero neighbors szero() calculate global sum weights nb_as_matrix() wt_as_matrix() convert neighbor weights lists matrices two new functions include_self() based spdep::include.self() new remove_self() available separately spdep due issue 83 spdep::remove.self(). local_g_perm() returns correct G statistic. Previously returned internal measure. local_gstar() local_gstar_perm() warn self.included = TRUE emerging_hotspot_analysis() implements emerging hotspot analysis spacetime objects see spacetime vignette. global_colocation() global colocation one categorical variable pairwise_colocation() asymmetric colocation subcategories one two categories local_colocation() local CLQ measure functions fast! PRs welcomed improve computation speed. st_kernel_weights() now returns attribute kernel set value kernel argument cond_permute_nb() specifies SIMPLIFY = FALSE internal mapply() call causing errors creating conditionally permuted neighbor lists","code":""},{"path":"/news/index.html","id":"sfdep-010","dir":"Changelog","previous_headings":"","what":"sfdep 0.1.0","title":"sfdep 0.1.0","text":"CRAN release: 2022-04-20 Released CRAN! Sending initial CRAN release","code":""}]
