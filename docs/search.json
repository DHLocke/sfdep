[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to sfdep","title":"Contributing to sfdep","text":"outlines propose change sfdep. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to sfdep","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to sfdep","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"/CONTRIBUTING.html","id":"notes-for-contributing-new-functionality","dir":"","previous_headings":"Bigger changes","what":"Notes for contributing new functionality","title":"Contributing to sfdep","text":"Implementation new functionality first developed work spdep. function relies neighbors weights, function utilize listw object. accepting multiple columns input, accept lists providing multiple columns output, utilize data.frames (tibbles)","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to sfdep","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"JosiahParry/sfdep\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to sfdep","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to sfdep","text":"Please note sfdep project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/spdep-and-pysal.html","id":"global-statistics","dir":"Articles","previous_headings":"","what":"Global Statistics","title":"Comparison to spdep and pysal","text":"Measures global spatial autocorrelation.","code":""},{"path":"/articles/spdep-and-pysal.html","id":"local-indicators-of-spatial-association","dir":"Articles","previous_headings":"","what":"Local Indicators of Spatial Association","title":"Comparison to spdep and pysal","text":"Measures local spatial autocorrelation.","code":""},{"path":"/articles/spdep-and-pysal.html","id":"not-implemented","dir":"Articles","previous_headings":"Local Indicators of Spatial Association","what":"Not implemented","title":"Comparison to spdep and pysal","text":"Functions present Pysal implemented sfdep.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josiah Parry. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parry J (2022). sfdep: Spatial Dependence sf objects. https://sfdep.josiahparry.com, https://github.com/josiahparry/sfdep.","code":"@Manual{,   title = {sfdep: Spatial Dependence for sf objects},   author = {Josiah Parry},   year = {2022},   note = {https://sfdep.josiahparry.com, https://github.com/josiahparry/sfdep}, }"},{"path":"/index.html","id":"sfdep","dir":"","previous_headings":"","what":"Spatial Dependence for sf objects","title":"Spatial Dependence for sf objects","text":"sfdep builds great shoulders spdep package spatial dependence. sfdep creates sf tidyverse friendly interface package well introduces new functionality present spdep. sfdep utilizes list columns extensively make interface possible.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatial Dependence for sf objects","text":"can install development version sfdep like :","code":"remotes::install_github(\"josiahparry/sfdep\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Spatial Dependence for sf objects","text":"three main categories functionality relating geometry neighbors, weights, local indicators spatial association (LISAs).","code":""},{"path":"/index.html","id":"neighbors","dir":"","previous_headings":"Usage","what":"Neighbors","title":"Spatial Dependence for sf objects","text":"fundamental usage find contiguous neighbors polygon. done st_contiguity() , default creates queen weights. rook weights desired, set queen = FALSE. Additional arguments can passed underlying spdep::poly2nb() via .... st_contiguity() creates object class nb used spdep. can identify higher order neighbors st_nb_lag() cumulative higher order neighbors st_nb_lag_cumul(). point geometry neighbor functions st_knn(), st_nb_band(), st_nb_dists().","code":"library(sf) library(sfdep) library(dplyr)  # grab geometry geo <- st_geometry(guerry)  nb <- st_contiguity(geo)  nb #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 420  #> Percentage nonzero weights: 5.813149  #> Average number of links: 4.941176 st_nb_lag(nb, 2) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 756  #> Percentage nonzero weights: 10.46367  #> Average number of links: 8.894118 st_nb_lag_cumul(nb, 2) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 1176  #> Percentage nonzero weights: 16.27682  #> Average number of links: 13.83529"},{"path":"/index.html","id":"weights","dir":"","previous_headings":"Usage","what":"Weights","title":"Spatial Dependence for sf objects","text":"Polygon weights created st_weights() (calls spdep::nb2listw). default row standardized weights. point based weights can created st_kernel_weights() st_inverse_weights().","code":"wt <- st_weights(nb)  wt[1:2] #> [[1]] #> [1] 0.25 0.25 0.25 0.25 #>  #> [[2]] #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667"},{"path":"/index.html","id":"local-indicators-of-spatial-association-lisas","dir":"","previous_headings":"Usage","what":"Local Indicators of Spatial Association (LISAs)","title":"Spatial Dependence for sf objects","text":"LISAs created combination neighbors weights intended used inside dplyr pipeline. worked example calculating spatial lag local moran. calculate spatial lag st_lag(). Given ’ve modified sf object, can visualize ggplot2.  users interested local indicators spatial association (LISA). Utilize local_moran() . local_moran() create data frame column contains number informative variables. example cluster polygon falls based mean, median, pysal calulations. need unnested certain variables hoisted. Create Local Moran data frame column. Visualize .","code":"g <- guerry %>%    mutate(nb = st_contiguity(geometry),          wt = st_weights(nb)) library(ggplot2)  # create spatial lag g %>%    mutate(crime_pers_lag = st_lag(crime_pers, nb, wt)) %>%    ggplot(aes(fill = crime_pers_lag)) +    geom_sf(lwd = 0.2, color = \"black\") +   theme_void() lisa <- g %>%    mutate(moran = local_moran(crime_pers, nb, wt))  pull(lisa, moran) %>%    glimpse() #> Rows: 85 #> Columns: 12 #> $ ii           <dbl> 0.52226452, 0.82801651, 0.80353997, 0.74188966, 0.2311871… #> $ eii          <dbl> -3.208791e-02, -2.043260e-02, -1.234207e-02, -2.512828e-0… #> $ var_ii       <dbl> 0.3770952285, 0.1168682243, 0.1406125409, 0.2311996864, 0… #> $ z_ii         <dbl> 0.9027353, 2.4818617, 2.1757818, 1.5951881, 1.2638730, 1.… #> $ p_ii         <dbl> 0.366666380, 0.013069800, 0.029571578, 0.110670180, 0.206… #> $ p_ii_sim     <dbl> 0.404, 0.008, 0.036, 0.116, 0.216, 0.076, 0.596, 0.112, 0… #> $ p_folded_sim <dbl> 0.202, 0.004, 0.018, 0.058, 0.108, 0.038, 0.298, 0.056, 0… #> $ skewness     <dbl> 0.127783046, 0.052563814, -0.025285602, -0.041532504, -0.… #> $ kurtosis     <dbl> -0.44528862, -0.29716234, 0.06094274, -0.07287383, -0.460… #> $ mean         <fct> High-High, High-High, High-High, Low-Low, Low-Low, Low-Lo… #> $ median       <fct> High-High, High-High, High-High, Low-Low, Low-Low, Low-Lo… #> $ pysal        <fct> High-High, High-High, High-High, Low-Low, Low-Low, Low-Lo… lisa %>%    tidyr::unnest(moran) %>%    ggplot(aes(fill = mean)) +   geom_sf() +   geom_sf(lwd = 0.2, color = \"black\") +   theme_void() +   scale_fill_manual(values = c(\"#1C4769\", \"#24975E\", \"#EACA97\", \"#B20016\"))"},{"path":"/reference/check_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks geometry for polygons. — check_polygon","title":"Checks geometry for polygons. — check_polygon","text":"provided geometry polygon, centroids polygons return using sf::st_centroid()","code":""},{"path":"/reference/check_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks geometry for polygons. — check_polygon","text":"","code":"check_polygon(x)"},{"path":"/reference/check_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks geometry for polygons. — check_polygon","text":"x sfc object","code":""},{"path":"/reference/check_polygon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks geometry for polygons. — check_polygon","text":"","code":"# make sfc object grid <- sf::st_make_grid() ps <- check_polygon(grid) #> Error in check_polygon(grid): could not find function \"check_polygon\" ps #> Error in eval(expr, envir, enclos): object 'ps' not found  # plot for demonstration plot(grid)  plot(check_polygon(grid), add = TRUE, col = \"blue\") #> Error in check_polygon(grid): could not find function \"check_polygon\""},{"path":"/reference/class_modify.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify object classes — class_modify","title":"Modify object classes — class_modify","text":"Appends classes exist object classes. utilized aid adding list class objects created spdep. enables use returned objects within data frames tibbles.","code":""},{"path":"/reference/class_modify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify object classes — class_modify","text":"","code":"class_modify(x, class = \"list\")"},{"path":"/reference/class_modify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify object classes — class_modify","text":"x object modify class character vector classes append object","code":""},{"path":"/reference/cond_permute_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional permutation of neighbors — cond_permute_nb","title":"Conditional permutation of neighbors — cond_permute_nb","text":"Creates conditional permutation neighbors list holding fixed shuffling neighbors.","code":""},{"path":"/reference/cond_permute_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional permutation of neighbors — cond_permute_nb","text":"","code":"cond_permute_nb(nb, seed = NULL)"},{"path":"/reference/cond_permute_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional permutation of neighbors — cond_permute_nb","text":"nb neighbor list. seed default null. value pass set.seed() reproducibily.","code":""},{"path":"/reference/cond_permute_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional permutation of neighbors — cond_permute_nb","text":"","code":"nb <- st_contiguity(guerry) nb[1:5] #> [[1]] #> [1] 36 37 67 69 #>  #> [[2]] #> [1]  7 49 57 58 73 76 #>  #> [[3]] #> [1] 17 21 40 56 61 69 #>  #> [[4]] #> [1]  5 24 79 80 #>  #> [[5]] #> [1]  4 24 36 #>  # conditionally permute neighbors perm_nb <- cond_permute_nb(nb) perm_nb[1:5] #> [[1]] #> [1] 14 76 52 82 #>  #> [[2]] #> [1] 24 48 81 49 74 14 #>  #> [[3]] #> [1] 29 57 23 81 36 79 #>  #> [[4]] #> [1] 22 51 79 10 #>  #> [[5]] #> [1] 36 15 81 #>  # get permuted neighbor weight"},{"path":"/reference/find_xj.html","id":null,"dir":"Reference","previous_headings":"","what":"Idenitfy xj values — find_xj","title":"Idenitfy xj values — find_xj","text":"Find xj values given x neighbors list.","code":""},{"path":"/reference/find_xj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Idenitfy xj values — find_xj","text":"","code":"find_xj(x, nb)"},{"path":"/reference/folded_p_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Folded Simulated P-value — folded_p_sim","title":"Folded Simulated P-value — folded_p_sim","text":"Given observed statistics replicates, calculated simulated folded p value.","code":""},{"path":"/reference/folded_p_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Folded Simulated P-value — folded_p_sim","text":"","code":"folded_p_sim(obs, reps)"},{"path":"/reference/folded_p_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Folded Simulated P-value — folded_p_sim","text":"obs observed values reps matrix","code":""},{"path":"/reference/global_c.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Geary's C — global_c","title":"Compute Geary's C — global_c","text":"Compute Geary's C","code":""},{"path":"/reference/global_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Geary's C — global_c","text":"","code":"global_c(x, nb, wt, allow_zero = NULL)"},{"path":"/reference/global_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Geary's C — global_c","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights().","code":""},{"path":[]},{"path":"/reference/global_c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Geary's C — global_c","text":"","code":"nb <- guerry_nb$nb wt <- guerry_nb$wt x <- guerry_nb$crime_pers global_c(x, nb, wt) #> $C #> [1] 0.5645907 #>  #> $K #> [1] 2.400641 #>"},{"path":"/reference/global_c_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Global C Permutation Test — global_c_perm","title":"Global C Permutation Test — global_c_perm","text":"Global C Permutation Test","code":""},{"path":"/reference/global_c_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global C Permutation Test — global_c_perm","text":"","code":"global_c_perm(   x,   nb,   wt,   nsim = 499,   alternative = \"greater\",   allow_zero = NULL,   ... )"},{"path":"/reference/global_c_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global C Permutation Test — global_c_perm","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). nsim number simulations run. ... additional arguments passed spdep::geary.mc().","code":""},{"path":[]},{"path":"/reference/global_c_perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global C Permutation Test — global_c_perm","text":"","code":"global_c_perm(x, nb, wt) #> Error in attr(wt, \"W\") %||% NA: object 'wt' not found"},{"path":"/reference/global_c_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Global C Test — global_c_test","title":"Global C Test — global_c_test","text":"Global C Test","code":""},{"path":"/reference/global_c_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global C Test — global_c_test","text":"","code":"global_c_test(x, nb, wt, randomization = TRUE, allow_zero = NULL, ...)"},{"path":"/reference/global_c_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global C Test — global_c_test","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). randomization default TRUE. Calculate variance based randomization. FALSE, assumption normality. ... additional arguments passed spdep::moran().","code":""},{"path":[]},{"path":"/reference/global_c_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global C Test — global_c_test","text":"","code":"global_c_test(x, nb, wt) #> Error in attr(wt, \"W\") %||% NA: object 'wt' not found"},{"path":"/reference/global_g_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Getis-Ord Global G — global_g_test","title":"Getis-Ord Global G — global_g_test","text":"Getis-Ord Global G","code":""},{"path":"/reference/global_g_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getis-Ord Global G — global_g_test","text":"","code":"global_g_test(x, nb, wt, alternative = \"greater\", allow_zero = NULL, ...)"},{"path":"/reference/global_g_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getis-Ord Global G — global_g_test","text":"","code":"global_g_test(x, nb, wt) #> Error in attr(wt, \"W\") %||% NA: object 'wt' not found"},{"path":"/reference/global_jc_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Join Count Permutation Test — global_jc_perm","title":"Global Join Count Permutation Test — global_jc_perm","text":"Global Join Count Permutation Test Global Join Count Test","code":""},{"path":"/reference/global_jc_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Join Count Permutation Test — global_jc_perm","text":"","code":"global_jc_perm(   fx,   nb,   wt,   alternative = \"greater\",   nsim = 499,   allow_zero = FALSE,   ... )  global_jc_test(fx, nb, wt, alternative = \"greater\", allow_zero = NULL, ...)"},{"path":"/reference/global_jc_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Join Count Permutation Test — global_jc_perm","text":"fx factor character vector length nb. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). nsim number simulations run. ... additional arguments passed spdep::joincount.test()","code":""},{"path":"/reference/global_jc_perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Join Count Permutation Test — global_jc_perm","text":"","code":"fx <- guerry$region global_jc_perm(fx, nb, wt) #> Error in attr(wt, \"W\") %||% NA: object 'wt' not found global_jc_test(fx, nb, wt) #> Error in attr(wt, \"W\") %||% NA: object 'wt' not found"},{"path":"/reference/global_moran.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Global Moran's I — global_moran","title":"Calculate Global Moran's I — global_moran","text":"Calculate Global Moran's ","code":""},{"path":"/reference/global_moran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Global Moran's I — global_moran","text":"","code":"global_moran(x, nb, wt, na_ok = FALSE, ...)"},{"path":"/reference/global_moran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Global Moran's I — global_moran","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). na_ok default FALSE. FALSE presence NA Inf results error. ... additional arguments passed spdep::moran().","code":""},{"path":[]},{"path":"/reference/global_moran.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Global Moran's I — global_moran","text":"","code":"nb <- guerry_nb$nb wt <- guerry_nb$wt x <- guerry_nb$crime_pers moran <- global_moran(x, nb, wt)"},{"path":"/reference/global_moran_bv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Global Bivariate Moran's I — global_moran_bv","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"Given two continuous numeric variables, calculate bivariate Moran's .","code":""},{"path":"/reference/global_moran_bv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"","code":"global_moran_bv(x, y, nb, wt, nsim = 99)"},{"path":"/reference/global_moran_bv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"x numeric vector length nb. y numeric vector length nb. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). nsim number simulations run.","code":""},{"path":"/reference/global_moran_bv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"\\( I_B = \\frac{\\Sigma_i(\\Sigma_j{w_{ij}y_j\\times x_i})}{\\Sigma_i{x_i^2}} \\)","code":""},{"path":[]},{"path":"/reference/global_moran_bv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"","code":"x <- guerry_nb$crime_pers y <- guerry_nb$wealth nb <- guerry_nb$nb wt <- guerry_nb$wt global_moran_bv(x, y, nb, wt) #> $Ib #> [1] -0.1006674 #>  #> $p_sim #> [1] 0.02 #>"},{"path":"/reference/global_moran_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Moran Permutation Test — global_moran_perm","title":"Global Moran Permutation Test — global_moran_perm","text":"Global Moran Permutation Test","code":""},{"path":"/reference/global_moran_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Moran Permutation Test — global_moran_perm","text":"","code":"global_moran_perm(x, nb, wt, alternative = \"two.sided\", nsim = 499, ...)"},{"path":"/reference/global_moran_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Moran Permutation Test — global_moran_perm","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). nsim number simulations run. ... additional arguments passed spdep::moran.mc()","code":""},{"path":[]},{"path":"/reference/global_moran_perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Moran Permutation Test — global_moran_perm","text":"","code":"nb <- guerry_nb$nb wt <- guerry_nb$wt x <- guerry_nb$crime_pers moran <- global_moran_perm(x, nb, wt) broom::tidy(moran) #> # A tibble: 1 × 5 #>   statistic p.value parameter method                            alternative #>       <dbl>   <dbl>     <dbl> <chr>                             <chr>       #> 1     0.411       0       500 Monte-Carlo simulation of Moran I two.sided"},{"path":"/reference/global_moran_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Moran Test — global_moran_test","title":"Global Moran Test — global_moran_test","text":"Global Moran Test","code":""},{"path":"/reference/global_moran_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Moran Test — global_moran_test","text":"","code":"global_moran_test(   x,   nb,   wt,   alternative = \"greater\",   randomization = TRUE,   ... )"},{"path":"/reference/global_moran_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Moran Test — global_moran_test","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). randomization default TRUE. Calculate variance based randomization. FALSE, assumption normality. ... additional arguments passed spdep::moran().","code":""},{"path":[]},{"path":"/reference/global_moran_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Moran Test — global_moran_test","text":"","code":"nb <- guerry_nb$nb wt <- guerry_nb$wt x <- guerry_nb$crime_pers global_moran_test(x, nb, wt) #>  #> \tMoran I test under randomisation #>  #> data:  x   #> weights: listw     #>  #> Moran I statistic standard deviate = 6.0484, p-value = 7.316e-10 #> alternative hypothesis: greater #> sample estimates: #> Moran I statistic       Expectation          Variance  #>       0.411459718      -0.011904762       0.004899501  #>"},{"path":"/reference/guerry.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"dataset widely used demonstrate geospatial methods techniques. useful inclusion R package purposes example. dataset package modified Guerry Michael Friendly.","code":""},{"path":"/reference/guerry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"guerry  guerry_nb"},{"path":"/reference/guerry.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"","text":"object class sf (inherits tbl_df, tbl, data.frame) 85 rows 27 columns. guerry sf object 85 observations 27 variables. guerry_nb 2 additional variables created sfdep.","code":""},{"path":"/reference/guerry.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"","text":"Guerry::gfrance85","code":""},{"path":"/reference/guerry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"","text":"guerry guerry_nb objects sf class objects. polygons boundaries France (excluding Corsica) 1830.","code":""},{"path":"/reference/jc_bjc_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate BJC Bivariate Case — jc_bjc_calc","title":"Calculate BJC Bivariate Case — jc_bjc_calc","text":"Assumes colocation","code":""},{"path":"/reference/jc_bjc_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate BJC Bivariate Case — jc_bjc_calc","text":"","code":"jc_bjc_calc(x, xj, z, zj, wt)"},{"path":"/reference/jc_bjc_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate BJC BV for conditional permutations — jc_bjc_perm_impl","title":"Calculate BJC BV for conditional permutations — jc_bjc_perm_impl","text":"Calculate BJC BV conditional permutations","code":""},{"path":"/reference/jc_bjc_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate BJC BV for conditional permutations — jc_bjc_perm_impl","text":"","code":"jc_bjc_perm_impl(x, z, listw, index)"},{"path":"/reference/jc_clc_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate CLC BV for conditional permutations — jc_clc_perm_impl","title":"Calculate CLC BV for conditional permutations — jc_clc_perm_impl","text":"Calculate CLC BV conditional permutations","code":""},{"path":"/reference/jc_clc_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate CLC BV for conditional permutations — jc_clc_perm_impl","text":"","code":"jc_clc_perm_impl(x, z, listw, index)"},{"path":"/reference/jc_clc_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate CLC BV for conditional permutations — jc_clc_perm_impl","text":"x binary variable consisting 1 0, TRUE FALSE. listw listw object index integeter vector identifying positions subset. binary variable consisting 1 0, TRUE FALSE.","code":""},{"path":"/reference/jc_uni_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate univariate join count at row level — jc_uni_calc","title":"Calculate univariate join count at row level — jc_uni_calc","text":"Calculates local join count statistic given xi, xj, binary weights.","code":""},{"path":"/reference/jc_uni_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate univariate join count at row level — jc_uni_calc","text":"","code":"jc_uni_calc(x, xj, wt)"},{"path":"/reference/jc_uni_calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate univariate join count at row level — jc_uni_calc","text":"Formula \\(x_i \\times \\Sigma{w_i * x_j}\\)","code":""},{"path":"/reference/jc_uni_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Implementation of the univariate join count on listw objects — jc_uni_impl","title":"Implementation of the univariate join count on listw objects — jc_uni_impl","text":"univariate local join count statistic used identify clusters rarely occurring binary variables.","code":""},{"path":"/reference/jc_uni_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implementation of the univariate join count on listw objects — jc_uni_impl","text":"","code":"jc_uni_impl(x, listw, nsim, alternative)"},{"path":"/reference/jc_uni_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implementation of the univariate join count on listw objects — jc_uni_impl","text":"x binary variable either numeric logical listw listw object attr(, \"mode\") \"binary\" nsim number conditional permutation simulations alternative default \"greater\". One \"less\" \"greater\".","code":""},{"path":"/reference/jc_uni_impl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Implementation of the univariate join count on listw objects — jc_uni_impl","text":"https://geodacenter.github.io/workbook/6d_local_discrete/lab6d.html#univariate-local-join-count-statistic","code":""},{"path":"/reference/jc_uni_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional permutation of univariate local join count — jc_uni_perm_impl","title":"Conditional permutation of univariate local join count — jc_uni_perm_impl","text":"Creates conditional permutations index calculates local univariate join count index.","code":""},{"path":"/reference/jc_uni_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional permutation of univariate local join count — jc_uni_perm_impl","text":"","code":"jc_uni_perm_impl(x, listw, index)"},{"path":"/reference/jc_uni_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional permutation of univariate local join count — jc_uni_perm_impl","text":"x binary variable listw must binary index subset","code":""},{"path":"/reference/jc_uni_perm_impl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditional permutation of univariate local join count — jc_uni_perm_impl","text":"TODO conditional permutation indexing can useful eslewhere subsetting required functions","code":""},{"path":"/reference/kernels.html","id":null,"dir":"Reference","previous_headings":"","what":"Match kernel functions — kernels","title":"Match kernel functions — kernels","text":"Kernel functions creating kernel based weights st_kernel_weight().","code":""},{"path":"/reference/kernels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match kernel functions — kernels","text":"","code":"kernels"},{"path":"/reference/kernels.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Match kernel functions — kernels","text":"object class list length 5.","code":""},{"path":"/reference/kernels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match kernel functions — kernels","text":"x kernel distances thresh critical threshold ... unused","code":""},{"path":"/reference/kernels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match kernel functions — kernels","text":"Supported kernels . Formulas come Anselin & Morrison's notes. uniform:  K(z) = 1/2 ∣z∣<1 triangular: K(z) = (1−∣z∣) ∣z∣ < 1 epanechnikov: K(z) = (3/4)(1−z^2) ∣z∣ < 1 quartic: K(z) = (15/16)*(1−(z/threshold)^2^)2 ∣z∣ < 1 guassian: K(z) = (2pi)^1/2 * exp(−z^2/2)","code":""},{"path":"/reference/local_c.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Local Geary statistic — local_c","title":"Compute Local Geary statistic — local_c","text":"Local Geary local adaptation Geary's C statistic spatial autocorrelation. Local Geary uses squared differences measure dissimilarity unlike Local Moran. Low values Local Geary indicate positive spatial autocorrelation large refers negative spatial autocorrelation. Inference Local Geary based permutation approach compares observed value reference distribution spatial randomness. Local Geary creates pseudo p-value. analytical p-value based number permutations used care.","code":""},{"path":"/reference/local_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Local Geary statistic — local_c","text":"","code":"local_c(x, nb, wt, ...)  local_c_perm(x, nb, wt, nsim = 499, alternative = \"two.sided\", ...)"},{"path":"/reference/local_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Local Geary statistic — local_c","text":"x numeric vector, list numeric vectors equal length. nb neighbor list wt weights list ... arguments passed spdep::localC nsim number simulations used generate reference distribution. alternative character defining alternative hypothesis. Must one \"two.sided\", \"less\" \"greater\". zero.policy default NULLL. TRUE assign zero zones without neighbors. FALSE, assign NA. Must passed via ...","code":""},{"path":[]},{"path":"/reference/local_c.html","id":"overview","dir":"Reference","previous_headings":"","what":"Overview","title":"Compute Local Geary statistic — local_c","text":"Local Geary can extended multivariate context. x numeric vector, univariate Local Geary calculated. calculate multivariate Local Moran provide either list matrix. x list, element must numeric vector length length neighbours listw. case x matrix number rows must length neighbours listw. required univariate context, standardized Local Geary calculated. multivariate Local Geary always standardized. univariate Local Geary calculated \\(c_i = \\sum_j w_{ij}(x_i - x_j)^2\\) multivariate Local Geary calculated \\(c_{k,} = \\sum_{v=1}^{k} c_{v,}\\) described Anselin (2019).","code":""},{"path":"/reference/local_c.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Compute Local Geary statistic — local_c","text":"functions based implementations local Geary statistic development version spdep. based spdep::localC spdep::localC_perm. spdep::localC_perm thus local_c_perm utilize conditional permutation approach approximate reference distribution observation held fixed, randomly samples neighbors, calculated local C statistic tuple (ci). repeated nsim times. simulations 3 different types p-values calculated—potential flaws. extra judicious using p-values make conclusions. p_ci: utilizes sample mean standard deviation. p-value calculated using pnorm()--asuming normal distribution always true. p_ci_sim: uses rank observed statistic. p_folded_sim: followss pysal implementation p-values range 0, 0.5. excludes 1/2 p-values used caution.","code":""},{"path":"/reference/local_c.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Local Geary statistic — local_c","text":"Anselin, L. (1995), Local Indicators Spatial Association—LISA. Geographical Analysis, 27: 93-115. doi: 10.1111/j.1538-4632.1995.tb00338.x Anselin, L. (2019), Local Indicator Multivariate Spatial Association: Extending Geary's c. Geogr Anal, 51: 133-150. doi: 10.1111/gean.12164","code":""},{"path":"/reference/local_c.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Local Geary statistic — local_c","text":"Josiah Parry, josiah.parry@gmail.com","code":""},{"path":"/reference/local_c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Local Geary statistic — local_c","text":"","code":"guerry %>%   dplyr::transmute(nb = st_contiguity(geometry),                    wt = st_weights(nb),                    geary = local_c_perm(                      x = list(crime_pers, literacy),                      nb, wt                    )) %>%   tidyr::unnest(geary) #> Simple feature collection with 85 features and 12 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 13 #>    nb      wt        ci cluster  e_ci var_ci   z_ci   p_ci p_ci_sim p_folded_sim #>    <nb>    <list> <dbl> <fct>   <dbl>  <dbl>  <dbl>  <dbl>    <dbl>        <dbl> #>  1 <int [… <dbl … 1.09  Positi…  1.81  0.444 -1.08  0.281     0.284        0.142 #>  2 <int [… <dbl … 0.557 Positi…  1.62  0.195 -2.40  0.0163    0.016        0.008 #>  3 <int [… <dbl … 0.571 Positi…  2.55  0.628 -2.50  0.0125    0.004        0.002 #>  4 <int [… <dbl … 0.525 Positi…  1.55  0.483 -1.48  0.139     0.112        0.056 #>  5 <int [… <dbl … 1.69  Positi…  2.59  1.14  -0.839 0.402     0.412        0.206 #>  6 <int [… <dbl … 0.803 Positi…  2.28  0.548 -2.00  0.0456    0.02         0.01  #>  7 <int [… <dbl … 1.99  Positi…  4.55  2.31  -1.69  0.0919    0.072        0.036 #>  8 <int [… <dbl … 1.09  Positi…  3.50  1.93  -1.73  0.0831    0.036        0.018 #>  9 <int [… <dbl … 0.547 Positi…  1.69  0.302 -2.08  0.0373    0.016        0.008 #> 10 <int [… <dbl … 0.557 Positi…  1.25  0.266 -1.35  0.178     0.128        0.064 #> # … with 75 more rows, and 3 more variables: skewness <dbl>, kurtosis <dbl>, #> #   geometry <MULTIPOLYGON>"},{"path":"/reference/local_g.html","id":null,"dir":"Reference","previous_headings":"","what":"Local G — local_g","title":"Local G — local_g","text":"Local G","code":""},{"path":"/reference/local_g.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local G — local_g","text":"","code":"local_g(x, nb, wt, alternative = \"two.sided\", ...)  local_g_perm(x, nb, wt, nsim = 499, alternative = \"two.sided\", ...)"},{"path":"/reference/local_g.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local G — local_g","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). ... methods passed spdep::localG() spdep::localG_perm() x <- guerry$crime_pers nb <- st_contiguity(guerry) wt <- st_weights(nb) nsim number simulations run.","code":""},{"path":"/reference/local_gstar.html","id":null,"dir":"Reference","previous_headings":"","what":"Local G* — local_gstar","title":"Local G* — local_gstar","text":"Local G*","code":""},{"path":"/reference/local_gstar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local G* — local_gstar","text":"","code":"local_gstar(x, nb, wt, alternative = \"two.sided\", ...)  local_gstar_perm(x, nb, wt, nsim = 499, alternative = \"two.sided\", ...)"},{"path":"/reference/local_gstar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local G* — local_gstar","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). ... methods passed spdep::localG() spdep::localG_perm() x <- guerry$crime_pers nb <- st_contiguity(guerry) wt <- st_weights(nb) nsim number simulations run.","code":""},{"path":"/reference/local_gstar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local G* — local_gstar","text":"","code":"nb <- st_contiguity(guerry) wt <- st_weights(nb) x <- guerry$crime_pers local_g_perm(x, nb, wt) #>             gi       e_gi       var_gi     p_value p_sim p_folded_sim #> 1  0.013819020 0.01197080 4.431202e-06 0.379946196 0.380        0.190 #> 2  0.016115180 0.01178518 3.189696e-06 0.015331617 0.016        0.008 #> 3  0.015686557 0.01190033 3.407499e-06 0.040256134 0.040        0.020 #> 4  0.008553106 0.01172327 4.722970e-06 0.144639679 0.144        0.072 #> 5  0.008955895 0.01187256 6.421721e-06 0.249747695 0.252        0.126 #> 6  0.009334367 0.01191627 3.000449e-06 0.136078845 0.156        0.078 #> 7  0.013308440 0.01199390 5.858068e-06 0.587045214 0.592        0.296 #> 8  0.008087712 0.01201899 6.138700e-06 0.112579954 0.124        0.062 #> 9  0.013630374 0.01198587 3.625836e-06 0.387788949 0.380        0.190 #> 10 0.006826279 0.01186220 3.602182e-06 0.007969529 0.012        0.006 #> 11 0.007225672 0.01187759 2.373973e-06 0.002534325 0.004        0.002 #> 12 0.007888609 0.01214238 6.258111e-06 0.089054673 0.096        0.048 #> 13 0.014730484 0.01191967 6.121809e-06 0.255940770 0.284        0.142 #> 14 0.007001527 0.01179780 3.194297e-06 0.007283595 0.008        0.004 #> 15 0.010762953 0.01198737 3.544217e-06 0.515443853 0.488        0.244 #> 16 0.013095840 0.01183917 3.812382e-06 0.519827318 0.532        0.266 #> 17 0.015949284 0.01198844 3.392856e-06 0.031529301 0.056        0.028 #> 18 0.011504575 0.01195542 3.278484e-06 0.803365072 0.852        0.426 #> 19 0.014237186 0.01186882 2.738179e-06 0.152356383 0.132        0.066 #> 20 0.015052499 0.01179726 5.811063e-06 0.176894718 0.180        0.090 #> 21 0.013040676 0.01175267 2.821891e-06 0.443236398 0.428        0.214 #> 22 0.010928335 0.01189513 2.722825e-06 0.557943789 0.568        0.284 #> 23 0.014408469 0.01192196 9.486620e-06 0.419494928 0.380        0.190 #> 24 0.008585361 0.01192055 3.469711e-06 0.073374203 0.076        0.038 #> 25 0.012514332 0.01181490 2.941321e-06 0.683403327 0.664        0.332 #> 26 0.012786474 0.01185867 3.049644e-06 0.595218025 0.584        0.292 #> 27 0.015575579 0.01208236 1.012041e-05 0.272177918 0.292        0.146 #> 28 0.006456438 0.01197842 3.378461e-06 0.002662377 0.004        0.002 #> 29 0.007994853 0.01200770 3.177953e-06 0.024384553 0.020        0.010 #> 30 0.010233479 0.01199738 3.025176e-06 0.310516067 0.340        0.170 #> 31 0.012099990 0.01197352 5.201401e-06 0.955776426 0.888        0.444 #> 32 0.007425918 0.01191175 4.842491e-06 0.041500903 0.028        0.014 #> 33 0.015958393 0.01189897 3.239381e-06 0.024105054 0.024        0.012 #> 34 0.013082465 0.01183668 2.906576e-06 0.464949956 0.432        0.216 #> 35 0.015774323 0.01196049 3.902625e-06 0.053537759 0.072        0.036 #> 36 0.011473900 0.01184908 3.089745e-06 0.830981743 0.832        0.416 #> 37 0.014776298 0.01184070 3.819366e-06 0.133069557 0.144        0.072 #> 38 0.012273577 0.01175556 4.738375e-06 0.811900909 0.856        0.428 #> 39 0.014570953 0.01199481 3.320511e-06 0.157439697 0.196        0.098 #> 40 0.011606663 0.01185631 2.840370e-06 0.882239619 0.868        0.434 #> 41 0.009521038 0.01189699 3.583808e-06 0.209455876 0.228        0.114 #> 42 0.014304123 0.01194855 4.980398e-06 0.291189532 0.296        0.148 #> 43 0.012113381 0.01205741 2.755254e-06 0.973102607 0.996        0.498 #> 44 0.009947183 0.01196115 3.187321e-06 0.259286972 0.300        0.150 #> 45 0.010225083 0.01182701 2.944254e-06 0.350515836 0.384        0.192 #> 46 0.007704696 0.01197122 3.739858e-06 0.027369380 0.020        0.010 #> 47 0.013277240 0.01178100 2.165719e-06 0.309287046 0.320        0.160 #> 48 0.014465491 0.01189470 4.736350e-06 0.237500849 0.244        0.122 #> 49 0.015265007 0.01190583 2.973361e-06 0.051404431 0.060        0.030 #> 50 0.013283953 0.01190638 3.135687e-06 0.436602433 0.432        0.216 #> 51 0.017400436 0.01174203 3.696496e-06 0.003249856 0.008        0.004 #> 52 0.010150263 0.01179371 4.500136e-06 0.438506062 0.484        0.242 #> 53 0.014656976 0.01187523 3.952538e-06 0.161752846 0.176        0.088 #> 54 0.014929657 0.01181693 5.124751e-06 0.169129826 0.192        0.096 #> 55 0.011570904 0.01209476 9.607612e-06 0.865791843 0.860        0.430 #> 56 0.014462851 0.01192912 3.147143e-06 0.153222440 0.148        0.074 #> 57 0.016551293 0.01188881 6.442930e-06 0.066230711 0.088        0.044 #> 58 0.012750574 0.01178895 2.791470e-06 0.564913117 0.556        0.278 #> 59 0.014691353 0.01191468 3.259064e-06 0.124029277 0.116        0.058 #> 60 0.018024844 0.01190265 9.353356e-06 0.045305051 0.048        0.024 #> 61 0.013968480 0.01188411 3.252197e-06 0.247758202 0.280        0.140 #> 62 0.009633574 0.01205367 6.699429e-06 0.349786331 0.380        0.190 #> 63 0.010687124 0.01188989 5.935704e-06 0.621531500 0.648        0.324 #> 64 0.006455805 0.01208483 8.346465e-06 0.051364894 0.044        0.022 #> 65 0.009648260 0.01182989 4.110256e-06 0.281889277 0.300        0.150 #> 66 0.009217817 0.01215884 8.875971e-06 0.323561351 0.356        0.178 #> 67 0.015426694 0.01206631 5.177693e-06 0.139729967 0.148        0.074 #> 68 0.013749051 0.01177453 3.729806e-06 0.306593208 0.328        0.164 #> 69 0.015881541 0.01198023 2.629988e-06 0.016143425 0.028        0.014 #> 70 0.014849044 0.01195337 3.058896e-06 0.097793929 0.112        0.056 #> 71 0.010304059 0.01193073 8.372294e-06 0.573990380 0.604        0.302 #> 72 0.015207027 0.01193197 6.390077e-06 0.195118399 0.232        0.116 #> 73 0.011328897 0.01185578 2.316465e-06 0.729208342 0.776        0.388 #> 74 0.011698016 0.01169892 2.920387e-06 0.999578984 0.980        0.490 #> 75 0.013013919 0.01200222 3.680261e-06 0.597938422 0.612        0.306 #> 76 0.014743898 0.01187158 3.430652e-06 0.120959903 0.144        0.072 #> 77 0.008330537 0.01205770 3.764483e-06 0.054732787 0.052        0.026 #> 78 0.008660000 0.01184208 2.961371e-06 0.064440632 0.064        0.032 #> 79 0.007904004 0.01184087 6.374650e-06 0.118931328 0.096        0.048 #> 80 0.007473691 0.01169339 3.116784e-06 0.016840730 0.020        0.010 #> 81 0.012846891 0.01183749 4.466971e-06 0.632941735 0.632        0.316 #> 82 0.013959041 0.01186156 2.986986e-06 0.224895253 0.228        0.114 #> 83 0.014504177 0.01190662 3.080349e-06 0.138869870 0.144        0.072 #> 84 0.011860750 0.01199184 3.255377e-06 0.942079976 0.952        0.476 #> 85 0.013923847 0.01191237 4.228596e-06 0.327987970 0.356        0.178 #>        skewness     kurtosis #> 1   0.035969714 -0.127195969 #> 2  -0.048857224 -0.175627343 #> 3  -0.055084896 -0.386346411 #> 4   0.026088652 -0.218038502 #> 5   0.180931478 -0.025472751 #> 6   0.030892775  0.050947872 #> 7   0.100541817 -0.359403896 #> 8   0.142716865 -0.044044996 #> 9   0.040606999 -0.112632376 #> 10  0.034988842 -0.371837224 #> 11  0.190923470 -0.164829777 #> 12 -0.071417680 -0.348209146 #> 13  0.196982606 -0.333742197 #> 14  0.032789082 -0.265672996 #> 15 -0.157688432  0.157341554 #> 16  0.011150703 -0.419728394 #> 17  0.392277192  0.325716912 #> 18  0.276241049  0.156658522 #> 19  0.128069926  0.164744381 #> 20  0.361459951  0.158756950 #> 21 -0.136087634  0.109370815 #> 22  0.141496017 -0.217163306 #> 23  0.113749481 -0.282956469 #> 24  0.058228420 -0.236495888 #> 25 -0.069402853  0.304265900 #> 26  0.211768879 -0.256742355 #> 27  0.186489556 -0.301299331 #> 28  0.138239237 -0.038890974 #> 29  0.163598601 -0.120509421 #> 30  0.221194546 -0.071843407 #> 31  0.265495743 -0.058298367 #> 32  0.075313931 -0.244585567 #> 33 -0.013066799 -0.116524411 #> 34  0.211975510  0.002920253 #> 35  0.191251121 -0.438272451 #> 36 -0.017744781  0.046320382 #> 37  0.020395659 -0.134733884 #> 38 -0.018166025 -0.435117490 #> 39  0.167518255 -0.287191364 #> 40  0.001089289 -0.023385742 #> 41  0.008086453  0.070833424 #> 42 -0.002655582 -0.244882006 #> 43 -0.126750008  0.013995699 #> 44  0.188956738 -0.275972192 #> 45  0.034811229 -0.304745521 #> 46  0.111255462 -0.122449227 #> 47  0.192932795 -0.096658319 #> 48  0.059272310 -0.123414367 #> 49  0.165109950  0.065856852 #> 50  0.176608857  0.020531902 #> 51  0.201244577  0.095756970 #> 52  0.234521235 -0.258348593 #> 53  0.185778126  0.222127270 #> 54  0.138250073 -0.138163095 #> 55  0.063404893 -0.561331622 #> 56 -0.097809249 -0.160728765 #> 57  0.242459737 -0.103662777 #> 58  0.005780010 -0.256844529 #> 59  0.123007401 -0.252631198 #> 60  0.103780437 -0.228388683 #> 61  0.122343719 -0.387166484 #> 62  0.137028086 -0.232467504 #> 63  0.066058629 -0.451554950 #> 64  0.134319569 -0.462370481 #> 65 -0.018676454 -0.355296794 #> 66 -0.102326156 -0.243180490 #> 67  0.136476181 -0.025505070 #> 68  0.008951613 -0.299866277 #> 69  0.207040881 -0.331536797 #> 70  0.183404573 -0.210680687 #> 71  0.119337073 -0.283681144 #> 72  0.324555705 -0.092847387 #> 73  0.327901866  0.068548239 #> 74  0.092617547 -0.331360474 #> 75  0.007556542 -0.199732993 #> 76  0.070228681 -0.012924569 #> 77  0.113976802 -0.273477869 #> 78  0.020747090 -0.086528193 #> 79  0.066050438  0.114737718 #> 80  0.174851573  0.502151925 #> 81  0.024792445 -0.164148558 #> 82 -0.080737343 -0.281533537 #> 83  0.021162309 -0.254520287 #> 84  0.001019347 -0.076400051 #> 85  0.231268799 -0.251770317 local_gstar_perm(x, nb, wt) #> ! attr `self.include` is `TRUE`. Reporting Gi*. #>             gi       e_gi       var_gi      p_value p_sim p_folded_sim #> 1  0.014270222 0.01202447 3.579489e-06 0.2352280139 0.232        0.116 #> 2  0.015807678 0.01195116 2.777127e-06 0.0206576338 0.012        0.006 #> 3  0.015485705 0.01189926 2.571540e-06 0.0253193448 0.036        0.018 #> 4  0.008315062 0.01184550 3.571007e-06 0.0617286417 0.048        0.024 #> 5  0.009224485 0.01185323 4.895982e-06 0.2348196269 0.240        0.120 #> 6  0.008819945 0.01180333 2.161368e-06 0.0424286699 0.036        0.018 #> 7  0.014961277 0.01180741 4.563503e-06 0.1398454991 0.136        0.068 #> 8  0.006953285 0.01180831 4.578993e-06 0.0232773606 0.040        0.020 #> 9  0.013152942 0.01192875 2.773313e-06 0.4622732220 0.472        0.236 #> 10 0.007173126 0.01186818 2.928377e-06 0.0060761759 0.004        0.002 #> 11 0.006898546 0.01183271 2.550278e-06 0.0020034192 0.004        0.002 #> 12 0.007845469 0.01201614 4.759479e-06 0.0559110688 0.056        0.028 #> 13 0.013523322 0.01187844 5.266151e-06 0.4735078214 0.476        0.238 #> 14 0.007458852 0.01206431 2.835377e-06 0.0062368233 0.004        0.002 #> 15 0.011289400 0.01190243 3.351624e-06 0.7377370822 0.724        0.362 #> 16 0.012630942 0.01180825 2.863719e-06 0.6268607093 0.624        0.312 #> 17 0.015340884 0.01176904 2.711894e-06 0.0300841459 0.036        0.018 #> 18 0.011057393 0.01177197 2.742109e-06 0.6660843048 0.684        0.342 #> 19 0.014597110 0.01193020 2.283086e-06 0.0775624642 0.116        0.058 #> 20 0.015314172 0.01190340 4.810163e-06 0.1199094327 0.124        0.062 #> 21 0.014050381 0.01176332 2.627702e-06 0.1582795632 0.156        0.078 #> 22 0.011030881 0.01182427 2.275529e-06 0.5989242121 0.616        0.308 #> 23 0.011811302 0.01176786 6.182363e-06 0.9860588947 0.980        0.490 #> 24 0.008413883 0.01192474 2.965074e-06 0.0414604610 0.040        0.020 #> 25 0.011878745 0.01178216 2.409168e-06 0.9503835776 0.944        0.472 #> 26 0.012620950 0.01195608 2.695607e-06 0.6855105292 0.676        0.338 #> 27 0.016069618 0.01184733 6.130991e-06 0.0881517590 0.088        0.044 #> 28 0.006595570 0.01179612 2.445223e-06 0.0008818023 0.004        0.002 #> 29 0.008347058 0.01194645 2.907068e-06 0.0347667783 0.020        0.010 #> 30 0.010244797 0.01208782 2.615951e-06 0.2544935002 0.256        0.128 #> 31 0.012382889 0.01188545 4.188382e-06 0.8079589509 0.816        0.408 #> 32 0.007406347 0.01182802 3.789220e-06 0.0231169789 0.032        0.016 #> 33 0.015364123 0.01182032 2.481988e-06 0.0244861245 0.040        0.020 #> 34 0.013727734 0.01180404 2.767751e-06 0.2475559910 0.264        0.132 #> 35 0.014876307 0.01183305 3.332554e-06 0.0955036218 0.112        0.056 #> 36 0.011307545 0.01199432 2.733332e-06 0.6778485095 0.696        0.348 #> 37 0.014699000 0.01189402 3.028501e-06 0.1070015675 0.112        0.056 #> 38 0.011801400 0.01210896 3.871066e-06 0.8757791592 0.920        0.460 #> 39 0.014125401 0.01186107 2.708668e-06 0.1688761138 0.168        0.084 #> 40 0.012016630 0.01176927 2.312751e-06 0.8707907029 0.872        0.436 #> 41 0.009446979 0.01186959 3.132656e-06 0.1710734036 0.176        0.088 #> 42 0.013589716 0.01180806 3.734666e-06 0.3565656952 0.344        0.172 #> 43 0.011794136 0.01184488 2.544916e-06 0.9746231453 1.000        0.500 #> 44 0.008991930 0.01195068 2.633713e-06 0.0682795036 0.060        0.030 #> 45 0.010579653 0.01183320 2.646541e-06 0.4409736208 0.432        0.216 #> 46 0.007148765 0.01183739 2.981399e-06 0.0066193716 0.012        0.006 #> 47 0.013539907 0.01194023 2.069627e-06 0.2661591892 0.276        0.138 #> 48 0.015023811 0.01179554 4.002627e-06 0.1066127502 0.108        0.054 #> 49 0.014277631 0.01185398 3.030843e-06 0.1638737824 0.184        0.092 #> 50 0.013418811 0.01189207 2.565242e-06 0.3404682590 0.320        0.160 #> 51 0.017041222 0.01180616 3.197454e-06 0.0034153014 0.004        0.002 #> 52 0.011136808 0.01196280 3.398471e-06 0.6541114775 0.696        0.348 #> 53 0.014445073 0.01197393 3.335986e-06 0.1760672423 0.172        0.086 #> 54 0.014528019 0.01179972 3.903116e-06 0.1672854955 0.184        0.092 #> 55 0.010046286 0.01192309 5.936222e-06 0.4411171744 0.468        0.234 #> 56 0.014325708 0.01190225 2.521055e-06 0.1269319850 0.124        0.062 #> 57 0.016157879 0.01194959 4.743489e-06 0.0533320617 0.072        0.036 #> 58 0.013120245 0.01184427 2.651788e-06 0.4332965196 0.448        0.224 #> 59 0.014767580 0.01189101 2.905600e-06 0.0914978802 0.100        0.050 #> 60 0.016391423 0.01189117 5.795943e-06 0.0615837666 0.048        0.024 #> 61 0.013304133 0.01196042 2.700765e-06 0.4135630641 0.468        0.234 #> 62 0.009617901 0.01200584 4.728030e-06 0.2721156618 0.284        0.142 #> 63 0.009758617 0.01166739 4.781237e-06 0.3826959592 0.420        0.210 #> 64 0.005608600 0.01173652 5.944214e-06 0.0119565854 0.016        0.008 #> 65 0.009113563 0.01191532 3.593319e-06 0.1394008508 0.136        0.068 #> 66 0.007561237 0.01179646 6.770139e-06 0.1035860523 0.088        0.044 #> 67 0.014419926 0.01205554 4.009106e-06 0.2376630869 0.260        0.130 #> 68 0.013501073 0.01184091 3.409326e-06 0.3685914163 0.368        0.184 #> 69 0.015755475 0.01205038 2.264949e-06 0.0138202950 0.024        0.012 #> 70 0.015328760 0.01187614 2.346361e-06 0.0241968855 0.036        0.018 #> 71 0.009552577 0.01197724 6.480677e-06 0.3408692274 0.368        0.184 #> 72 0.013986432 0.01178938 4.924971e-06 0.3221707868 0.332        0.166 #> 73 0.011392248 0.01194923 2.082476e-06 0.6995231509 0.736        0.368 #> 74 0.011003674 0.01196349 2.854897e-06 0.5699967533 0.560        0.280 #> 75 0.012534774 0.01185136 3.523668e-06 0.7158041016 0.684        0.342 #> 76 0.015343101 0.01202068 3.244872e-06 0.0651239501 0.088        0.044 #> 77 0.008167716 0.01179845 3.346056e-06 0.0471609311 0.044        0.022 #> 78 0.008603441 0.01191531 2.845365e-06 0.0496023754 0.040        0.020 #> 79 0.007818946 0.01181836 5.338691e-06 0.0834648102 0.080        0.040 #> 80 0.007497836 0.01190728 2.636337e-06 0.0066133287 0.008        0.004 #> 81 0.012606384 0.01199496 3.947333e-06 0.7582781176 0.772        0.386 #> 82 0.013122855 0.01197590 2.766801e-06 0.4904858092 0.480        0.240 #> 83 0.013681762 0.01177182 2.678333e-06 0.2431920206 0.260        0.130 #> 84 0.011639370 0.01183455 2.592322e-06 0.9035137139 0.892        0.446 #> 85 0.013248815 0.01181191 3.692011e-06 0.4545697303 0.464        0.232 #>        skewness     kurtosis #> 1   0.164433406 -0.209353482 #> 2  -0.149791767 -0.100783859 #> 3   0.250288388  0.186942992 #> 4   0.029670275 -0.180482468 #> 5   0.141506414 -0.262268844 #> 6   0.098934116  0.002335961 #> 7   0.066909509 -0.022937683 #> 8   0.139223671  0.037127920 #> 9   0.135369635 -0.299029140 #> 10  0.040648996 -0.577574995 #> 11 -0.023791938 -0.047610697 #> 12  0.025468152 -0.280197932 #> 13  0.065925014 -0.041020659 #> 14  0.135665057  0.031895689 #> 15  0.180608685  0.064601603 #> 16  0.062226379 -0.324841157 #> 17  0.061446748 -0.011876406 #> 18  0.040746382 -0.035027194 #> 19  0.280023599  0.259737069 #> 20  0.016305385 -0.235583674 #> 21  0.244725283 -0.087461647 #> 22  0.137201863 -0.108966790 #> 23  0.118357597 -0.194870788 #> 24  0.052205946 -0.189911652 #> 25  0.114107933 -0.376004610 #> 26  0.160288679 -0.118128430 #> 27  0.057959494 -0.192049653 #> 28  0.044641720 -0.210333911 #> 29  0.085200685 -0.275663531 #> 30  0.130633882  0.018423154 #> 31  0.182224672 -0.333282557 #> 32 -0.113967286 -0.161040545 #> 33  0.036436732 -0.175061305 #> 34  0.170449530  0.228441489 #> 35  0.057087159 -0.147493718 #> 36  0.162007592 -0.014036527 #> 37 -0.132900603 -0.106179373 #> 38  0.030299897 -0.276742407 #> 39 -0.025322693 -0.204533424 #> 40  0.072103992  0.166668925 #> 41  0.050030187  0.004155932 #> 42  0.007630789  0.046979637 #> 43  0.142136047 -0.360686612 #> 44  0.162809764  0.069789542 #> 45  0.195656232  0.117278633 #> 46  0.124399186  0.026350675 #> 47 -0.016448074 -0.126705512 #> 48  0.102342440 -0.079573465 #> 49  0.020526504 -0.267275071 #> 50  0.156473008  0.182093671 #> 51  0.175719256 -0.130260727 #> 52  0.045163533 -0.347850400 #> 53  0.030242152  0.056874812 #> 54 -0.006282602 -0.256944335 #> 55  0.047565091 -0.374725646 #> 56  0.007085787  0.040030295 #> 57  0.189461004  0.092003804 #> 58  0.117127543 -0.329787915 #> 59  0.072101937 -0.078872600 #> 60 -0.091929813 -0.323563707 #> 61 -0.053520972 -0.251122572 #> 62  0.121923792 -0.177701478 #> 63  0.154892448 -0.260193435 #> 64 -0.006137287 -0.190332586 #> 65 -0.060889919 -0.423127477 #> 66  0.307020697 -0.230938006 #> 67  0.035459849 -0.213844808 #> 68 -0.243852761  0.008404066 #> 69  0.173759465  0.009795605 #> 70  0.105506452 -0.158085513 #> 71  0.144449473 -0.247324364 #> 72  0.034290438 -0.426056547 #> 73  0.040627727 -0.040753478 #> 74  0.179072819  0.001246117 #> 75  0.097959968 -0.276132624 #> 76  0.237835250 -0.051518887 #> 77  0.036577093 -0.229411704 #> 78  0.091052646 -0.298752882 #> 79  0.079621517 -0.545725000 #> 80  0.249434765  0.044584392 #> 81  0.059712021 -0.473093185 #> 82  0.229901693 -0.147433134 #> 83  0.258544251 -0.046162428 #> 84 -0.077852935  0.002076905 #> 85  0.042727789 -0.217737037"},{"path":"/reference/local_jc_bv.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate local join count — local_jc_bv","title":"Bivariate local join count — local_jc_bv","text":"Bivariate local join count","code":""},{"path":"/reference/local_jc_bv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate local join count — local_jc_bv","text":"","code":"local_jc_bv(x, z, nb, wt, nsim = 499, case = c(\"BJC\", \"CLC\"))"},{"path":"/reference/local_jc_bv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate local join count — local_jc_bv","text":"x binary variable either numeric logical z binary variable either numeric logical nb neighbors list object. wt default st_weights(nb, style = \"B\"). binary weights list created st_weights(nb, style = \"B\"). nsim number conditional permutation simulations","code":""},{"path":"/reference/local_jc_bv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bivariate local join count — local_jc_bv","text":"","code":"x <- as.integer(guerry$infants > 23574) z <- as.integer(guerry$donations > 10973) nb <- st_contiguity(guerry) wt <- st_weights(nb, style = \"B\") local_jc_bv(x, z, nb, wt) #>    join_count p_sim #> 1           0    NA #> 2           0    NA #> 3           0    NA #> 4           0    NA #> 5           0    NA #> 6           0    NA #> 7           0    NA #> 8           0    NA #> 9           0    NA #> 10          0    NA #> 11          0    NA #> 12          0    NA #> 13          0    NA #> 14          0    NA #> 15          0    NA #> 16          2 0.016 #> 17          0    NA #> 18          0    NA #> 19          0    NA #> 20          0    NA #> 21          0    NA #> 22          0    NA #> 23          0    NA #> 24          0    NA #> 25          0    NA #> 26          0    NA #> 27          1 0.108 #> 28          0    NA #> 29          0    NA #> 30          0    NA #> 31          0    NA #> 32          0    NA #> 33          0    NA #> 34          0    NA #> 35          0    NA #> 36          0    NA #> 37          0    NA #> 38          0    NA #> 39          0    NA #> 40          0    NA #> 41          0    NA #> 42          0    NA #> 43          0    NA #> 44          0    NA #> 45          0    NA #> 46          0    NA #> 47          0    NA #> 48          0    NA #> 49          0    NA #> 50          0    NA #> 51          0    NA #> 52          0    NA #> 53          0    NA #> 54          1 0.180 #> 55          0    NA #> 56          0    NA #> 57          0    NA #> 58          0    NA #> 59          0    NA #> 60          0    NA #> 61          0    NA #> 62          0    NA #> 63          0    NA #> 64          0    NA #> 65          0    NA #> 66          0    NA #> 67          0    NA #> 68          0    NA #> 69          0    NA #> 70          0    NA #> 71          0    NA #> 72          0    NA #> 73          0    NA #> 74          0    NA #> 75          2 0.018 #> 76          0    NA #> 77          0    NA #> 78          0    NA #> 79          0    NA #> 80          0    NA #> 81          2 0.008 #> 82          0    NA #> 83          0    NA #> 84          0    NA #> 85          0    NA"},{"path":"/reference/local_jc_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute local univariate join count — local_jc_uni","title":"Compute local univariate join count — local_jc_uni","text":"univariate local join count statistic used identify clusters rarely occurring binary variables. binary variable interest occur less half time.","code":""},{"path":"/reference/local_jc_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute local univariate join count — local_jc_uni","text":"","code":"local_jc_uni(   x,   nb,   wt = st_weights(nb, style = \"B\"),   nsim = 499,   alternative = \"two.sided\" )"},{"path":"/reference/local_jc_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute local univariate join count — local_jc_uni","text":"x binary variable either numeric logical nb neighbors list object. wt default st_weights(nb, style = \"B\"). binary weights list created st_weights(nb, style = \"B\"). nsim number conditional permutation simulations alternative default \"greater\". One \"less\" \"greater\".","code":""},{"path":"/reference/local_jc_uni.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute local univariate join count — local_jc_uni","text":"local join count statistic requires binary weights list can generated st_weights(nb, style = \"B\"). Additionally, ensure binary variable interest rarely occurring half observations. P-values estimated using conditional permutation approach. creates reference distribution observed statistic compared. see Geoda Glossary.","code":""},{"path":"/reference/local_jc_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute local univariate join count — local_jc_uni","text":"","code":"guerry %>%   dplyr::transmute(top_crime = crime_prop > 9000,                    nb = st_contiguity(geometry),                    wt = st_weights(nb, style = \"B\"),                    jc = local_jc_uni(top_crime, nb, wt)) %>%   tidyr::unnest(jc) #> Simple feature collection with 85 features and 5 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 6 #>    top_crime nb        wt        join_count  p_sim                      geometry #>    <lgl>     <nb>      <list>         <dbl>  <dbl>                <MULTIPOLYGON> #>  1 TRUE      <int [4]> <dbl [4]>          1  0.26  (((801150 2092615, 800669 20… #>  2 FALSE     <int [6]> <dbl [6]>          0 NA     (((729326 2521619, 729320 25… #>  3 FALSE     <int [6]> <dbl [6]>          0 NA     (((710830 2137350, 711746 21… #>  4 FALSE     <int [4]> <dbl [4]>          0 NA     (((882701 1920024, 882408 19… #>  5 FALSE     <int [3]> <dbl [3]>          0 NA     (((886504 1922890, 885733 19… #>  6 TRUE      <int [7]> <dbl [7]>          2  0.35  (((747008 1925789, 746630 19… #>  7 FALSE     <int [3]> <dbl [3]>          0 NA     (((818893 2514767, 818614 25… #>  8 TRUE      <int [3]> <dbl [3]>          1  0.354 (((509103 1747787, 508820 17… #>  9 FALSE     <int [5]> <dbl [5]>          0 NA     (((775400 2345600, 775068 23… #> 10 TRUE      <int [5]> <dbl [5]>          2  0.432 (((626230 1810121, 626269 18… #> # … with 75 more rows"},{"path":"/reference/local_moran.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Local Moran's I Statistic — local_moran","title":"Calculate the Local Moran's I Statistic — local_moran","text":"Moran's calculated polygon based neighbor weight lists.","code":""},{"path":"/reference/local_moran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Local Moran's I Statistic — local_moran","text":"","code":"local_moran(x, nb, wt, alternative = \"two.sided\", nsim = 499, ...)"},{"path":"/reference/local_moran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Local Moran's I Statistic — local_moran","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). nsim number simulations run. ... See ?spdep::localmoran_perm() options.","code":""},{"path":[]},{"path":"/reference/local_moran.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Local Moran's I Statistic — local_moran","text":"local_moran() calls spdep::localmoran_perm() calculates Moran polygon. well provide simulated p-values.","code":""},{"path":[]},{"path":"/reference/local_moran.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Local Moran's I Statistic — local_moran","text":"","code":"library(tidyverse) #> ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── #> ✔ ggplot2 3.3.5     ✔ purrr   0.3.4 #> ✔ tibble  3.1.6     ✔ dplyr   1.0.7 #> ✔ tidyr   1.1.4     ✔ stringr 1.4.0 #> ✔ readr   2.1.0     ✔ forcats 0.5.1 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag()  lisa <- guerry %>%   mutate(nb = st_contiguity(geometry),          wt = st_weights(nb),          moran = local_moran(crime_pers, nb, wt))  # unnest the dataframe column tidyr::unnest(lisa, moran) #> Simple feature collection with 85 features and 40 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 41 #>    code_dept count ave_id_geo  dept region department   crime_pers crime_prop #>    <fct>     <dbl>      <dbl> <int> <fct>  <fct>             <int>      <int> #>  1 01            1         49     1 E      Ain               28870      15890 #>  2 02            1        812     2 N      Aisne             26226       5521 #>  3 03            1       1418     3 C      Allier            26747       7925 #>  4 04            1       1603     4 E      Basses-Alpes      12935       7289 #>  5 05            1       1802     5 E      Hautes-Alpes      17488       8174 #>  6 07            1       2249     7 S      Ardeche            9474      10263 #>  7 08            1      35395     8 N      Ardennes          35203       8847 #>  8 09            1       2526     9 S      Ariege             6173       9597 #>  9 10            1      34410    10 E      Aube              19602       4086 #> 10 11            1       2807    11 S      Aude              15647      10431 #> # … with 75 more rows, and 33 more variables: literacy <int>, donations <int>, #> #   infants <int>, suicides <int>, main_city <ord>, wealth <int>, #> #   commerce <int>, clergy <int>, crime_parents <int>, infanticide <int>, #> #   donation_clergy <int>, lottery <int>, desertion <int>, instruction <int>, #> #   prostitutes <int>, distance <dbl>, area <int>, pop1831 <dbl>, #> #   geometry <MULTIPOLYGON>, nb <nb>, wt <list>, ii <dbl>, eii <dbl>, #> #   var_ii <dbl>, z_ii <dbl>, p_ii <dbl>, p_ii_sim <dbl>, p_folded_sim <dbl>, …"},{"path":"/reference/local_moran_bv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"Given two continuous numeric variables, calculate bivariate Local Moran's .","code":""},{"path":"/reference/local_moran_bv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"","code":"local_moran_bv(x, y, nb, wt, nsim = 499)"},{"path":"/reference/local_moran_bv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"x numeric vector length nb. y numeric vector length nb. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). nsim number simulations run.","code":""},{"path":"/reference/local_moran_bv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"\\( I_i^B= cx_i\\Sigma_j{w_{ij}y_j} \\)","code":""},{"path":[]},{"path":"/reference/local_moran_bv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"","code":"x <- guerry_nb$crime_pers y <- guerry_nb$wealth nb <- guerry_nb$nb wt <- guerry_nb$wt local_moran_bv(x, y, nb, wt) #>              Ib p_sim #> 1   0.093506129 0.430 #> 2  -0.840144689 0.006 #> 3   0.293390275 0.206 #> 4  -0.782969282 0.040 #> 5  -0.343051282 0.024 #> 6  -0.751763780 0.066 #> 7  -1.212286959 0.142 #> 8   0.494768137 0.300 #> 9   0.050875987 0.012 #> 10 -0.033508122 0.448 #> 11  0.119135965 0.414 #> 12 -0.027058053 0.460 #> 13  0.189608296 0.134 #> 14 -0.184931534 0.034 #> 15  0.186274796 0.258 #> 16 -0.042411941 0.306 #> 17  0.006353979 0.492 #> 18 -0.408271216 0.048 #> 19 -0.115344980 0.398 #> 20  0.130059701 0.434 #> 21  1.683274652 0.032 #> 22 -0.003842500 0.498 #> 23 -1.004957821 0.132 #> 24 -1.104136137 0.000 #> 25  0.857180921 0.002 #> 26 -0.169492824 0.008 #> 27  0.834090623 0.222 #> 28 -0.171464343 0.332 #> 29 -0.034233828 0.326 #> 30 -0.051026184 0.270 #> 31 -0.046850788 0.424 #> 32  0.334455413 0.248 #> 33  0.080264717 0.282 #> 34  0.685071940 0.182 #> 35  0.001704856 0.484 #> 36 -0.079714992 0.096 #> 37  0.137434262 0.342 #> 38  0.125025064 0.230 #> 39 -0.068341930 0.190 #> 40  0.504579881 0.116 #> 41 -0.319036396 0.092 #> 42 -0.016497540 0.324 #> 43  0.225196989 0.030 #> 44 -0.224572220 0.372 #> 45 -0.003990683 0.458 #> 46 -1.017640129 0.076 #> 47  0.367618246 0.216 #> 48 -0.550574797 0.200 #> 49  0.441828404 0.024 #> 50 -0.088146734 0.392 #> 51 -0.190742450 0.354 #> 52  0.537482661 0.122 #> 53 -0.039104825 0.446 #> 54  0.305236945 0.100 #> 55 -0.337570608 0.334 #> 56 -0.155974076 0.294 #> 57 -0.526846963 0.172 #> 58 -1.393680416 0.000 #> 59 -0.832978265 0.038 #> 60 -0.326847547 0.160 #> 61 -0.269459435 0.046 #> 62 -0.443421284 0.048 #> 63 -0.158620813 0.392 #> 64 -0.066683215 0.484 #> 65 -0.790102037 0.066 #> 66 -1.406140486 0.130 #> 67 -0.058461082 0.268 #> 68 -0.004884983 0.492 #> 69 -0.125083947 0.368 #> 70 -1.236566942 0.036 #> 71  1.282709560 0.006 #> 72  0.218277696 0.028 #> 73 -0.366089264 0.000 #> 74  1.371117985 0.002 #> 75 -0.075151611 0.186 #> 76 -1.560168225 0.020 #> 77  0.658190968 0.062 #> 78  0.246687028 0.218 #> 79 -0.139720645 0.414 #> 80 -0.206370145 0.266 #> 81 -0.003905568 0.436 #> 82 -0.205045471 0.246 #> 83 -0.534172545 0.002 #> 84 -0.046631364 0.208 #> 85  0.279224938 0.010"},{"path":"/reference/local_moran_bv_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Local Bivariate Moran Statistic — local_moran_bv_calc","title":"Calculate the Local Bivariate Moran Statistic — local_moran_bv_calc","text":"Calculate Local Bivariate Moran Statistic","code":""},{"path":"/reference/local_moran_bv_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Local Bivariate Moran Statistic — local_moran_bv_calc","text":"","code":"local_moran_bv_calc(x, yj, wt)"},{"path":"/reference/local_moran_bv_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Local Bivariate Moran Statistic — local_moran_bv_calc","text":"x numeric vector length nb. yj neighbor values y, length lengths nb. wt weights list created st_weights().","code":""},{"path":"/reference/local_moran_bv_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Bivariate Moran's I spdep implementation — local_moran_bv_impl","title":"Local Bivariate Moran's I spdep implementation — local_moran_bv_impl","text":"Local Bivariate Moran's spdep implementation","code":""},{"path":"/reference/local_moran_bv_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Bivariate Moran's I spdep implementation — local_moran_bv_impl","text":"","code":"local_moran_bv_impl(x, y, listw, nsim)"},{"path":"/reference/local_moran_bv_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Bivariate Moran's I spdep implementation — local_moran_bv_impl","text":"x numeric vector length nb. y numeric vector length nb. listw listw object e.g. created recreate_listw(). nsim number simulations run.","code":""},{"path":"/reference/local_moran_bv_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Bivariate Moran's I conditional permutation implementation — local_moran_bv_perm_impl","title":"Local Bivariate Moran's I conditional permutation implementation — local_moran_bv_perm_impl","text":"Local Bivariate Moran's conditional permutation implementation","code":""},{"path":"/reference/local_moran_bv_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Bivariate Moran's I conditional permutation implementation — local_moran_bv_perm_impl","text":"","code":"local_moran_bv_perm_impl(x, y, listw)"},{"path":"/reference/local_moran_bv_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Bivariate Moran's I conditional permutation implementation — local_moran_bv_perm_impl","text":"x numeric vector length nb. y numeric vector length nb. listw listw object e.g. created recreate_listw().","code":""},{"path":"/reference/losh.html","id":null,"dir":"Reference","previous_headings":"","what":"Local spatial heteroscedacity — losh","title":"Local spatial heteroscedacity — losh","text":"Local spatial heteroscedacity","code":""},{"path":"/reference/losh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local spatial heteroscedacity — losh","text":"","code":"losh(x, nb, wt, a = 2, ...)  losh_perm(x, nb, wt, a = 2, nsim = 499, ...)"},{"path":"/reference/losh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local spatial heteroscedacity — losh","text":"x numeric vector. nb neighbor list example created st_contiguity() wt weights list example created st_weights() ... methods passed spdep::LOSH nsim number simulations","code":""},{"path":"/reference/losh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local spatial heteroscedacity — losh","text":"","code":"nb <- st_contiguity(guerry) wt <- st_weights(nb) x <- guerry$crime_pers losh(x, nb, wt) #>            hi e_hi    var_hi       z_hi  x_bar_i           ei #> 1  0.42563150    1 0.3894939  2.1855618 23047.50 3.390151e+07 #> 2  2.07958219    1 0.2532512 16.4230798 26919.67 4.811734e+05 #> 3  1.84873198    1 0.2532512 14.5999870 26195.50 3.041522e+05 #> 4  0.06131293    1 0.3894939  0.3148338 14401.25 2.149889e+06 #> 5  0.03499988    1 0.5257366  0.1331461 15038.67 5.999234e+06 #> 6  0.43681771    1 0.2143247  4.0762239 15749.00 3.937563e+07 #> 7  1.02195445    1 0.5257366  3.8877049 22111.67 1.713830e+08 #> 8  0.62524134    1 0.5257366  2.3785344 13672.33 5.624000e+07 #> 9  1.38724561    1 0.3077483  9.0154567 22859.20 1.060935e+07 #> 10 0.61603841    1 0.3077483  4.0035215 11475.20 1.740392e+07 #> 11 0.83487574    1 0.2143247  7.7907566 12200.14 1.571443e+07 #> 12 0.06091759    1 0.5257366  0.2317418 13278.67 1.698678e+04 #> 13 1.02979145    1 0.5257366  3.9175184 24734.00 5.122265e+07 #> 14 1.09853046    1 0.2532512  8.6754221 11752.83 3.990659e+07 #> 15 1.02984407    1 0.3077483  6.6927691 17992.60 4.860042e+07 #> 16 0.52205384    1 0.3077483  3.3927328 21974.40 1.064325e+07 #> 17 1.84431404    1 0.2532512 14.5650971 26711.00 2.281973e+07 #> 18 2.56737439    1 0.2532512 20.2753201 19344.00 1.666272e+07 #> 19 0.27138661    1 0.2143247  2.5324810 23696.71 7.326137e+07 #> 20 0.39291206    1 0.5257366  1.4947106 25108.67 1.223834e+07 #> 21 1.29241253    1 0.2532512 10.2065666 21643.17 2.362625e+08 #> 22 1.33769567    1 0.2143247 12.4828892 18306.00 1.075184e+07 #> 23 0.04265707    1 0.7982221  0.1068802 24280.00 1.617984e+08 #> 24 0.29390902    1 0.3077483  1.9100612 14451.60 1.114291e+06 #> 25 1.09084664    1 0.2532512  8.6147407 21047.67 3.909584e+07 #> 26 1.04281881    1 0.2532512  8.2354506 21421.33 2.844444e+03 #> 27 0.22639201    1 0.7982221  0.5672407 25961.50 1.529201e+07 #> 28 0.42373924    1 0.2532512  3.3463949 10869.83 5.040773e+06 #> 29 0.55413216    1 0.2532512  4.3761467 13415.67 2.731456e+07 #> 30 0.52195360    1 0.2532512  4.1220230 17172.17 2.160410e+06 #> 31 0.48399476    1 0.3894939  2.4852494 20238.25 1.488224e+07 #> 32 0.29529066    1 0.3894939  1.5162787 12504.25 9.594506e+04 #> 33 0.72023929    1 0.2532512  5.6879442 26723.00 2.102222e+07 #> 34 2.31220222    1 0.2532512 18.2601494 21772.83 1.130217e+08 #> 35 2.02985746    1 0.3077483 13.1916741 26462.20 5.374649e+07 #> 36 0.98783506    1 0.2532512  7.8012276 19252.00 2.180890e+05 #> 37 1.64645940    1 0.3077483 10.7000399 24683.20 2.364829e+06 #> 38 0.38908276    1 0.3894939  1.9978888 20607.25 8.527860e+06 #> 39 1.41460149    1 0.2532512 11.1715292 24412.00 9.734400e+06 #> 40 0.56981855    1 0.2143247  5.3173393 19373.71 6.589033e+07 #> 41 1.27709481    1 0.3077483  8.2996067 16000.20 2.883204e+04 #> 42 0.61384968    1 0.3894939  3.1520374 23993.25 2.189538e+07 #> 43 0.53773204    1 0.2143247  5.0179197 20337.86 6.842709e+06 #> 44 0.58983165    1 0.2532512  4.6580762 16818.67 1.195888e+08 #> 45 0.78377645    1 0.2532512  6.1897160 17113.83 3.428298e+07 #> 46 0.60345256    1 0.3077483  3.9217283 13013.00 2.812181e+07 #> 47 1.00328782    1 0.1851298 10.8387489 22133.00 5.713848e+07 #> 48 0.65819988    1 0.3894939  3.3797698 24093.75 4.877975e+07 #> 49 1.05152963    1 0.2532512  8.3042426 25661.67 1.011969e+08 #> 50 0.93808660    1 0.2532512  7.4083492 22190.17 1.632833e+07 #> 51 1.36638049    1 0.3077483  8.8798580 29030.00 4.886010e+05 #> 52 0.53166821    1 0.3894939  2.7300463 16951.00 9.453673e+07 #> 53 2.31922282    1 0.3077483 15.0722069 24509.00 4.000000e+00 #> 54 0.53104812    1 0.3894939  2.7268623 24982.75 2.778056e+06 #> 55 1.65957271    1 0.7982221  4.1581729 19491.50 5.385358e+07 #> 56 0.68162031    1 0.2532512  5.3829585 24176.00 8.299210e+05 #> 57 1.33364496    1 0.5257366  5.0734336 27639.67 8.094001e+05 #> 58 1.18539711    1 0.2532512  9.3614340 21274.33 4.768823e+07 #> 59 1.12893629    1 0.2532512  8.9155461 24510.33 1.458222e+07 #> 60 1.25289279    1 0.7982221  3.1392085 30166.00 4.991422e+07 #> 61 1.80441074    1 0.2532512 14.2499689 23459.00 3.847721e+07 #> 62 0.44309432    1 0.5257366  1.6856133 16184.00 2.894440e+05 #> 63 0.29915866    1 0.5257366  1.1380552 18002.00 3.339684e+07 #> 64 1.11027963    1 0.7982221  2.7818815 10910.00 1.748912e+07 #> 65 1.63760586    1 0.3894939  8.4088907 16251.25 1.554134e+07 #> 66 0.25142223    1 0.7982221  0.6299556 15572.00 6.771644e+07 #> 67 0.78098937    1 0.3894939  4.0102777 25884.25 5.028583e+07 #> 68 1.53711112    1 0.3077483  9.9894054 23020.60 4.645786e+05 #> 69 0.97710928    1 0.2143247  9.1180282 26495.00 3.594816e+06 #> 70 0.68191745    1 0.2532512  5.3853051 24690.50 8.505451e+07 #> 71 0.94434450    1 0.7982221  2.3661197 17339.00 1.151924e+07 #> 72 1.69938328    1 0.5257366  6.4647703 25522.33 5.137067e+07 #> 73 0.97749972    1 0.1851298 10.5601541 18970.00 1.043936e+07 #> 74 0.58088188    1 0.2532512  4.5873972 19701.83 5.219822e+07 #> 75 1.13689616    1 0.3077483  7.3884812 21841.00 1.184048e+07 #> 76 0.90616976    1 0.3077483  5.8890323 24520.40 8.229393e+07 #> 77 0.36532589    1 0.3077483  2.3741865 14025.80 1.013646e+06 #> 78 1.00546440    1 0.2532512  7.9404517 14565.17 5.055003e+04 #> 79 0.03176969    1 0.5257366  0.1208578 13306.67 2.613611e+04 #> 80 0.23983268    1 0.2532512  1.8940301 12579.00 9.940090e+05 #> 81 0.76525616    1 0.3894939  3.9294897 21529.50 4.935062e+05 #> 82 1.76009049    1 0.2532512 13.8999587 23474.50 7.164776e+07 #> 83 2.49737804    1 0.2532512 19.7225381 24373.17 6.588839e+07 #> 84 0.97788776    1 0.2532512  7.7226708 19900.50 1.135290e+06 #> 85 0.61500983    1 0.3077483  3.9968369 23373.60 2.881113e+07 losh(x, nb, wt, var_hi = FALSE) #>            hi  x_bar_i           ei #> 1  0.42563150 23047.50 3.390151e+07 #> 2  2.07958219 26919.67 4.811734e+05 #> 3  1.84873198 26195.50 3.041522e+05 #> 4  0.06131293 14401.25 2.149889e+06 #> 5  0.03499988 15038.67 5.999234e+06 #> 6  0.43681771 15749.00 3.937563e+07 #> 7  1.02195445 22111.67 1.713830e+08 #> 8  0.62524134 13672.33 5.624000e+07 #> 9  1.38724561 22859.20 1.060935e+07 #> 10 0.61603841 11475.20 1.740392e+07 #> 11 0.83487574 12200.14 1.571443e+07 #> 12 0.06091759 13278.67 1.698678e+04 #> 13 1.02979145 24734.00 5.122265e+07 #> 14 1.09853046 11752.83 3.990659e+07 #> 15 1.02984407 17992.60 4.860042e+07 #> 16 0.52205384 21974.40 1.064325e+07 #> 17 1.84431404 26711.00 2.281973e+07 #> 18 2.56737439 19344.00 1.666272e+07 #> 19 0.27138661 23696.71 7.326137e+07 #> 20 0.39291206 25108.67 1.223834e+07 #> 21 1.29241253 21643.17 2.362625e+08 #> 22 1.33769567 18306.00 1.075184e+07 #> 23 0.04265707 24280.00 1.617984e+08 #> 24 0.29390902 14451.60 1.114291e+06 #> 25 1.09084664 21047.67 3.909584e+07 #> 26 1.04281881 21421.33 2.844444e+03 #> 27 0.22639201 25961.50 1.529201e+07 #> 28 0.42373924 10869.83 5.040773e+06 #> 29 0.55413216 13415.67 2.731456e+07 #> 30 0.52195360 17172.17 2.160410e+06 #> 31 0.48399476 20238.25 1.488224e+07 #> 32 0.29529066 12504.25 9.594506e+04 #> 33 0.72023929 26723.00 2.102222e+07 #> 34 2.31220222 21772.83 1.130217e+08 #> 35 2.02985746 26462.20 5.374649e+07 #> 36 0.98783506 19252.00 2.180890e+05 #> 37 1.64645940 24683.20 2.364829e+06 #> 38 0.38908276 20607.25 8.527860e+06 #> 39 1.41460149 24412.00 9.734400e+06 #> 40 0.56981855 19373.71 6.589033e+07 #> 41 1.27709481 16000.20 2.883204e+04 #> 42 0.61384968 23993.25 2.189538e+07 #> 43 0.53773204 20337.86 6.842709e+06 #> 44 0.58983165 16818.67 1.195888e+08 #> 45 0.78377645 17113.83 3.428298e+07 #> 46 0.60345256 13013.00 2.812181e+07 #> 47 1.00328782 22133.00 5.713848e+07 #> 48 0.65819988 24093.75 4.877975e+07 #> 49 1.05152963 25661.67 1.011969e+08 #> 50 0.93808660 22190.17 1.632833e+07 #> 51 1.36638049 29030.00 4.886010e+05 #> 52 0.53166821 16951.00 9.453673e+07 #> 53 2.31922282 24509.00 4.000000e+00 #> 54 0.53104812 24982.75 2.778056e+06 #> 55 1.65957271 19491.50 5.385358e+07 #> 56 0.68162031 24176.00 8.299210e+05 #> 57 1.33364496 27639.67 8.094001e+05 #> 58 1.18539711 21274.33 4.768823e+07 #> 59 1.12893629 24510.33 1.458222e+07 #> 60 1.25289279 30166.00 4.991422e+07 #> 61 1.80441074 23459.00 3.847721e+07 #> 62 0.44309432 16184.00 2.894440e+05 #> 63 0.29915866 18002.00 3.339684e+07 #> 64 1.11027963 10910.00 1.748912e+07 #> 65 1.63760586 16251.25 1.554134e+07 #> 66 0.25142223 15572.00 6.771644e+07 #> 67 0.78098937 25884.25 5.028583e+07 #> 68 1.53711112 23020.60 4.645786e+05 #> 69 0.97710928 26495.00 3.594816e+06 #> 70 0.68191745 24690.50 8.505451e+07 #> 71 0.94434450 17339.00 1.151924e+07 #> 72 1.69938328 25522.33 5.137067e+07 #> 73 0.97749972 18970.00 1.043936e+07 #> 74 0.58088188 19701.83 5.219822e+07 #> 75 1.13689616 21841.00 1.184048e+07 #> 76 0.90616976 24520.40 8.229393e+07 #> 77 0.36532589 14025.80 1.013646e+06 #> 78 1.00546440 14565.17 5.055003e+04 #> 79 0.03176969 13306.67 2.613611e+04 #> 80 0.23983268 12579.00 9.940090e+05 #> 81 0.76525616 21529.50 4.935062e+05 #> 82 1.76009049 23474.50 7.164776e+07 #> 83 2.49737804 24373.17 6.588839e+07 #> 84 0.97788776 19900.50 1.135290e+06 #> 85 0.61500983 23373.60 2.881113e+07 losh_perm(x, nb, wt, nsim = 49) #>            hi  x_bar_i           ei p_sim #> 1  0.42563150 23047.50 3.390151e+07  0.72 #> 2  2.07958219 26919.67 4.811734e+05  0.02 #> 3  1.84873198 26195.50 3.041522e+05  0.06 #> 4  0.06131293 14401.25 2.149889e+06  0.96 #> 5  0.03499988 15038.67 5.999234e+06  0.96 #> 6  0.43681771 15749.00 3.937563e+07  0.86 #> 7  1.02195445 22111.67 1.713830e+08  0.36 #> 8  0.62524134 13672.33 5.624000e+07  0.78 #> 9  1.38724561 22859.20 1.060935e+07  0.18 #> 10 0.61603841 11475.20 1.740392e+07  0.74 #> 11 0.83487574 12200.14 1.571443e+07  0.48 #> 12 0.06091759 13278.67 1.698678e+04  0.94 #> 13 1.02979145 24734.00 5.122265e+07  0.38 #> 14 1.09853046 11752.83 3.990659e+07  0.28 #> 15 1.02984407 17992.60 4.860042e+07  0.18 #> 16 0.52205384 21974.40 1.064325e+07  0.70 #> 17 1.84431404 26711.00 2.281973e+07  0.02 #> 18 2.56737439 19344.00 1.666272e+07  0.02 #> 19 0.27138661 23696.71 7.326137e+07  0.98 #> 20 0.39291206 25108.67 1.223834e+07  0.78 #> 21 1.29241253 21643.17 2.362625e+08  0.32 #> 22 1.33769567 18306.00 1.075184e+07  0.18 #> 23 0.04265707 24280.00 1.617984e+08  0.94 #> 24 0.29390902 14451.60 1.114291e+06  0.82 #> 25 1.09084664 21047.67 3.909584e+07  0.34 #> 26 1.04281881 21421.33 2.844444e+03  0.36 #> 27 0.22639201 25961.50 1.529201e+07  0.84 #> 28 0.42373924 10869.83 5.040773e+06  0.88 #> 29 0.55413216 13415.67 2.731456e+07  0.72 #> 30 0.52195360 17172.17 2.160410e+06  0.80 #> 31 0.48399476 20238.25 1.488224e+07  0.86 #> 32 0.29529066 12504.25 9.594506e+04  0.92 #> 33 0.72023929 26723.00 2.102222e+07  0.56 #> 34 2.31220222 21772.83 1.130217e+08  0.02 #> 35 2.02985746 26462.20 5.374649e+07  0.02 #> 36 0.98783506 19252.00 2.180890e+05  0.54 #> 37 1.64645940 24683.20 2.364829e+06  0.12 #> 38 0.38908276 20607.25 8.527860e+06  0.82 #> 39 1.41460149 24412.00 9.734400e+06  0.14 #> 40 0.56981855 19373.71 6.589033e+07  0.88 #> 41 1.27709481 16000.20 2.883204e+04  0.22 #> 42 0.61384968 23993.25 2.189538e+07  0.60 #> 43 0.53773204 20337.86 6.842709e+06  0.70 #> 44 0.58983165 16818.67 1.195888e+08  0.76 #> 45 0.78377645 17113.83 3.428298e+07  0.58 #> 46 0.60345256 13013.00 2.812181e+07  0.82 #> 47 1.00328782 22133.00 5.713848e+07  0.34 #> 48 0.65819988 24093.75 4.877975e+07  0.66 #> 49 1.05152963 25661.67 1.011969e+08  0.36 #> 50 0.93808660 22190.17 1.632833e+07  0.38 #> 51 1.36638049 29030.00 4.886010e+05  0.24 #> 52 0.53166821 16951.00 9.453673e+07  0.84 #> 53 2.31922282 24509.00 4.000000e+00  0.04 #> 54 0.53104812 24982.75 2.778056e+06  0.74 #> 55 1.65957271 19491.50 5.385358e+07  0.12 #> 56 0.68162031 24176.00 8.299210e+05  0.60 #> 57 1.33364496 27639.67 8.094001e+05  0.30 #> 58 1.18539711 21274.33 4.768823e+07  0.16 #> 59 1.12893629 24510.33 1.458222e+07  0.32 #> 60 1.25289279 30166.00 4.991422e+07  0.34 #> 61 1.80441074 23459.00 3.847721e+07  0.02 #> 62 0.44309432 16184.00 2.894440e+05  0.82 #> 63 0.29915866 18002.00 3.339684e+07  0.76 #> 64 1.11027963 10910.00 1.748912e+07  0.40 #> 65 1.63760586 16251.25 1.554134e+07  0.32 #> 66 0.25142223 15572.00 6.771644e+07  0.74 #> 67 0.78098937 25884.25 5.028583e+07  0.54 #> 68 1.53711112 23020.60 4.645786e+05  0.16 #> 69 0.97710928 26495.00 3.594816e+06  0.26 #> 70 0.68191745 24690.50 8.505451e+07  0.76 #> 71 0.94434450 17339.00 1.151924e+07  0.40 #> 72 1.69938328 25522.33 5.137067e+07  0.14 #> 73 0.97749972 18970.00 1.043936e+07  0.40 #> 74 0.58088188 19701.83 5.219822e+07  0.74 #> 75 1.13689616 21841.00 1.184048e+07  0.34 #> 76 0.90616976 24520.40 8.229393e+07  0.62 #> 77 0.36532589 14025.80 1.013646e+06  0.90 #> 78 1.00546440 14565.17 5.055003e+04  0.22 #> 79 0.03176969 13306.67 2.613611e+04  0.96 #> 80 0.23983268 12579.00 9.940090e+05  0.92 #> 81 0.76525616 21529.50 4.935062e+05  0.50 #> 82 1.76009049 23474.50 7.164776e+07  0.04 #> 83 2.49737804 24373.17 6.588839e+07  0.02 #> 84 0.97788776 19900.50 1.135290e+06  0.46 #> 85 0.61500983 23373.60 2.881113e+07  0.66"},{"path":"/reference/moran_bv_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Bivariate Moran's I calculation — moran_bv_calc","title":"Global Bivariate Moran's I calculation — moran_bv_calc","text":"Global Bivariate Moran's calculation","code":""},{"path":"/reference/moran_bv_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Bivariate Moran's I calculation — moran_bv_calc","text":"","code":"moran_bv_calc(x, yj, wt)"},{"path":"/reference/moran_bv_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Bivariate Moran's I calculation — moran_bv_calc","text":"x numeric vector length nb. yj neighbor values y, length lengths nb. wt weights list created st_weights().","code":""},{"path":"/reference/moran_bv_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Bivariate Moran's I spdep implementation — moran_bv_impl","title":"Global Bivariate Moran's I spdep implementation — moran_bv_impl","text":"Global Bivariate Moran's spdep implementation","code":""},{"path":"/reference/moran_bv_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Bivariate Moran's I spdep implementation — moran_bv_impl","text":"","code":"moran_bv_impl(x, y, listw, nsim)"},{"path":"/reference/moran_bv_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Bivariate Moran's I spdep implementation — moran_bv_impl","text":"x numeric vector length nb. y numeric vector length nb. listw listw object e.g. created recreate_listw(). nsim number simulations run.","code":""},{"path":"/reference/moran_bv_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Bivariate Moran's I conditional permutation implementation — moran_bv_perm_impl","title":"Global Bivariate Moran's I conditional permutation implementation — moran_bv_perm_impl","text":"Global Bivariate Moran's conditional permutation implementation","code":""},{"path":"/reference/moran_bv_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Bivariate Moran's I conditional permutation implementation — moran_bv_perm_impl","text":"","code":"moran_bv_perm_impl(x, y, listw)"},{"path":"/reference/moran_bv_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Bivariate Moran's I conditional permutation implementation — moran_bv_perm_impl","text":"x numeric vector length nb. y numeric vector length nb. listw listw object e.g. created recreate_listw().","code":""},{"path":"/reference/nb_match_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Neighbor Match Test — nb_match_test","title":"Local Neighbor Match Test — nb_match_test","text":"Implements Local Neighbor Match Test described Tobler's Law Multivariate World (Anselin Li, 2020).","code":""},{"path":"/reference/nb_match_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Neighbor Match Test — nb_match_test","text":"","code":"nb_match_test(   x,   nb,   wt = st_weights(nb),   k = 10,   nsim = 499,   scale = TRUE,   .method = \"euclidian\",   .p = 2 )"},{"path":"/reference/nb_match_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Neighbor Match Test — nb_match_test","text":"x numeric vector list numeric vectors equal length. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). k number neighbors identify attribute space. number neighbors provided st_knn. nsim number simulations run calculating simulated p-value. scale default TRUE. Whether x scaled . Note measures standardized. .method default \"euclidian\". distance measure passed stats::dist(). .p default 2. power Minkowski distance passed p argument stats::dist().","code":""},{"path":"/reference/nb_match_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Neighbor Match Test — nb_match_test","text":"","code":"guerry %>%   dplyr::transmute(nb = st_knn(geometry, k = 10),          nmt = nb_match_test(list(crime_pers, literacy, suicides),                              nb, nsim = 999)) %>%   tidyr::unnest(nmt) #> ! Polygon provided. Using centroid. #> Simple feature collection with 85 features and 6 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 7 #>    nb     n_shared nb_matches knn_nb probability p_sim                  geometry #>    <nb>      <int> <list>     <list>       <dbl> <dbl>            <MULTIPOLYGON> #>  1 <int …        1 <int [1]>  <int …     0.400   0.65  (((801150 2092615, 80066… #>  2 <int …        4 <int [4]>  <int …     0.0141  0.021 (((729326 2521619, 72932… #>  3 <int …        4 <int [4]>  <int …     0.0141  0.018 (((710830 2137350, 71174… #>  4 <int …        4 <int [4]>  <int …     0.0141  0.016 (((882701 1920024, 88240… #>  5 <int …        0 <int [0]>  <int …     0.260   0.27  (((886504 1922890, 88573… #>  6 <int …        0 <int [0]>  <int …     0.260   0.234 (((747008 1925789, 74663… #>  7 <int …        5 <int [5]>  <int …     0.00147 0.001 (((818893 2514767, 81861… #>  8 <int …        5 <int [5]>  <int …     0.00147 0.002 (((509103 1747787, 50882… #>  9 <int …        3 <int [3]>  <int …     0.0782  0.093 (((775400 2345600, 77506… #> 10 <int …        4 <int [4]>  <int …     0.0141  0.015 (((626230 1810121, 62626… #> # … with 75 more rows"},{"path":"/reference/nmt_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify matches between two neighbor lists — nmt_calc","title":"Identify matches between two neighbor lists — nmt_calc","text":"Identify matches two neighbor lists","code":""},{"path":"/reference/nmt_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify matches between two neighbor lists — nmt_calc","text":"","code":"nmt_calc(knn_nb, nb)"},{"path":"/reference/nmt_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify matches between two neighbor lists — nmt_calc","text":"knn_nb list length number observations used dataset nb list length knn_nb.","code":""},{"path":"/reference/nmt_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Implementation of Neighbor Match Test — nmt_impl","title":"Implementation of Neighbor Match Test — nmt_impl","text":"Implementation Neighbor Match Test","code":""},{"path":"/reference/nmt_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implementation of Neighbor Match Test — nmt_impl","text":"","code":"nmt_impl(x, k, listw, nsim = 199, scale = TRUE, .method = \"euclidian\", .p = 2)"},{"path":"/reference/nmt_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implementation of Neighbor Match Test — nmt_impl","text":"x numeric vector list numeric vectors equal length. k number neighbors identify attribute space. number neighbors provided st_knn. nsim number simulations run calculating simulated p-value. scale default TRUE. Whether x scaled . Note measures standardized. .method default \"euclidian\". distance measure passed stats::dist(). .p default 2. power Minkowski distance passed p argument stats::dist().","code":""},{"path":"/reference/nmt_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Find conditionally permuted neighbor matches — nmt_perm_impl","title":"Find conditionally permuted neighbor matches — nmt_perm_impl","text":"Given kNN attribute neighbor list listw object, find number matches given conditional permutation.","code":""},{"path":"/reference/nmt_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find conditionally permuted neighbor matches — nmt_perm_impl","text":"","code":"nmt_perm_impl(knn_nb, listw)"},{"path":"/reference/nmt_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find conditionally permuted neighbor matches — nmt_perm_impl","text":"knn_nb list numeric elements. example made dbscan::adjacencylist() listw listw object likely created recreate_listw.","code":""},{"path":"/reference/permute_listw.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditionally permutes a listw object — permute_listw","title":"Conditionally permutes a listw object — permute_listw","text":"Conditionally permutes listw object","code":""},{"path":"/reference/permute_listw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditionally permutes a listw object — permute_listw","text":"","code":"permute_listw(listw)"},{"path":"/reference/permute_listw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditionally permutes a listw object — permute_listw","text":"listw object.","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/recreate_listw.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a listw object from a neighbors and weight list — recreate_listw","title":"Create a listw object from a neighbors and weight list — recreate_listw","text":"Create listw object neighbors weight list","code":""},{"path":"/reference/recreate_listw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a listw object from a neighbors and weight list — recreate_listw","text":"","code":"recreate_listw(nb, wt)"},{"path":"/reference/recreate_listw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a listw object from a neighbors and weight list — recreate_listw","text":"nb neighbor list object example created st_contiguity(). wt weights list created st_weights().","code":""},{"path":"/reference/shuffle_nbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to shuffle neighbors — shuffle_nbs","title":"Internal function to shuffle neighbors — shuffle_nbs","text":"Used conditional permutation function permute_listw().","code":""},{"path":"/reference/shuffle_nbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to shuffle neighbors — shuffle_nbs","text":"","code":"shuffle_nbs(i, n, card)"},{"path":"/reference/shuffle_nbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to shuffle neighbors — shuffle_nbs","text":"index position observation ","code":""},{"path":"/reference/st_cardinalties.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate neighbor cardinalities — st_cardinalties","title":"Calculate neighbor cardinalities — st_cardinalties","text":"Identify cardinality neighbor object. Utilizes spdep::card() objects class nb, otherwise returns lengths(nb).","code":""},{"path":"/reference/st_cardinalties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate neighbor cardinalities — st_cardinalties","text":"","code":"st_cardinalties(nb)"},{"path":"/reference/st_cardinalties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate neighbor cardinalities — st_cardinalties","text":"nb neighbor list object created st_neighbors().","code":""},{"path":[]},{"path":"/reference/st_cardinalties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate neighbor cardinalities — st_cardinalties","text":"","code":"nb <- st_contiguity(sf::st_geometry(guerry)) st_cardinalties(nb) #>  [1] 4 6 6 4 3 7 3 3 5 5 7 3 3 6 5 5 6 6 7 3 6 7 2 5 6 6 2 6 6 6 4 4 6 6 5 6 5 4 #> [39] 6 7 5 4 7 6 6 5 8 4 6 6 5 4 5 4 2 6 3 6 6 2 6 3 3 2 4 2 4 5 7 6 2 3 8 6 5 5 #> [77] 5 6 3 6 4 6 6 6 5"},{"path":"/reference/st_contiguity.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify polygon neighbors — st_contiguity","title":"Identify polygon neighbors — st_contiguity","text":"Identify polygon neighbors","code":""},{"path":"/reference/st_contiguity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify polygon neighbors — st_contiguity","text":"","code":"st_contiguity(x, queen = TRUE, ...)"},{"path":"/reference/st_contiguity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify polygon neighbors — st_contiguity","text":"x sf sfc object. queen Default TRUE. see ?spdep::poly2nb","code":""},{"path":[]},{"path":"/reference/st_contiguity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify polygon neighbors — st_contiguity","text":"","code":"# on basic polygons geo <- sf::st_geometry(guerry) st_contiguity(geo) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 420  #> Percentage nonzero weights: 5.813149  #> Average number of links: 4.941176   # in a pipe guerry %>%   dplyr::mutate(nb = st_contiguity(geometry), .before = 1) #> Simple feature collection with 85 features and 27 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 28 #>    nb        code_dept count ave_id_geo  dept region department   crime_pers #>  * <nb>      <fct>     <dbl>      <dbl> <int> <fct>  <fct>             <int> #>  1 <int [4]> 01            1         49     1 E      Ain               28870 #>  2 <int [6]> 02            1        812     2 N      Aisne             26226 #>  3 <int [6]> 03            1       1418     3 C      Allier            26747 #>  4 <int [4]> 04            1       1603     4 E      Basses-Alpes      12935 #>  5 <int [3]> 05            1       1802     5 E      Hautes-Alpes      17488 #>  6 <int [7]> 07            1       2249     7 S      Ardeche            9474 #>  7 <int [3]> 08            1      35395     8 N      Ardennes          35203 #>  8 <int [3]> 09            1       2526     9 S      Ariege             6173 #>  9 <int [5]> 10            1      34410    10 E      Aube              19602 #> 10 <int [5]> 11            1       2807    11 S      Aude              15647 #> # … with 75 more rows, and 20 more variables: crime_prop <int>, literacy <int>, #> #   donations <int>, infants <int>, suicides <int>, main_city <ord>, #> #   wealth <int>, commerce <int>, clergy <int>, crime_parents <int>, #> #   infanticide <int>, donation_clergy <int>, lottery <int>, desertion <int>, #> #   instruction <int>, prostitutes <int>, distance <dbl>, area <int>, #> #   pop1831 <dbl>, geometry <MULTIPOLYGON>"},{"path":"/reference/st_inverse_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Inverse Distance Bands — st_inverse_weights","title":"Calculate Inverse Distance Bands — st_inverse_weights","text":"Calculate Inverse Distance Bands","code":""},{"path":"/reference/st_inverse_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Inverse Distance Bands — st_inverse_weights","text":"","code":"st_inverse_weights(x, nb, scale = 100, threshold = NULL)"},{"path":"/reference/st_inverse_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Inverse Distance Bands — st_inverse_weights","text":"x Spatial points. Typically geometry column sf object. nb nb neighbor list created st_knn(x, k = 1). scale scaling factor use calculating inverse distance band. threshold critical threshold use distance band.","code":""},{"path":"/reference/st_inverse_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Inverse Distance Bands — st_inverse_weights","text":"See implementation details . distance band based weights see .","code":""},{"path":[]},{"path":"/reference/st_kernel_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Kernel Weights — st_kernel_weight","title":"Calculate Kernel Weights — st_kernel_weight","text":"Calculate Kernel Weights","code":""},{"path":"/reference/st_kernel_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Kernel Weights — st_kernel_weight","text":"","code":"st_kernel_weight(x, nb, kernel = \"uniform\", threshold = NULL)"},{"path":"/reference/st_kernel_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Kernel Weights — st_kernel_weight","text":"x Spatial points. Typically geometry column sf object. nb nb neighbor list created st_knn(x, k = 1). kernel One \"uniform\", \"gaussian\",  \"triangular\", \"epanechnikov\", \"quartic\". threshold critical threshold use distance band.","code":""},{"path":"/reference/st_kernel_weight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Kernel Weights — st_kernel_weight","text":"default st_kernel_weight() utilizes critical threshold maximum neighbor distance. desired, critical threshold can specified manually. threshold passed underlying kernel. See kernels .","code":""},{"path":[]},{"path":"/reference/st_kernel_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Kernel Weights — st_kernel_weights","title":"Calculate Kernel Weights — st_kernel_weights","text":"Calculate Kernel Weights","code":""},{"path":"/reference/st_kernel_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Kernel Weights — st_kernel_weights","text":"","code":"st_kernel_weights(x, nb, kernel = \"uniform\", threshold = NULL)"},{"path":"/reference/st_kernel_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Kernel Weights — st_kernel_weights","text":"x Spatial points. Typically geometry column sf object. nb nb neighbor list created st_knn(x, k = 1). kernel One \"uniform\", \"gaussian\",  \"triangular\", \"epanechnikov\", \"quartic\". threshold critical threshold use distance band.","code":""},{"path":"/reference/st_kernel_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Kernel Weights — st_kernel_weights","text":"default st_kernel_weight() utilizes critical threshold maximum neighbor distance. desired, critical threshold can specified manually. threshold passed underlying kernel. See kernels .","code":""},{"path":[]},{"path":"/reference/st_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate K-Nearest Neighbors — st_knn","title":"Calculate K-Nearest Neighbors — st_knn","text":"Identifies k nearest neighbors given point geometry. polygon geometry provided, centroids polygon used warning emitted.","code":""},{"path":"/reference/st_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate K-Nearest Neighbors — st_knn","text":"","code":"st_knn(x, k = 1, symmetric = FALSE, ...)"},{"path":"/reference/st_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate K-Nearest Neighbors — st_knn","text":"x sf sfc object. k number nearest neighbours returned symmetric default FALSE. Whether force output neighbours symmetric. ... additional arguments passed knearneigh().","code":""},{"path":"/reference/st_knn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate K-Nearest Neighbors — st_knn","text":"function utilizes spdep::knearneigh() spdep::knn2nb().","code":""},{"path":[]},{"path":"/reference/st_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate K-Nearest Neighbors — st_knn","text":"","code":"st_knn(sf::st_geometry(guerry), k = 8) #> ! Polygon provided. Using centroid. #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 680  #> Percentage nonzero weights: 9.411765  #> Average number of links: 8  #> Non-symmetric neighbours list"},{"path":"/reference/st_lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate spatial lag — st_lag","title":"Calculate spatial lag — st_lag","text":"Calculates spatial lag numeric variable given neighbor weights list.","code":""},{"path":"/reference/st_lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate spatial lag — st_lag","text":"","code":"st_lag(x, nb, wt, na_ok = FALSE, allow_zero = NULL, ...)"},{"path":"/reference/st_lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate spatial lag — st_lag","text":"x numeric vector nb neighbor list object created st_neighbors(). wt weights list created st_weights(). na_ok Default FALSE. , TRUE missing values return lagged NA. allow_zero TRUE, assigns zero lagged value zone without neighbors. ... See ?spdep::lag.listw .","code":""},{"path":[]},{"path":"/reference/st_lag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate spatial lag — st_lag","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) wt <- st_weights(nb)  st_lag(guerry$crime_pers, nb, wt) #>  [1] 23047.50 26919.67 26195.50 14401.25 15038.67 15749.00 22111.67 13672.33 #>  [9] 22859.20 11475.20 12200.14 13278.67 24734.00 11752.83 17992.60 21974.40 #> [17] 26711.00 19344.00 23696.71 25108.67 21643.17 18306.00 24280.00 14451.60 #> [25] 21047.67 21421.33 25961.50 10869.83 13415.67 17172.17 20238.25 12504.25 #> [33] 26723.00 21772.83 26462.20 19252.00 24683.20 20607.25 24412.00 19373.71 #> [41] 16000.20 23993.25 20337.86 16818.67 17113.83 13013.00 22133.00 24093.75 #> [49] 25661.67 22190.17 29030.00 16951.00 24509.00 24982.75 19491.50 24176.00 #> [57] 27639.67 21274.33 24510.33 30166.00 23459.00 16184.00 18002.00 10910.00 #> [65] 16251.25 15572.00 25884.25 23020.60 26495.00 24690.50 17339.00 25522.33 #> [73] 18970.00 19701.83 21841.00 24520.40 14025.80 14565.17 13306.67 12579.00 #> [81] 21529.50 23474.50 24373.17 19900.50 23373.60"},{"path":"/reference/st_nb_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to neighbors — st_nb_apply","title":"Apply a function to neighbors — st_nb_apply","text":"Sometimes one may want create custom lag variables create neighborhood level metric may defined yet. st_nb_apply() enables apply function observation's (xi) neighbors (xij).","code":""},{"path":"/reference/st_nb_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to neighbors — st_nb_apply","text":"","code":"st_nb_apply(x, nb, wt, .f, suffix = \"dbl\", ...)"},{"path":"/reference/st_nb_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to neighbors — st_nb_apply","text":"x vector used neighbor xij values. nb neighbor list object created st_neighbors(). wt weights list created st_weights(). .f function definition. three default objects can used inside function definition: .xij: neighbor values x ith observation. simply subset x based corresponding nb list values element. .nb: neighbor positions. .wt: neighbor weights value. three function arguments omitted .f, dots (...) must supplied. suffix map variant use. Options \"dbl\", \"int\", \"lgl\", \"chr\", \"list\". ... See ?spdep::lag.listw .","code":""},{"path":"/reference/st_nb_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to neighbors — st_nb_apply","text":"","code":"#TODO make acs_nb object and make examples"},{"path":"/reference/st_nb_band.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbors from a distance band — st_nb_band","title":"Neighbors from a distance band — st_nb_band","text":"Creates neighbors based distance band.","code":""},{"path":"/reference/st_nb_band.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbors from a distance band — st_nb_band","text":"","code":"st_nb_band(x, lower = 0, upper = 0.01, ...)"},{"path":"/reference/st_nb_band.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighbors from a distance band — st_nb_band","text":"x sf sfc object. lower lower threshold distance band. recommended keep 0. upper upper threshold distance band. ... Passed spdep::dnearneigh().","code":""},{"path":[]},{"path":"/reference/st_nb_band.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neighbors from a distance band — st_nb_band","text":"","code":"st_nb_band(sf::st_geometry(guerry), upper = 97000) #> ! Polygon provided. Using centroid. #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 314  #> Percentage nonzero weights: 4.346021  #> Average number of links: 3.694118"},{"path":"/reference/st_nb_dists.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate neighbor distances — st_nb_dists","title":"Calculate neighbor distances — st_nb_dists","text":"nb list point geometry, return list distances observation's neighbors list.","code":""},{"path":"/reference/st_nb_dists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate neighbor distances — st_nb_dists","text":"","code":"st_nb_dists(x, nb, longlat = NULL)"},{"path":"/reference/st_nb_dists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate neighbor distances — st_nb_dists","text":"x Spatial points. Typically geometry column sf object. nb nb neighbor list created st_knn(x, k = 1). longlat TRUE point coordinates longitude-latitude decimal degrees, case distances measured kilometers. See ?spdep::nbdists() .","code":""},{"path":"/reference/st_nb_dists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate neighbor distances — st_nb_dists","text":"Utilizes spdep::nbdists() distance calculation.","code":""},{"path":[]},{"path":"/reference/st_nb_dists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate neighbor distances — st_nb_dists","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) dists <- st_nb_dists(geo, nb) #> ! Polygon provided. Using centroid.  head(dists) #> [[1]] #> [1] 94622.84 74876.40 60438.55 86742.87 #>  #> [[2]] #> [1]  78599.67  84091.42 101845.49  83847.15 113411.37 102512.99 #>  #> [[3]] #> [1]  91683.65  96296.70 105885.80  83770.92  74337.25 107558.70 #>  #> [[4]] #> [1]  62028.42 107180.60  73932.42  86186.17 #>  #> [[5]] #> [1] 62028.42 86892.02 85919.08 #>  #> [[6]] #> [1]  59404.30  86545.40 107129.78 110296.32  64295.38  77906.59 102318.73 #>"},{"path":"/reference/st_nb_lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Pure Higher Order Neighbors — st_nb_lag","title":"Pure Higher Order Neighbors — st_nb_lag","text":"Identify higher order neighbors neighbor list. order must greater 1. order equals 2 neighbors neighbors list returned forth. See Anselin's slides example.","code":""},{"path":"/reference/st_nb_lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pure Higher Order Neighbors — st_nb_lag","text":"","code":"st_nb_lag(nb, order)"},{"path":"/reference/st_nb_lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pure Higher Order Neighbors — st_nb_lag","text":"nb neighbor list object created st_contiguity(). order order neighbors.","code":""},{"path":[]},{"path":"/reference/st_nb_lag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pure Higher Order Neighbors — st_nb_lag","text":"","code":"nb <- st_contiguity(sf::st_geometry(guerry)) st_nb_lag(nb, 3) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 988  #> Percentage nonzero weights: 13.67474  #> Average number of links: 11.62353"},{"path":"/reference/st_nb_lag_cumul.html","id":null,"dir":"Reference","previous_headings":"","what":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"Creates encompassing neighbor list order specified. example, order 2 result contains 1st 2nd order neighbors.","code":""},{"path":"/reference/st_nb_lag_cumul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"","code":"st_nb_lag_cumul(nb, order)"},{"path":"/reference/st_nb_lag_cumul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"nb neighbor list object created st_contiguity(). order order neighbors.","code":""},{"path":[]},{"path":"/reference/st_nb_lag_cumul.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"","code":"nb <- st_contiguity(sf::st_geometry(guerry)) st_nb_lag_cumul(nb, 3) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 2164  #> Percentage nonzero weights: 29.95156  #> Average number of links: 25.45882"},{"path":"/reference/st_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate spatial weights — st_weights","title":"Calculate spatial weights — st_weights","text":"Calculate polygon spatial weights nb list. See spdep::nb2listw() details.","code":""},{"path":"/reference/st_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate spatial weights — st_weights","text":"","code":"st_weights(nb, style = \"W\", allow_zero = NULL, ...)"},{"path":"/reference/st_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate spatial weights — st_weights","text":"nb neighbor list object created st_neighbors(). style Default \"W\" row standardized weights. value can also \"B\", \"C\", \"U\", \"minmax\", \"S\". See spdep::nb2listw() details.","code":""},{"path":"/reference/st_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate spatial weights — st_weights","text":"hood, st_weights() creates listw object extracts weights elements neighbours element already--presumably--already existent neighbors list already created. listw objects recreated using recreate_listw() calculating statistics.","code":""},{"path":[]},{"path":"/reference/st_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate spatial weights — st_weights","text":"","code":"guerry %>%  dplyr::mutate(nb = st_contiguity(geometry),                wt = st_weights(nb)) #> Simple feature collection with 85 features and 28 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 29 #>    code_dept count ave_id_geo  dept region department   crime_pers crime_prop #>  * <fct>     <dbl>      <dbl> <int> <fct>  <fct>             <int>      <int> #>  1 01            1         49     1 E      Ain               28870      15890 #>  2 02            1        812     2 N      Aisne             26226       5521 #>  3 03            1       1418     3 C      Allier            26747       7925 #>  4 04            1       1603     4 E      Basses-Alpes      12935       7289 #>  5 05            1       1802     5 E      Hautes-Alpes      17488       8174 #>  6 07            1       2249     7 S      Ardeche            9474      10263 #>  7 08            1      35395     8 N      Ardennes          35203       8847 #>  8 09            1       2526     9 S      Ariege             6173       9597 #>  9 10            1      34410    10 E      Aube              19602       4086 #> 10 11            1       2807    11 S      Aude              15647      10431 #> # … with 75 more rows, and 21 more variables: literacy <int>, donations <int>, #> #   infants <int>, suicides <int>, main_city <ord>, wealth <int>, #> #   commerce <int>, clergy <int>, crime_parents <int>, infanticide <int>, #> #   donation_clergy <int>, lottery <int>, desertion <int>, instruction <int>, #> #   prostitutes <int>, distance <dbl>, area <int>, pop1831 <dbl>, #> #   geometry <MULTIPOLYGON>, nb <nb>, wt <list>  # using geometry column directly nb <- st_contiguity(guerry$geometry) wt <- st_weights(nb)"}]
